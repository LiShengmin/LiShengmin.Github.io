<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shemmy</title>
  <subtitle>iOS, 架构， Python, AI, go，（看不到评论模块的请外网访问～）</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/LiShengmin/"/>
  <updated>2017-08-02T09:54:57.779Z</updated>
  <id>https://github.com/LiShengmin/</id>
  
  <author>
    <name>Shemmy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS-CoreML</title>
    <link href="https://github.com/LiShengmin/2017/06/20/iOS-CoreML/"/>
    <id>https://github.com/LiShengmin/2017/06/20/iOS-CoreML/</id>
    <published>2017-06-19T16:34:32.000Z</published>
    <updated>2017-08-02T09:54:57.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>CoreML 是 Apple 今年 WWDC 新推出面向开发者的机器学习框架。。</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>“典型的苹果用户，将在不知不觉中得到机器学习带来的用户体验的提升，并因此更加爱上苹果产品”。Schiller 说。“最让人兴奋的是，你甚至都感觉不到它的存在，直到有一天你突然意识到，并发出由衷的感叹：“这一切是怎么发生的？”<br><a id="more"></a></p>
<h1 id="苹果在机器学习领域到底强到什么程度？"><a href="#苹果在机器学习领域到底强到什么程度？" class="headerlink" title="苹果在机器学习领域到底强到什么程度？"></a>苹果在机器学习领域到底强到什么程度？</h1><blockquote>
<p>News</p>
</blockquote>
<p>雷锋网AI科技评论按：7月份，在经历了长达几个月外界对苹果AI技术落后的质疑后，苹果又有了一些新动作，首先是在7月20日上线了苹果机器学习官方博客<a href="https://developer.apple.com/machine-learning/" target="_blank" rel="external">Apple Machine Learning Journal</a>，并发表了第一篇博文；其次提交的论文被CVPR 2017收录，获最佳论文。<br>其实作为一个果粉，和对苹果创新力的毫不怀疑，我可以看到苹果在AI技术上进展。<br>无人驾驶领域中，<img src="https://p0.ifengimg.com/pmop/2017/0801/E70162A462A1DBCB2056F5FB61926BBB902FC0E1_size51_w640_h397.jpeg" alt="image"><br>根据参会者的描绘：<br>会上一张幻灯片上有两张非常有特色的汽车图片，该幻灯片汇总了苹果公司的研究，说明了“LiDAR的体积检测”和“结构化输出预测”。<br>对于现如今的无人驾驶技术而言，LiDAR或光感测距（和雷达类似，但借助激光）以及物理事件预测都是非常重要的组成部分。</p>
<blockquote>
<p>专有芯片？</p>
</blockquote>
<p>在各个大厂都在研制自己的AI专用芯片的时候(谷歌的TPU（张量处理单元）和微软的FPGA（现场可编程逻辑闸阵列）)， 苹果好似已经放弃了专用芯片这条路，但是在造芯片这件事上，我只能说苹果还是非常有经验的。</p>
<blockquote>
<p>算法！</p>
</blockquote>
<p>Google大厂开源了TF框架和Apple比较（同时使用标准服务器），谷歌1500page/sec对比苹果的3000page/sec，在算法上虽然google一直是比较厉害的，但是苹果上总会走出一条独特风格的路线的～</p>
<blockquote>
<p>训练库！</p>
</blockquote>
<p>据说，苹果训练其神经网络识别图像的库似乎是专有的，其规模是imageNet库的两倍之多。</p>
<blockquote>
<p>效率</p>
</blockquote>
<p>在使用效率上CoreML构建的神经网络比原始网络小4.5倍，精度却没有损失，速度快2倍。<br>在移动设备中使用了精简神经网的方法，使其在本地预测的方式变得更加可能～</p>
<blockquote>
<p>起步时间</p>
</blockquote>
<p>另外值得一说的其实苹果在ML这个领域中时间已经非常之久了，最明显的是Siri。早在2014.06月末新版本Siri已经美国区开始推广使用，前一个版本的Siri使用的隐马尔可夫模型，被替换为现有的DNN、CNN、长短期记忆单位、封闭复发性单位（gated recurrent units）、以及n-grams等技术～而这些技术有些在国内现在还无法被成熟利用～</p>
<blockquote>
<p>转化为产品</p>
</blockquote>
<p>Siri转变的故事最令人深省的不是因为神经网络对系统的提升，而是因为苹果对技术如此熟练又如此低调。<br>其实更多苹果中的应用中已经更多的集成机器学习，但是我们并不能看到像google那种紧紧将其简单产品化的做法，苹果的人工智能在多大程度上重塑了苹果的生态系统。苹果研发人工智能的初衷是，弥补缺乏搜索引擎带来的用户体验缺失。（搜索引擎能够训练神经网络，使其快速成熟）<br>更多的产品例如,News， AppStore， 常用App推荐， 输入法预测等等领域～</p>
<blockquote>
<p>隐私</p>
</blockquote>
<p>使用了ML技术，避免不了使用大量的用户数据来分析用户行为，但是我们非常担心苹果所掌握这么大规模的数据会用来做什么，但是苹果的高管们再次强调了苹果对于保证用户隐私的决心。（即使这样将限制用户数据的使用，从而阻碍机器学习的效果）高管们强调，这些障碍并非不可逾越。<br><strong>更多关于隐私方面的可以看我在补充里面的QA～</strong></p>
<h1 id="为什么是CoreML而不是TF、Theano"><a href="#为什么是CoreML而不是TF、Theano" class="headerlink" title="为什么是CoreML而不是TF、Theano"></a>为什么是CoreML而不是TF、Theano</h1><p>在没有出CoreML的时候，为了在iOS中实现ML，许多大神们自己搞了很多，包括使用Tensorflow、Theano提供的引擎，来做出预测，其中主要困难点:</p>
<ol>
<li>资源所限，我们只能把训练部分放在服务器上跑，把训练好的数据再在iOS中使用。</li>
<li>模型导入繁琐，在代码中构建模型这部分真的非常痛苦</li>
<li>库兼容不是很好搞定，</li>
<li>训练包大多都很大（其实TF在我们采样率调低的时候，我们会发现训练包可以下降至5M以内）</li>
<li>iPhone系统只允许使用CPU来计算，不能使用GPU（这点上和安卓根本就没法比好么），更别提专有芯片什么的了。</li>
<li>效率低、运算缓慢，以至于只能在7上勉强能跑动。<br>种种困难，在CoreML出来后迎刃而解～你会发现CoreML真的简单到没朋友好吧～<br>（说实话，TF，和Theano真正厉害的根本就不在这里好吧，人家的复杂神经网络预测根本没法比好么。。）</li>
</ol>
<h1 id="CoreML-使用流程"><a href="#CoreML-使用流程" class="headerlink" title="CoreML 使用流程"></a>CoreML 使用流程</h1><p><img src="http://imgcdn.atyun.com/2017/06/6BABC06F-373A-4217-B64E-5035FA66E71F-1024x285.jpg" alt="image"></p>
<ol>
<li>其他软件的训练包～通过自家Core ML Tools来生成.mlmodel</li>
<li>将.mlmodel导入xcode，系统会自动生成模型文件，并提供接口</li>
<li>在代码中使用let model = MarsHabitatPricer()来创建模型。非常直观。</li>
<li>使用MarsHabitatPricerInput将将要预测因变量的输入（使程序获得输入用于计算的值）</li>
<li>在这之中我们不需要关心里面到底做了什么，（因为相当于是黑盒）</li>
<li>通过MarsHabitatPricerOutput得到预测后的信号（获得输出最后的结果）<br>这是苹果对CoreML的描述：<br>在大多数情况下，您仅与模型的动态生成界面进行交互，当您将Xcode项目添加到模型时，Xcode将自动创建。在需要支持自定义工作流或高级用例的情况下，您可以直接使用Core ML API。例如，如果需要在将输入数据异步收集到自定义结构中时进行预测，则可以使用该结构(MLFeatureProvider)通过采用协议为模型提供输入特征。<br>官方文档中的描述：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Xcode还使用有关模型输入和输出的信息来自动生成模型的自定义编程接口，您可以在代码中与模型进行交互。</div><div class="line">对于，Xcode生成接口来表示model（），model的inputs（）和model的output（）。MarsHabitatPricer.mlmodel</div><div class="line">MarsHabitatPricer</div><div class="line">MarsHabitatPricerInput</div><div class="line">MarsHabitatPricerOutput</div><div class="line">使用生成的类的初始化器来创建模型：MarsHabitatPricer</div><div class="line">let model = MarsHabitatPricer()</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="可能涉及到的名词"><a href="#可能涉及到的名词" class="headerlink" title="可能涉及到的名词"></a>可能涉及到的名词</h1><p>可能你看到这里一脸懵逼，.mlmodel是什么？ 训练模型又是什么鬼，在这里我统一解释，不了解的可以下方评论里留言我会一一解答～</p>
<ol>
<li>模型：代表着内部的所含有的信息，如一个模型包含学费，姓名，分数。集合起来就是模型。（先简单的这么理解）</li>
<li>训练模型：要做机器学习必然是要先做一个模型，然后使用一个机器，让这个模型不断进步，这个就是训练。训练好的模型理论上就可以直接使用了CoreML使用的是“*.Mlmodel”文件作为训练后的模型。</li>
<li>苹果简化大部分工作后的人工智能，就是我们暂时不关心内部操作（黑盒），只关心输入数据和输出数据。预测过程完全黑盒。（至于什么rnn、cnn、gans，暂时和CoreML没有什么关系。）</li>
<li>rnn、cnn、gans可以理解成为模型训练时侯执行的算法，训练模型的方法～，rnn：循环神经网络，cnn：卷积神经网络，gans对抗网络。</li>
<li>*.mlmodel是苹果推出的训练后模型包的文件格式～</li>
<li>Caffe：由加州大学伯克利分校开发的一款用于构建和训练神经网络的开源软件</li>
<li>Keras：一个可以非常简单的构建训练神经网络的开源python库, 安装方法<code>pip install keras</code></li>
</ol>
<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><h2 id="官方Demo中自动生成的模型代码详细解释"><a href="#官方Demo中自动生成的模型代码详细解释" class="headerlink" title="官方Demo中自动生成的模型代码详细解释"></a>官方Demo中自动生成的模型代码详细解释</h2><p>废话不多说，我们看下苹果自家的Demo<br><a href="https://docs-assets.developer.apple.com/published/51ff0c1668/IntegratingaCoreMLModelintoYourApp.zip" target="_blank" rel="external">官方Demo下载</a><br>下面文件是我在苹果的示例代码中找到的，解释全部标注在代码后面<br>以下都是自动生成的代码，所以不用关心也可，但是其他的框架使用的模型声明逻辑大体也是如此～</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> CoreML <span class="comment">//引入头文件</span></div><div class="line"><span class="comment">/*</span></div><div class="line">	MarsHabitatPricerInput： 这里应该是自己声明的类，不是系统提供的类</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MarsHabitatPricerInput</span> : <span class="title">MLFeatureProvider</span> </span>&#123;<span class="comment">//这里就是MarsHabitatPricerInput</span></div><div class="line">    <span class="keyword">var</span> solarPanels: <span class="type">Double</span> 	<span class="comment">//模型中的属性</span></div><div class="line">    <span class="keyword">var</span> greenhouses: <span class="type">Double</span>	<span class="comment">//模型中的属性</span></div><div class="line">    <span class="keyword">var</span> size: <span class="type">Double</span>			<span class="comment">//模型中的属性</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> featureNames: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="keyword">return</span> [<span class="string">"solarPanels"</span>, <span class="string">"greenhouses"</span>, <span class="string">"size"</span>]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">    	featureName：一组有效的功能名称</div><div class="line">    	MLFeatureValue： 访问命名要素的值</div><div class="line">    	</div><div class="line">    	其实也可以使用</div><div class="line">    	MLDictionaryFeatureProvider：使用字典来包装</div><div class="line">    	MLFeatureValue：表示特征类型和值的不可变实例</div><div class="line">    	MLFeatureDescription：描述</div><div class="line">    	MLMultiArray：用作模型的输入或输出的多维数组</div><div class="line">    	</div><div class="line">var inputDescriptionsByName: [String : MLFeatureDescription]</div><div class="line">		通过功能名称描述模型中的各种输入。</div><div class="line">var outputDescriptionsByName: [String : MLFeatureDescription]</div><div class="line">		通过功能名称描述模型的各种输出。</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">featureValue</span><span class="params">(<span class="keyword">for</span> featureName: String)</span></span> -&gt; <span class="type">MLFeatureValue</span>? &#123;</div><div class="line">        <span class="keyword">if</span> (featureName == <span class="string">"solarPanels"</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="type">MLFeatureValue</span>(double: solarPanels)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (featureName == <span class="string">"greenhouses"</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="type">MLFeatureValue</span>(double: greenhouses)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (featureName == <span class="string">"size"</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="type">MLFeatureValue</span>(double: size)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//构建方法</span></div><div class="line">    <span class="keyword">init</span>(solarPanels: <span class="type">Double</span>, greenhouses: <span class="type">Double</span>, size: <span class="type">Double</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.solarPanels = solarPanels</div><div class="line">        <span class="keyword">self</span>.greenhouses = greenhouses</div><div class="line">        <span class="keyword">self</span>.size = size</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">	MarsHabitatPricerOutput：和上面同样无法推测出这个是系统提供的还是自己推测出来的。</div><div class="line">	但是可以推测出来</div><div class="line">		MLFeatureProvider：是特征值，用来表示某种特征，如输入的某种特征，输出的某种特征。</div><div class="line">	这样我们就以推测出来MarsHabitatPricerOutput，MarsHabitatPricerInput，就是将特征值在进行一个分类的抽象，抽象成为输入和输出两个部分，方便查找和调用。</div><div class="line">	同样我们可以认为苹果希望我们把输入和输出分开进行书写。但是我同样可以认为可以写在一起（没试过）</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MarsHabitatPricerOutput</span> : <span class="title">MLFeatureProvider</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> price: <span class="type">Double</span> <span class="comment">//声明一个价格属性</span></div><div class="line"> </div><div class="line">    <span class="keyword">var</span> featureNames: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="keyword">return</span> [<span class="string">"price"</span>]</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="comment">//这个是一个MLFeatureProvider中提供的属性。</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">featureValue</span><span class="params">(<span class="keyword">for</span> featureName: String)</span></span> -&gt; <span class="type">MLFeatureValue</span>? &#123;</div><div class="line">        <span class="keyword">if</span> (featureName == <span class="string">"price"</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="type">MLFeatureValue</span>(double: price)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;<span class="comment">//同样与之配套的函数，用来给特征起个名字，并且确定被命名要素的值</span></div><div class="line">    </div><div class="line">    <span class="comment">//构造方法不多说了</span></div><div class="line">    <span class="keyword">init</span>(price: <span class="type">Double</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.price = price</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//下面这个我认为应该是自己写的。不是系统的。。</span></div><div class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">class</span> <span class="title">MarsHabitatPricer</span>:<span class="title">NSObject</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> model: <span class="type">MLModel</span></div><div class="line">    <span class="comment">// 有关MLModel</span></div><div class="line">    <span class="comment">/*</span></div><div class="line">    当使用MLModel的时候，可以使用prediction(from:)方法来预测值</div><div class="line">    func prediction(from input: MLFeatureProvider) throws -&gt; MLFeatureProvider</div><div class="line">		参数：input-模型需要进行预测的所有特征值。</div><div class="line"></div><div class="line">	init(contentsOf: URL)</div><div class="line">			创建一个核心ML模型，仅在不使用Xcode自动生成界面时使用。</div><div class="line">		convenience init(contentsOf url: URL) throws</div><div class="line">		contentsOf:填写你的.mlmodelc文件地址</div><div class="line">		建议您使用Xcode处理您的Core ML（.mlmodelc）文件并使用动态创建的对象。如果您需要动态创建具体的MLModel,可通过名为model的属性来暴露底层，而不应该直接创建MLModel对象。</div><div class="line"></div><div class="line">    */</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(contentsOf url: <span class="type">URL</span>) <span class="keyword">throws</span> &#123;</div><div class="line">        <span class="keyword">self</span>.model = <span class="keyword">try</span> <span class="type">MLModel</span>(contentsOf: url)</div><div class="line">    &#125;<span class="comment">//创建一个CoreML模型，仅在没有使用Xcode自动生成界面时使用。</span></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">convenience</span> <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line">        <span class="keyword">let</span> bundle = <span class="type">Bundle</span>(<span class="keyword">for</span>: <span class="type">MarsHabitatPricer</span>.<span class="keyword">self</span>)</div><div class="line">        <span class="keyword">let</span> assetPath = bundle.url(forResource: <span class="string">"MarsHabitatPricer"</span>, withExtension:<span class="string">"mlmodelc"</span>)</div><div class="line">        <span class="keyword">try</span>! <span class="keyword">self</span>.<span class="keyword">init</span>(contentsOf: assetPath!)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">    使用给定的特征值，对输出值进行预测。</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">prediction</span><span class="params">(input: MarsHabitatPricerInput)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">MarsHabitatPricerOutput</span> &#123;</div><div class="line">        <span class="keyword">let</span> outFeatures = <span class="keyword">try</span> model.prediction(from: input)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> result = <span class="type">MarsHabitatPricerOutput</span>(price: outFeatures.featureValue(<span class="keyword">for</span>: <span class="string">"price"</span>)!.doubleValue)</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">    这是一个便捷方法，输入3个因变量，然后通过MarsHabitatPricerOutput来返回其中的Price</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">prediction</span><span class="params">(solarPanels: Double, greenhouses: Double, size: Double)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">MarsHabitatPricerOutput</span> &#123;</div><div class="line">        <span class="keyword">let</span> input_ = <span class="type">MarsHabitatPricerInput</span>(solarPanels: solarPanels, greenhouses: greenhouses, size: size)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">try</span> <span class="keyword">self</span>.prediction(input: input_)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实就是给了一个构建的接口，一个输入的接口，一个输出的接口而已～</p>
<p><img src="/image/81fd7dbd28ec88e37422e01ff7ea8bb8.png" alt="运行后的图"></p>
<p>Domo非常简单就是控制输入的信号来控制输出，（非线形的输出～）</p>
<h2 id="Demo-通过图片预测猫狗的品种"><a href="#Demo-通过图片预测猫狗的品种" class="headerlink" title="Demo-通过图片预测猫狗的品种"></a>Demo-通过图片预测猫狗的品种</h2><p><a href="https://developer.apple.com/machine-learning/" target="_blank" rel="external">动物识别模型</a><br>首先我们要有一个模型，然后将其拖入项目中。<br><img src="http://imgcdn.atyun.com/2017/06/D180935C-47FF-46F8-8FAA-26FE7A0E62F7-1024x532.jpg" alt="image2"><br>我们先看这个Model的Des，从描述里面能看出来，这是一个神经网络的分类器，输入是一张像素为 (224 * 224) 的图片，输出为分类结果。自动生成上述接口文件（Model Class）<br>ok， 这个是模型就是要一个照片，CVPixelBuffer类型的，做一个剪裁，再转换为CVPixelBuffer。<br><img src="http://imgcdn.atyun.com/2017/06/8903F66D-EA84-459D-836B-501815C7851B-1024x460.jpg" alt="cat"><br><img src="http://imgcdn.atyun.com/2017/06/1C8FC431-CC04-474D-8FD7-23A6A990FA41-1024x327.jpg" alt="dog"><br>结果虽然准确度不够，但是依然可以分辨猫狗～</p>
<h2 id="Demo-通过图片预测拍摄物体名称"><a href="#Demo-通过图片预测拍摄物体名称" class="headerlink" title="Demo-通过图片预测拍摄物体名称"></a>Demo-通过图片预测拍摄物体名称</h2><p>第二个例子需要我们准备的东西大体上相同，Resnet50模型，导入工程后，<br>在我们有模型之后我们就可以通过建立一个 ResnetOutput 类实例。在此之后，我们即可获取每项预测结论的最高概率，并确定拥有最高概率之预测结论的类标签。<br>为了立即对新的输入内容进行测试，这里我快速创建了一款应用以分析图像与视频。首先，我们允许用户从相册当中选择图像或者直接进行拍照以获取待分析图像。正如之前所看到，这里我们可以使用两个来自 Resnet50 类的 API：<br>    •    func prediction(input: Resnet50Input) throws -&gt; Resnet50Output<br>    •    func prediction(image: CVPixelBuffer) throws -&gt; Resnet50Output</p>
<p>我利用前者以处理图像素材，后者则用于处理视频素材。（本质上也是分割成帧，单页处理问题）<br><img src="/image/62a506d39bd14e0ac3433cd1a59243a2.png" alt="photo"><br>这种无需任何等待即可看到预测结果的体验让我非常兴奋——而更让我激动的是，视频分析也基本具备同样的感受！因此我创建了一个 AVCaptureSession 实例以捕捉实时相机镜头，并将其作为子视图中的一个层。<br>在此之后，利用以下<br><strong>AVCaptureVideoDataOutputSampleBufferDelegate </strong><br>作为代表方法：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">captureOutput</span><span class="params">(<span class="number">_</span> output: AVCaptureOutput, didOutput sampleBuffer: </span></span></div><div class="line">CMSampleBuffer, from connection: AVCaptureConnection)</div></pre></td></tr></table></figure></p>
<p>我得以获得连续缓冲区。与之前的图像处理一样，我以同样的方式对该缓冲区进行处理，并将其设置为这套模型的输入内容。可以看到：<br><img src="http://ugcyd.qq.com/flv/187/68/l05115ghtlm.m701.mp4?vkey=8026F1298F18C7720B378350FC74904B316E80042DCB8C9F872B49809BA642FFD062A61D28CA2BD9233A4EED68A694699231385215F73C1892EFDB7D00EEEC27369667D14C5DAB92B40951BA1C60FB14F229056A6E72A384&amp;br=25&amp;platform=2&amp;fmt=auto&amp;level=0&amp;sdtfrom=v1010&amp;guid=0ceb1f7c20f0eeb5173e112e5e49c8bb" alt="video,加载不出来的点击我，去另外的界面观看视频～"><br><a href="https://github.com/s/CoreMLDemo/tree/master">Demo代码地址</a></p>
<h1 id="CoreML的模型构建～"><a href="#CoreML的模型构建～" class="headerlink" title="CoreML的模型构建～"></a>CoreML的模型构建～</h1><p>相较于其他移动端深度学习框架，Core ML看起来更方便使用。苹果很聪明的定义了一个标准的模型格式（.mlmodel）<br>如果你使用了Keras、Cafee、scikit-learn、libsvm 以及 XGBoost 等工具创建的模型，可以使用Core ML Tools（挂载在 Python Package Index (PyPI) ）来转换到.mlmodel文件上。</p>
<p>要了解关于 Python 包的更多信息，请参阅 <a href="https://packaging.python.org/" target="_blank" rel="external">Python Packaging User Guide</a>。<br>CoreML不支持GoogleAI框架TF，不过我们可以自己制作扩展包～</p>
<p>例子：<br>作为演示使用Scikit-learn构建模型<br>我们需要将其转换为.mlmodel 格式。出于演示的目的，这里我们选择使用 SVC 数字数据集。另当然，大家也可以利用基于 Keras 的数据集生成神经网络模型，并将其转换为.mlmodel 格式。简而言之，大家只需要编写以下代码即可顺利将模型转换为.mlmodel 格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Now it's time to convert it to .mlmodel format</span></div><div class="line">coreml_model = coremltools.converters.sklearn.convert(classifier, ferture_names, <span class="string">"digit"</span>)</div><div class="line">coreml_model.save(<span class="string">"disgits.mlmodel"</span>)</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>模型类型</th>
<th>支持的模型</th>
<th>支持的工具</th>
</tr>
</thead>
<tbody>
<tr>
<td>神经网络 (Neural network)</td>
<td>前馈 (Feedforward)、卷积</td>
<td>(Convolutional)、循环 (Recurrent)</td>
<td>Caffe / Keras 1.2.2</td>
</tr>
<tr>
<td>组合树 (Neural networks)</td>
<td>随机森林 (Random Forests)、提升树 (Boosted Trees)、决策树 (Decision Trees)</td>
<td>scikit-learn 0.18 / XGBoost 0.6</td>
</tr>
<tr>
<td>支持向量机 (Support vector machines)</td>
<td>标量回归 (Scalar Regression)、多级分类 (Multiclass classification)</td>
<td>scikit-learn 0.18 / LIBSVM 3.2</td>
</tr>
<tr>
<td>广义线性模型 (Support vector machines)</td>
<td>线性回归 (Linear Regression)、逻辑回归 (Logistic Regression)</td>
<td>scikit-learn 0.18</td>
</tr>
<tr>
<td>特征工程 (Feature engineering)</td>
<td>稀疏向量矢量化 (Sparse Vectorization)、稠密向量矢量化 (Dense Vectorization)、分类处理 (Categorical Processing)</td>
<td>scikit-learn 0.18</td>
</tr>
<tr>
<td>管道模型 (Pipeline models)</td>
<td>顺序链模型 (Sequentially Chained Models)</td>
<td>scikit-learn 0.18</td>
</tr>
</tbody>
</table>
<p><a href="https://pan.baidu.com/s/1hsacwfi" target="_blank" rel="external">代码</a></p>
<h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><h2 id="使用ML的更多产品"><a href="#使用ML的更多产品" class="headerlink" title="使用ML的更多产品"></a>使用ML的更多产品</h2><p>iPad Pro的Apple Pencil就是一个例子。为了发明出一支高科技的触控笔，苹果不得不面临这样一个问题，即当人们在设备上写字的时候，他们的手掌底部难免会擦到屏幕，造成各种触控失灵。这时，使用“防手掌误触”这样一个机器学习模式，就能很好的解决这一问题。因为该模式能够使屏幕传感器感受到刮擦，触摸和笔触之间的区别，大大提升了触控笔操控的精确度。“如果触控笔无法在iPad上进行完美操作，那么iPad就不能被看作是一张很好的可供我继续写字的纸，Pencil也就不会是一个好的产品。<br><strong>更多产品：</strong><br>发生在手机上的每个动作都会被记录，然后由操作系统的一系列机器学习算法进行分析，判断是否预示着用户希望要做一个日历预约、拨打一个电话，或者制作更好的动态照片。<br>像Apple music的听歌推荐，<br>iphone的电池续航，<br>Siri发出的声音<br>News的新闻个性化推荐<br>pages～<br>。。。</p>
<h2 id="iPhone上有多少用户数据缓存可供机器学习调用？"><a href="#iPhone上有多少用户数据缓存可供机器学习调用？" class="headerlink" title="iPhone上有多少用户数据缓存可供机器学习调用？"></a>iPhone上有多少用户数据缓存可供机器学习调用？</h2><p>苹果工程师们的回答非常令我惊讶：“平均200Mb，具体多少取决于用户信息的多寡。”（为节约存储空间，缓存会时不时被清理出去）。这些信息包括了应用的使用习惯，与他人的交互，神经网络处理，还有“自然语言模型”。还有对象识别，人脸识别，场景识别等供神经网络学习。<br>我觉得收集这些训练数据对于单一用户来说真的已经非常多了，我假设模型已经被清洗和压缩过，那么一个这么大的模型真的已经可以算是涉及到所有苹果能渗入的地方了，要知道，一个有关“着色”的简易模型压缩后最小可以做到3m。</p>
<h2 id="隐私"><a href="#隐私" class="headerlink" title="隐私"></a>隐私</h2><p>或许，苹果使用机器学习技术中遇到的最大问题，是如何坚持保护用户隐私的原则。苹果会加密用户信息，包括公司律师在内的任何人都无法读取。FBI也不能，即便获得了批准。它还表示，不会收集用户信息用于广告目的。</p>
<p>从用户的角度上看，这种行为值得尊敬，但这对吸引顶尖AI人才并无帮助。一位苹果前员工表示，“机器学习专家想要的就是数据。但出于保护隐私的立场，苹果总会有所干预。这种做法是否正确暂不讨论，但外界会认为苹果不是铁杆AI粉。”</p>
<p>苹果高管并不认同这种观点。他们认为无需将用户信息放在云端，或存储训练神经网络所用的数据，也能得到提升机器学习表现的数据。Federighi认为，“外界一直存在错误的观点，做出了错误的妥协，我们想让他们走上正轨。”</p>
<p>这里有两个问题。第一个涉及到在机器学习系统中处理个人信息，当个人详细信息是由神经网络收集到的时，这些信息会怎么样？第二个涉及到收集训练神经网络识别行为所需的数据，不收集个人信息，又将如何做到训练呢？</p>
<p>苹果对两者都有答案。Cue表示，“有人认为，我们用AI做不了这些事，因为没有数据。但我们找到了获取所需的数据，同时保护隐私的方式。这是我们的底线。”</p>
<p>对于第一个问题，苹果的解决方式是利用其独特的对软硬件的控制。简单来说，多数个人信息仍保留在Apple Brain中。Federighi表示，“我们会将部分最敏感的信息保留在设备上，这时机器学习完全在本地运行。”他给出的例子是应用推荐，即在主屏上右滑时会出现的图标。在理解状态下，这些应用就是你意图想用的。这种预测基于许多因素，基本都与用户的行为有关。这一功能确实有用，Federighi表示，预测用户想用图标的概率有90%。</p>
<p>苹果存在设备上的其它信息可能包括了最个人的信息：用户使用iPhone键盘输入的文字。使用经过神经网络训练的系统，苹果能识别出关键事件和项目，如航班信息，联系人及约会。不过这些信息都存在手机上。即使是备份在苹果云上的信息，也会经过处理后不能仅由备份信息进行还原。“我们不想把信息存在苹果服务器上，公司没必要知道你的爱好或你在哪。”</p>
<p>苹果也在尽量减少整体上保存的信息。一个例子是，在交谈中有人可能提到一个词，这或许需要搜索。其它公司很可能在云端分析整段对话，从而识别出那些词语，但苹果设备无需这些数据远离用户就能识别出来。这是因为系统会不断与手机中的知识库进行搜索匹配。</p>
<p>Federight表示，“知识库很精练，但也相当完善，储存了成千上万的地点和实体。”苹果所有的应用都能用知识库，包括Spotlight搜索应用，地图和浏览器。它也能帮助自动纠错，一直在后台运行。</p>
<p>机器学习圈的一个疑问是，苹果的隐私限制是否会阻碍神经网络算法，这也是上文中提到的第二个问题。经过大量数据训练，神经网络才能准确。如果苹果不采集用户行为数据，又从哪里得到数据呢？与其它公司一样，苹果用公开数据集训练神经网络，但总有需要更新更准确的数据的时候，而这又只能从用户中来。苹果的做法是在不知道用户是谁的情况下收集信息。它会对数据匿名处理，随机打上识别信息。</p>
<p>从iOS 10开始，苹果会开始使用一种名为差分隐私（Differential Privacy）的新技术，它会对信息进行众包处理，让个人身份无法识别。这种技术可能用在出现新流行词，而它又不在苹果知识库中时；也会用在某个链接突然变得与相关查询的答案相关时，或某个表情被大量使用时。“传统的方式会将用户每次输入都传到服务器上，然后遍历数据来找到感兴趣的东西。但我们有端到端加密，不会这样行事。”虽然差分隐私是一个较为学术的词，但苹果想让它变得更加普及。</p>
<p>Federighi表示，“我们数年前就开发研究，做出了能大范围使用的有趣的成果。它的隐私程度令人惊叹。”简单来说，差分隐私就是对数据的若干片段加入数学噪音，这样苹果能识别用使用模式，又不会辨别出个人身份。苹果还授权研究相关技术的科技家发表论文，公布他们的工作。</p>
<p>#参考<br><a href="https://share.iclient.ifeng.com/shareNews?fromType=vampire&amp;forward=1&amp;aid=sub_24368797&amp;token=__QZmFzYyATYzIzYykTMjJDZ&amp;aman=e9f1cG20ax32cn291Fc2d&amp;from=timeline&amp;isappinstalled=1#backhead#backhead" target="_blank" rel="external">细拆苹果AI战略蓝图，看离领跑全球还有多远？</a><br><a href="https://developer.apple.com/machine-learning/" target="_blank" rel="external">Apple Develop With ML</a><br><a href="http://tech.ifeng.com/a/20160828/44443391_0.shtml" target="_blank" rel="external">苹果在iPhone里藏了个“人工智能大脑”</a><br><a href="http://www.atyun.com/1083_十分钟使用苹果机器学习框架coreml进行图片识别（swift版.html" target="_blank" rel="external">十分钟使用苹果机器学习框架CoreML进行图片识别（Swift版）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;CoreML 是 Apple 今年 WWDC 新推出面向开发者的机器学习框架。。&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;“典型的苹果用户，将在不知不觉中得到机器学习带来的用户体验的提升，并因此更加爱上苹果产品”。Schiller 说。“最让人兴奋的是，你甚至都感觉不到它的存在，直到有一天你突然意识到，并发出由衷的感叹：“这一切是怎么发生的？”&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS, 机器学习" scheme="https://github.com/LiShengmin/tags/iOS-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>iOS-IdtentifyLookUp身份查询</title>
    <link href="https://github.com/LiShengmin/2017/06/17/iOS-IdtentifyLookUp%E8%BA%AB%E4%BB%BD%E6%9F%A5%E8%AF%A2/"/>
    <id>https://github.com/LiShengmin/2017/06/17/iOS-IdtentifyLookUp身份查询/</id>
    <published>2017-06-17T13:03:30.000Z</published>
    <updated>2017-08-01T08:14:30.761Z</updated>
    
    <content type="html"><![CDATA[<p>文章翻译于<a href="https://developer.apple.com/documentation/identitylookup" target="_blank" rel="external">苹果官方文档</a></p>
<p>SDK：iOS 11.0+ Beta</p>
<h2 id="IdtentifyLookUp-是创建可以识别和过滤不需要的短信和彩信的应用程序扩展，并保留用户隐私。"><a href="#IdtentifyLookUp-是创建可以识别和过滤不需要的短信和彩信的应用程序扩展，并保留用户隐私。" class="headerlink" title="IdtentifyLookUp 是创建可以识别和过滤不需要的短信和彩信的应用程序扩展，并保留用户隐私。"></a>IdtentifyLookUp 是创建可以识别和<strong>过滤不需要的短信和彩信的应用程序扩展</strong>，并保留用户隐私。</h2><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>当收到来自未知发件人的SMS或MMS消息时，您的应用程序扩展可以通过使用自己的内置数据、逻辑或通过延迟关联的服务器进行的分析，使Messages应用程序，询问您的应用程序扩展确定消息是否需要过滤。<br>。<a id="more"></a><br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">**注意**</div><div class="line">身份查询仅适用于来自未知发件人的短信和彩信<span class="comment">; </span></div><div class="line">不适用于用户的联系人中的发件人的消息或来自任何来源的iMessage消息。</div></pre></td></tr></table></figure></p>
<p>要查看来自未知发件人的邮件是否需要过滤，“信息APP” 将启动邮件过滤器(你的扩展)进行查询，如图1所示。<br><img src="https://docs-assets.developer.apple.com/published/896e483792/bffa422c-8e24-4c8b-a294-3838471d2049.png" alt="图1"><br>将查询传递给消息过滤器应用程序扩展以获取消息的状态</p>
<h1 id="大致流程是："><a href="#大致流程是：" class="headerlink" title="大致流程是："></a>大致流程是：</h1><ol>
<li>“信息APP”将通过ILMessageFilterQueryRequest对象，将有关该消息的信息传递到你的消息过滤器（应用程序扩展）。</li>
<li>如果您应用能确定消息无效，返回使用ILMessageFilterQueryResponse类型的对象到Massage。<br>2.1     如果您的应用在本地无法做出这一决定，则告知“信息App”，它将有关的信息发送到您的服务器。您的服务器会检查邮件信息，并发送回对信息的描述，该描述将通过”信息App”传递给您的应用。应用程序扩展解析服务器的响应，并给出对象中消息的最终决定，如图2所示。<br>ILMessageFilterQueryResponse<br><img src="https://docs-assets.developer.apple.com/published/896e483792/5b45eea5-fb97-427d-93e7-a5624cd384bd.png" alt="图2"><br>将查询传递给应用程序的关联服务器以获取消息的状态</li>
</ol>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>出于隐私的原因，系统将会处理与您服务器的所有通信; 您应用无法直接访问网络。（不能与自己的服务器通信）<br>出于隐私的原因，您的应用扩展程序无法将数据写入与包含的应用程序共享的容器。（不能其他应用通信）</p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><table>
<thead>
<tr>
<th>Topics</th>
<th>^</th>
</tr>
</thead>
<tbody>
<tr>
<td>First Steps</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/creating_a_message_filter_app_extension" target="_blank" rel="external">Creating a Message Filter App Extension</a>,创建一个可以识别不需要的邮件的应用程序扩展</td>
</tr>
<tr>
<td>App Extension</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/ilmessagefilterextensioncontext" target="_blank" rel="external">class ILMessageFilterExtensionContext</a>,消息过滤应用程序扩展的扩展上下文</td>
</tr>
<tr>
<td>App Extension</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/ilmessagefilterextension" target="_blank" rel="external">class ILMessageFilterExtension</a>,消息过滤器应用程序扩展的主要类的抽象基类。</td>
</tr>
<tr>
<td>Queries</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/ilmessagefilterqueryrequest" target="_blank" rel="external">class ILMessageFilterQueryRequest</a>,请求消息过滤应用程序扩展，以确定从未知发件人接收的消息的状态。</td>
</tr>
<tr>
<td>Queries</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/ilmessagefilterqueryhandling" target="_blank" rel="external">protocol ILMessageFilterQueryHandling</a>,一组通过消息过滤应用程序扩展来处理查询请求的方法。</td>
</tr>
<tr>
<td>Responses</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/ilmessagefilterqueryresponse" target="_blank" rel="external">class ILMessageFilterQueryResponse</a> 对消息过滤器查询请求的响应。</td>
</tr>
<tr>
<td>class Responses</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/ilnetworkresponse" target="_blank" rel="external">ILNetworkResponse</a> 响应HTTPS代理消息过滤器应用程序扩展执行的HTTPS网络请求。</td>
</tr>
<tr>
<td>Responses</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/ilmessagefilteraction" target="_blank" rel="external">enum ILMessageFilterAction</a> 采取响应收到的消息的动作。</td>
</tr>
<tr>
<td>error</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/ilmessagefiltererror" target="_blank" rel="external">struct ILMessageFilterError</a></td>
</tr>
<tr>
<td>error</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/ilmessagefiltererrordomain" target="_blank" rel="external">let ILMessageFilterErrorDomain: String</a></td>
</tr>
<tr>
<td>error</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/ilmessagefiltererror.code" target="_blank" rel="external">enum ILMessageFilterError.Code</a></td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章翻译于&lt;a href=&quot;https://developer.apple.com/documentation/identitylookup&quot;&gt;苹果官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SDK：iOS 11.0+ Beta&lt;/p&gt;
&lt;h2 id=&quot;IdtentifyLookUp-是创建可以识别和过滤不需要的短信和彩信的应用程序扩展，并保留用户隐私。&quot;&gt;&lt;a href=&quot;#IdtentifyLookUp-是创建可以识别和过滤不需要的短信和彩信的应用程序扩展，并保留用户隐私。&quot; class=&quot;headerlink&quot; title=&quot;IdtentifyLookUp 是创建可以识别和过滤不需要的短信和彩信的应用程序扩展，并保留用户隐私。&quot;&gt;&lt;/a&gt;IdtentifyLookUp 是创建可以识别和&lt;strong&gt;过滤不需要的短信和彩信的应用程序扩展&lt;/strong&gt;，并保留用户隐私。&lt;/h2&gt;&lt;h2 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h2&gt;&lt;p&gt;当收到来自未知发件人的SMS或MMS消息时，您的应用程序扩展可以通过使用自己的内置数据、逻辑或通过延迟关联的服务器进行的分析，使Messages应用程序，询问您的应用程序扩展确定消息是否需要过滤。&lt;br&gt;。
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-Block内存管理</title>
    <link href="https://github.com/LiShengmin/2017/06/17/iOS-Block%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>https://github.com/LiShengmin/2017/06/17/iOS-Block内存管理/</id>
    <published>2017-06-17T07:19:12.000Z</published>
    <updated>2017-06-19T15:03:10.622Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到了一篇有关于Block内存管理的文章，这里做一个标记。<br><a href="http://blog.csdn.net/hherima/article/details/38620175" target="_blank" rel="external">Block内存管理三</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看到了一篇有关于Block内存管理的文章，这里做一个标记。&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/hherima/article/details/38620175&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Block内存
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS-iOS11无线调试</title>
    <link href="https://github.com/LiShengmin/2017/06/12/iOS-iOS11%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95/"/>
    <id>https://github.com/LiShengmin/2017/06/12/iOS-iOS11无线调试/</id>
    <published>2017-06-12T09:17:04.000Z</published>
    <updated>2017-06-12T15:59:45.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用XCode进行iOS无线调试"><a href="#使用XCode进行iOS无线调试" class="headerlink" title="使用XCode进行iOS无线调试"></a>使用XCode进行iOS无线调试</h1><p>首先这种方法是对你的系统，Xcode版本，对iOS版本有要求的！<br>MacOS：10.13<br>XCode：9<br>iOS：11<br><a id="more"></a></p>
<h1 id="下面是操作步骤"><a href="#下面是操作步骤" class="headerlink" title="下面是操作步骤"></a>下面是操作步骤</h1><ul>
<li>手机连接Xcode中，选择菜单上的<code>Window</code>,-&gt;<code>Device and Simulators</code>。<br><img src="\image\Window-Device.png" alt=""></li>
<li>找到连接设备，把Connect viaNetWork选项勾选。<br><img src="\image\d6058bdd9f50010037191a0ed1f1111f.png" alt=""></li>
<li>等待。。</li>
<li>断开和iPad/iPhone的有线连接。</li>
<li>左侧选择刚才的设备，右键，选择<code>Connect via IP Address...</code><br><img src="\image\200ee9e43bc886462d3928a72193d58d.png" alt=""><br><img src="\image\0505eb003339651a107b33fa8477836d.png" alt=""></li>
<li>添加设备局域网IP<br><img src="\image\c3eee091de2599f5c38ff0a6ce0f37b5.png" alt=""></li>
<li>直接运行就好了<br><img src="\image\1402206e1bbcc33f16f442b62ea0d6fd.png" alt=""></li>
</ul>
<h1 id="Operation-procedure"><a href="#Operation-procedure" class="headerlink" title="Operation procedure"></a>Operation procedure</h1><ul>
<li>iPhone/iPad Client Mac, In Xcode menu bar select Window re select Device and Simulators.</li>
<li>In left menu find your Device, Check Connect viaNetWork</li>
<li>Wait for success.</li>
<li>Disconnect your iPad/iPhone to Mac. </li>
<li>Re select your Device, right Click, select <code>Connect via IP Address</code>..And you can’t find it, you must disconnect with iPad to Mac Client</li>
<li>Please write you iPad/iPhone’s IP address.</li>
<li>you can run your app to iPad with wireless, is very cool.</li>
<li>successful.</li>
</ul>
<h1 id="thanks-to-read"><a href="#thanks-to-read" class="headerlink" title="thanks to read"></a>thanks to read</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用XCode进行iOS无线调试&quot;&gt;&lt;a href=&quot;#使用XCode进行iOS无线调试&quot; class=&quot;headerlink&quot; title=&quot;使用XCode进行iOS无线调试&quot;&gt;&lt;/a&gt;使用XCode进行iOS无线调试&lt;/h1&gt;&lt;p&gt;首先这种方法是对你的系统，Xcode版本，对iOS版本有要求的！&lt;br&gt;MacOS：10.13&lt;br&gt;XCode：9&lt;br&gt;iOS：11&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-WKWebView简介</title>
    <link href="https://github.com/LiShengmin/2017/05/01/iOS-WKWebView%E7%AE%80%E4%BB%8B/"/>
    <id>https://github.com/LiShengmin/2017/05/01/iOS-WKWebView简介/</id>
    <published>2017-05-01T07:37:43.000Z</published>
    <updated>2017-08-01T08:29:06.405Z</updated>
    
    <content type="html"><![CDATA[<p>#笔记# </p>
<ul>
<li>与UIWebView相比速度更快， 内存更省。</li>
<li>iOS8苹果推出的框架Wekkit，提供了替换UIWebView的组件WKWebView。</li>
<li>在性能、稳定性、功能方面有很大提升（最直观的体现就是加载网页是占用的内存，模拟器加载百度与开源中国网站时，WKWebView占用23M，而UIWebView占用85M）；</li>
<li>允许JavaScript的Nitro库加载并使用（UIWebView中限制）；</li>
<li>支持了更多的HTML5特性；</li>
<li>高达60fps的滚动刷新率以及内置手势；</li>
<li>将UIWebViewDelegate与UIWebView重构成了14类与3个协议<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/WebKit/ObjC_classic/index.html" target="_blank" rel="external">（查看苹果官方文档）</a><a id="more"></a></li>
</ul>
<h1 id="初始化（init）"><a href="#初始化（init）" class="headerlink" title="初始化（init）"></a>初始化（init）</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">WKWebView</span> * webView = [[<span class="built_in">WKWebView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds];</div><div class="line">[webView loadRequest:[<span class="built_in">NSRULRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithStingL:<span class="string">@"https://www.baidu.com"</span>]]];</div><div class="line">[<span class="keyword">self</span>.view addSubview:webView];</div></pre></td></tr></table></figure>
<h1 id="回调-delegate"><a href="#回调-delegate" class="headerlink" title="回调 (delegate)"></a>回调 (delegate)</h1><h2 id="生命周期-lifeCycle"><a href="#生命周期-lifeCycle" class="headerlink" title="生命周期(lifeCycle)"></a>生命周期(lifeCycle)</h2><ul>
<li><p>页面开始加载时调用</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didStartProvisionalNavigation:(<span class="built_in">WKNavigation</span> *)navigation;</div></pre></td></tr></table></figure>
</li>
<li><p>当内容开始返回时调用</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didCommitNavigation:(<span class="built_in">WKNavigation</span> *)navigation;</div></pre></td></tr></table></figure>
</li>
<li><p>页面加载完成之后调用</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didFinishNavigation:(<span class="built_in">WKNavigation</span> *)navigation;</div></pre></td></tr></table></figure>
</li>
<li><p>页面加载失败时调用</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didFailProvisionalNavigation:(<span class="built_in">WKNavigation</span> *)navigation</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="页面跳转-load-new-Page-life-cycle"><a href="#页面跳转-load-new-Page-life-cycle" class="headerlink" title="页面跳转(load new Page life cycle)"></a>页面跳转(load new Page life cycle)</h2><ul>
<li><p>接收到服务器跳转请求之后调用</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didReceiveServerRedirectForProvisionalNavigation:(<span class="built_in">WKNavigation</span> *)navigation;</div></pre></td></tr></table></figure>
</li>
<li><p>在收到响应后，决定是否跳转</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView decidePolicyForNavigationResponse:(<span class="built_in">WKNavigationResponse</span> *)navigationResponse decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKNavigationResponsePolicy</span>))decisionHandler;</div></pre></td></tr></table></figure>
</li>
<li><p>在发送请求之前，决定是否跳转*</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView decidePolicyForNavigationAction:(<span class="built_in">WKNavigationAction</span> *)navigationAction decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKNavigationActionPolicy</span>))decisionHandler;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="提示框（PromptAlert）"><a href="#提示框（PromptAlert）" class="headerlink" title="提示框（PromptAlert）"></a>提示框（PromptAlert）</h2><p>遵守WKUIDelegate,可以执行JS上的3中提示框，（<br>runJavaScriptAlertPanelWithMessage，       // 警告框<br>runJavaScriptConfirmPanelWithMessage， //确认框<br>runJavaScriptTextInputPanelWithPrompt， // 输入框<br>）<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** web界面中有弹出警告框时调用</span></div><div class="line"> *  @param webView           实现该代理的webview</div><div class="line"> *  @param message           警告框中的内容</div><div class="line"> *  @param frame             主窗口</div><div class="line"> *  @param completionHandler 警告框消失调用</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView runJavaScriptAlertPanelWithMessage:(<span class="built_in">NSString</span> *)message initiatedByFrame:(<span class="keyword">void</span> (^)())completionHandler;<span class="comment">//警告框</span></div></pre></td></tr></table></figure></p>
<h2 id="多种触摸手势（Peek-and-Pop）-iOS10"><a href="#多种触摸手势（Peek-and-Pop）-iOS10" class="headerlink" title="多种触摸手势（Peek and Pop）(iOS10,*)"></a>多种触摸手势（Peek and Pop）(iOS10,*)</h2><ul>
<li>使用iOS 10 SDK开发的App默认开启了Peek and Pop链接预览，但这并不是一个新特性；从iOS 9开始，在支持3D Touch的设备中使用WKWebView的allowLinkPreview属性，WKWebView客户端就可以选择基于Peek的链接预览。</li>
<li>当allowLinkPreview属性设为true时，使用者可以<em>轻轻的按下链接</em>来查看，然后在app上的另一个视图里加载链接，同时app在背景中模糊显示。如果使用者<em>用力按下链接</em>，链接会在Safari中弹出。</li>
<li>如果你有像WKPedia这样的应用程序，并寻求能提供更好的用户体验，你可以开始使用我们在iOS 10里面添加的新的API！在新的API中，只要用户在WKWebView中使用3D Touch查看和弹出链接就可以显示自定义视图控制器。这个API是由WKUIDelegate协议中的三个委托方法组成。<h3 id="手势选择"><a href="#手势选择" class="headerlink" title="手势选择"></a>手势选择</h3><blockquote>
<p>webView: shouldPreviewElement: … -&gt; Bool<br>webView: commitPreviewingViewController -&gt; Bool</p>
</blockquote>
</li>
<li>第一个方法，当用户触摸元素时webView(_:shouldPreviewElement:)立即被调用。返回false将完全禁用该元素的预览，并且阻止其他方法的调用。返回true将提供一个自定义视图控制的机会，前提是用户触摸时有足够的力度来启动查看。</li>
<li>第二个方法，如果用户用足够的力触摸来弹出视图控制器， 此时，你可以选择在app中展示／弹出的视图控制器（参见下面的方法 ）。<h3 id="视图重按后弹出视图"><a href="#视图重按后弹出视图" class="headerlink" title="视图重按后弹出视图"></a>视图重按后弹出视图</h3><blockquote>
<p>webView: previewingViewControllerForElement -&gt; UIViewController</p>
</blockquote>
</li>
<li>为其提供了一个定制视图控制器的机会。返回任何非空视图控制器都会导致视图控制器显示为Peek预览。defaultActions参数是一个活动数组，WebKit Webkit默认使用它作为previewActionItems。如果想要使用这些活动中的任何一个，你只需从视图控制器的previewActionItems执行结果中返回即可。这里是WKPedia中这个委托方法的实现情况：</li>
</ul>
<h1 id="JS与WKWebView交互-JavaScript-interacts-With-WKWebView"><a href="#JS与WKWebView交互-JavaScript-interacts-With-WKWebView" class="headerlink" title="JS与WKWebView交互(JavaScript interacts With WKWebView)"></a>JS与WKWebView交互(JavaScript interacts With WKWebView)</h1><h2 id="在WebView加入JS代码"><a href="#在WebView加入JS代码" class="headerlink" title="在WebView加入JS代码"></a>在WebView加入JS代码</h2><ol>
<li><p>图片缩放的js代码</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *js = <span class="string">@"var count = document.images.length;for (var i = 0; i &lt; count; i++) &#123;var image = document.images[i];image.style.width=320;&#125;;window.alert('找到' + count + '张图');"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>根据JS字符串初始化WKUserScript对象</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// WKUserScript *script = [[WKUserScript alloc] initWithSource:js injectionTime:WKUserScriptInjectionTimeAtDocumentEnd forMainFrameOnly:YES];</span></div></pre></td></tr></table></figure>
</li>
<li><p>根据生成的WKUserScript对象，初始化WKWebViewConfiguration </p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">WKWebViewConfiguration</span> *config = [[<span class="built_in">WKWebViewConfiguration</span> alloc] init];</div><div class="line">[config.userContentController addUserScript:script];</div><div class="line">_webView = [[<span class="built_in">WKWebView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds configuration:config];</div><div class="line">[_webView loadHTMLString:<span class="string">@"&lt;head&gt;&lt;/head&gt;&lt;imgea src='http://www.nsu.edu.cn/v/2014v3/img/background/3.jpg' /&gt;"</span>baseURL:<span class="literal">nil</span>];</div><div class="line">[<span class="keyword">self</span>.view addSubview:_webView];</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="WKWebView-执行JSMethod-WebView-running-JS-method"><a href="#WKWebView-执行JSMethod-WebView-running-JS-method" class="headerlink" title="WKWebView 执行JSMethod (WebView running JS method)"></a>WKWebView 执行JSMethod (WebView running JS method)</h2><p>用户调用用JS写过的代码<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">self</span>.webView evaluateJavaScript:jsMethodNameStr completionHandler:completionHandler];</div></pre></td></tr></table></figure></p>
<ul>
<li>jsMethodNameStr:     JS方法名</li>
<li>completionHandler:     异步回调(@escaping)block<h2 id="JS调用App注册的方法"><a href="#JS调用App注册的方法" class="headerlink" title="JS调用App注册的方法"></a>JS调用App注册的方法</h2>在WKWebView里面注册供JS调用的方法，是通过WKUserContentController类下面的方法<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)addScriptMessageHandler:(<span class="keyword">id</span> &lt;<span class="built_in">WKScriptMessageHandler</span>&gt;)scriptMessageHandler name:(<span class="built_in">NSString</span> *)name;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>scriptMessageHandler是代理回调, JS调用name方法后，OC会调用scriptMessageHandler指定的对象。</p>
<hr>
<ul>
<li>JS在调用OC注册方法的时候要用下面的方式<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">window.webkit.messageHandlers.&lt;name&gt;.postMessage(&lt;messageBody&gt;)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注意，name(方法名)是放在中间的，messageBody只能是一个对象，如果要传多个值，需要封装成数组，或者字典。整个示例如下：<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//OC注册供JS调用的方法</span></div><div class="line">[[_webView configuration].userContentController addScriptMessageHandler:<span class="keyword">self</span> name:<span class="string">@"closeMe"</span>];</div><div class="line"></div><div class="line"><span class="comment">//OC在JS调用方法做的处理</span></div><div class="line">- (<span class="keyword">void</span>)userContentController:(<span class="built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="built_in">WKScriptMessage</span> *)message</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"JS 调用了 %@ 方法，传回参数 %@"</span>,message.name,message.body);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//JS调用</span></div><div class="line">    window.webkit.messageHandlers.closeMe.postMessage(null);</div></pre></td></tr></table></figure></p>
<h1 id="控制器不释放！！！"><a href="#控制器不释放！！！" class="headerlink" title="控制器不释放！！！"></a>控制器不释放！！！</h1><h2 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h2><p>如果你在self的dealloc打个断点，会发现self没有释放！这显然是不行的！(StackoverFlow)看到<a href="http://stackoverflow.com/questions/26383031/wkwebview-causes-my-view-controller-to-leak" target="_blank" rel="external">一种解决方法</a>，如下：<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">WeakScriptMessageDelegate</span> : <span class="title">NSObject</span>&lt;<span class="title">WKScriptMessageHandler</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;<span class="built_in">WKScriptMessageHandler</span>&gt; scriptDelegate;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithDelegate:(<span class="keyword">id</span>&lt;<span class="built_in">WKScriptMessageHandler</span>&gt;)scriptDelegate;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">WeakScriptMessageDelegate</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithDelegate:(<span class="keyword">id</span>&lt;<span class="built_in">WKScriptMessageHandler</span>&gt;)scriptDelegate</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        _scriptDelegate = scriptDelegate;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)userContentController:(<span class="built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="built_in">WKScriptMessage</span> *)message</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span>.scriptDelegate userContentController:userContentController didReceiveScriptMessage:message];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<h2 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h2><p>思路：创建一个代理对象， 然后通过代理对象回调指定的self。<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">WKUserContentController</span> *userContentController = [[<span class="built_in">WKUserContentController</span> alloc] init];    </div><div class="line">[userContentController addScriptMessageHandler:[[WeakScriptMessageDelegate alloc] initWithDelegate:<span class="keyword">self</span>] name:<span class="string">@"closeMe"</span>];</div></pre></td></tr></table></figure></p>
<p>运行后，发现self被释放了，WeakSciptMessageDelegate没有释放<br>还需要在self的delloc中释放delegatElement<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[WebView configuration].userContrntContoller removeSctiptMessageHandlerForName:<span class="string">@"closeMe"</span>];</div></pre></td></tr></table></figure></p>
<h1 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h1><p> 目前，大多数App需要支持iOS7以上的版本，而WKWebView只在iOS8后才能用，所以需要一个兼容性方案，既iOS7下用UIWebView，iOS8后用WKWebView。<a href="https://github.com/wangyangcc/IMYWebView">这个库</a>提供了这种兼容性方案。</p>
<h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- goBack -&gt; <span class="built_in">WKNavigation</span></div><div class="line">- goForward -&gt; <span class="built_in">WKNavigation</span></div><div class="line">- reload -&gt; <span class="built_in">WKNavigation</span></div><div class="line">- reloadFromOrigin -&gt; <span class="built_in">WKNavigation</span> <span class="comment">//新增函数，比较网络数据是否有变化，没有变化则使用缓存，否则从新请求。</span></div><div class="line">- goToBackForwardListIterm: -&gt; <span class="built_in">WKNavigation</span> <span class="comment">//新增函数，跳转到某个指定历史页面</span></div><div class="line">- stopLoading</div><div class="line"></div><div class="line">.allowsBackForwardNavigationGestures -&gt; Bool <span class="comment">//是否允许左右划手势导航，默认不允许</span></div><div class="line">.estimatedProgress <span class="comment">//加载进度 0-1</span></div><div class="line">.title -&gt; String <span class="comment">//页面Title</span></div><div class="line">.scrollerView.scrollEnabled -&gt; Bool <span class="comment">//是否允许上下滚动</span></div><div class="line">.backForwardList -&gt; <span class="built_in">WKBackForwardList</span> <span class="comment">//访问历史表</span></div></pre></td></tr></table></figure>
<h1 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h1><p>我们关心的H5加载的性能，主要是</p>
<blockquote>
<p>加载链接的性能数据（DNS解析时间、TCP链接时间、Request请求时间、response响应时间、Dom节点解析时间、page渲染时间、获取资源的时序）<br>白屏时间<br>页面渲染耗时</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#笔记# &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与UIWebView相比速度更快， 内存更省。&lt;/li&gt;
&lt;li&gt;iOS8苹果推出的框架Wekkit，提供了替换UIWebView的组件WKWebView。&lt;/li&gt;
&lt;li&gt;在性能、稳定性、功能方面有很大提升（最直观的体现就是加载网页是占用的内存，模拟器加载百度与开源中国网站时，WKWebView占用23M，而UIWebView占用85M）；&lt;/li&gt;
&lt;li&gt;允许JavaScript的Nitro库加载并使用（UIWebView中限制）；&lt;/li&gt;
&lt;li&gt;支持了更多的HTML5特性；&lt;/li&gt;
&lt;li&gt;高达60fps的滚动刷新率以及内置手势；&lt;/li&gt;
&lt;li&gt;将UIWebViewDelegate与UIWebView重构成了14类与3个协议&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/WebKit/ObjC_classic/index.html&quot;&gt;（查看苹果官方文档）&lt;/a&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS中 请求主线程刷新UI</title>
    <link href="https://github.com/LiShengmin/2016/11/18/iOS-%E8%AF%B7%E6%B1%82%E4%B8%BB%E7%BA%BF%E7%A8%8B%E5%88%B7%E6%96%B0UI/"/>
    <id>https://github.com/LiShengmin/2016/11/18/iOS-请求主线程刷新UI/</id>
    <published>2016-11-18T08:07:57.000Z</published>
    <updated>2017-05-08T09:45:25.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ([<span class="built_in">NSThread</span> isMainThread])  </div><div class="line">&#123;  </div><div class="line">[<span class="keyword">self</span>.downloadMapBtn setImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"download_map.png"</span>] forState:<span class="built_in">UIControlStateNormal</span>];  </div><div class="line">[<span class="keyword">self</span>.downloadMapBtn setNeedsDisplay];  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">else</span>  </div><div class="line">&#123;  </div><div class="line"><span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;  </div><div class="line"><span class="comment">//Update UI in UI thread here  </span></div><div class="line">[<span class="keyword">self</span>.downloadMapBtn setImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"download_map.png"</span>] forState:<span class="built_in">UIControlStateNormal</span>];  </div><div class="line">[<span class="keyword">self</span>.downloadMapBtn setNeedsDisplay];  </div><div class="line"></div><div class="line"></div><div class="line">&#125;);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div cla
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UICollectionView reloadData无法更新视图问题</title>
    <link href="https://github.com/LiShengmin/2016/11/04/iOS-Bug-UICollectionView-reloadData%E6%97%A0%E6%B3%95%E6%9B%B4%E6%96%B0%E7%9A%84%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
    <id>https://github.com/LiShengmin/2016/11/04/iOS-Bug-UICollectionView-reloadData无法更新的奇怪问题/</id>
    <published>2016-11-04T09:46:11.000Z</published>
    <updated>2017-06-19T16:46:07.717Z</updated>
    
    <content type="html"><![CDATA[<p>近来偶尔用到UICollectionView，对于九宫格之类的布局还是很方便的。但使用过程中却出现一个奇怪的问题，暂时没时间仔细研究。先记录下来。<br>在UICollectionViewCell中定义一个图标和一个文本，显示的效果是典型的九宫格。默认会有几条数据，点击最后一个cell会弹出编辑框添加自定义的cell。使用过程中出现的问题时，在第二行最后一个添加的自定义cell，图标怎么都改变不了。如果将整个view切换一下，显示又变成正常了。<br>查找原因是因为，[CollectionView reloadData]方法未调用刷新，网上搜索，也看到有人问类似的问题。有些人给出的解决办法是加一个空的UIView在上面，强制整个collection view刷新。但感觉不是好的办法。后来，尝试使用指定项更新，发现问题解决了：<br>以下两种方法均有效：<br>[self.collectionView reloadItemsAtIndexPaths:@[[NSIndexPath indexPathForRow:7 inSection:0]]];<br>或者<br>[self.collectionView reloadSections:[NSIndexSet indexSetWithIndex:0]];<br>至于为什么reloadData会无效。这个暂时留下，等有空的时候再研究一下其原理。或者有牛人知道也请不吝赐教。<br>另外，这情况也提醒我们，能确定加载某个子项（cell）的时候，还是调用直接刷新指定项更好。一来效率高，二来可以避免莫名其妙的现象出现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近来偶尔用到UICollectionView，对于九宫格之类的布局还是很方便的。但使用过程中却出现一个奇怪的问题，暂时没时间仔细研究。先记录下来。&lt;br&gt;在UICollectionViewCell中定义一个图标和一个文本，显示的效果是典型的九宫格。默认会有几条数据，点击最后
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>MacOS-Sierra注册机无法运行的解决办法</title>
    <link href="https://github.com/LiShengmin/2016/11/01/MacOS-Sierra%E6%B3%A8%E5%86%8C%E6%9C%BA%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://github.com/LiShengmin/2016/11/01/MacOS-Sierra注册机无法运行的解决办法/</id>
    <published>2016-11-01T02:46:24.000Z</published>
    <updated>2017-05-08T09:54:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.sdifenzhou.com/wp-content/uploads/2016/09/Keygen.jpg" alt="image1"><br>这段时间以来，小子陆续收到朋友们的留言，因为升级到了macOS Sierra导致所有的Keygen破解程序都无法正常打开了。<br>小子之前因为还停留在OS X 10.11.6，所以更多给朋友们的意见是等待软件更新或者系统更新来兼容，这里小子有时间也更新到了macOS Sierra，根据大家反馈的情况，小子给出一个临时解决macOS Sierra使用注册机的办法。<br><a id="more"></a></p>
<p><img src="http://www.sdifenzhou.com/wp-content/uploads/2016/09/keygen1.jpg" alt="image2"><br>小子简单说明下macOS Sierra下使用注册机的方法：<br>1.右键注册机（这里以“Keygen.app”）显示包内容-Contents-MacOS；<br>2.打开应用程序-实用工具-终端；<br>3.将第一步文件夹内的“patcher”拖入第二步的终端中，再将应用程序中需要破解的程序继续拖入终端中（终端中的格式不要手动去改动），接着，继续将“eyePatch”拖入终端，再次将应用程序中需要破解的程序拖入终端，最后回车即可完成注册；<br>4.第三步的操作小子以命令的方式显示为：patcher 程序 eyePatch 程序 回车；<br>5.Have done！<br><img src="http://www.sdifenzhou.com/wp-content/uploads/2016/09/CORE-Keygen.jpg" alt="image3"><br>另外，有朋友提到CORE KeyGen也无法正常使用，小子这里也一并分享上临时解决的方法：<br>1.下载<a href="https://pan.baidu.com/s/1jIg6bSa" target="_blank" rel="external">upx.out程序</a>并解压缩;<br>2.打开应用程序-实用工具-终端，将解压缩得到的“upx.out”拖入终端，之后输入-d，再空格；<br>3.3.将dmg镜像中的“CORE Keygen.app”拷贝到任意位置（小子将其放置桌面），同样，右键“CORE Keygen”显示包内容-Contents-MacOS，将其中的“CORE Keygen”继续拖入第二步的终端中；<br>4.4.回车，终端中显示“Unpacked 1 file.”表示成功，这时桌面的“CORE Keygen.app”已经可以在MacOS Sierra下正常打开了；<br>5.以上操作小子总结命令如下：upx.out -d CORE Keygen 回车；<br>6.Have done！<br>转载声明：本文转载自：<a href="http://www.sdifenzhou.com/macossierrakeygen.html" target="_blank" rel="external">史蒂芬周的博客</a>：<br>`</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.sdifenzhou.com/wp-content/uploads/2016/09/Keygen.jpg&quot; alt=&quot;image1&quot;&gt;&lt;br&gt;这段时间以来，小子陆续收到朋友们的留言，因为升级到了macOS Sierra导致所有的Keygen破解程序都无法正常打开了。&lt;br&gt;小子之前因为还停留在OS X 10.11.6，所以更多给朋友们的意见是等待软件更新或者系统更新来兼容，这里小子有时间也更新到了macOS Sierra，根据大家反馈的情况，小子给出一个临时解决macOS Sierra使用注册机的办法。&lt;br&gt;
    
    </summary>
    
    
      <category term="MacOS" scheme="https://github.com/LiShengmin/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS8中使用UIAlertController</title>
    <link href="https://github.com/LiShengmin/2016/10/18/iOS8%E4%B8%AD%E4%BD%BF%E7%94%A8UIAlertController/"/>
    <id>https://github.com/LiShengmin/2016/10/18/iOS8中使用UIAlertController/</id>
    <published>2016-10-18T06:51:30.000Z</published>
    <updated>2017-05-08T09:47:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.cocoachina.com/ios/20141126/10320.html" target="_blank" rel="external">http://www.cocoachina.com/ios/20141126/10320.html</a><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.cocoachina.com/ios/20141126/10320.html&quot;&gt;http://www.cocoachina.com/ios/20141126/10320.html&lt;/a&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>UIAlertController介绍</title>
    <link href="https://github.com/LiShengmin/2016/09/21/iOS-UIAlertController%E4%BB%8B%E7%BB%8D/"/>
    <id>https://github.com/LiShengmin/2016/09/21/iOS-UIAlertController介绍/</id>
    <published>2016-09-21T03:46:35.000Z</published>
    <updated>2017-05-08T09:52:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>UIAlertController 在iOS8以上的时候需要调用的方法， <a id="more"></a></p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (IOS8) &#123;</div><div class="line"><span class="built_in">UIAlertController</span> * alertController = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"获取照片"</span> message:<span class="literal">nil</span> preferredStyle:<span class="built_in">UIAlertControllerStyleActionSheet</span>];</div><div class="line"><span class="keyword">if</span> ([<span class="built_in">UIImagePickerController</span> isSourceTypeAvailable:<span class="built_in">UIImagePickerControllerSourceTypeCamera</span>]) &#123;</div><div class="line"><span class="built_in">UIAlertAction</span> * actionDefault = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"相机拍摄"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</div><div class="line">_pickerVC = [[<span class="built_in">UIImagePickerController</span> alloc] init];</div><div class="line">_pickerVC.delegate = <span class="keyword">self</span>;</div><div class="line">_pickerVC.allowsEditing = <span class="literal">NO</span>;</div><div class="line">_pickerVC.sourceType = <span class="built_in">UIImagePickerControllerSourceTypeCamera</span>;</div><div class="line">_pickerVC.showsCameraControls = <span class="literal">NO</span>;</div><div class="line">_pickerVC.cameraOverlayView = <span class="keyword">self</span>.userImagePickerView;</div><div class="line">[<span class="keyword">self</span> presentViewController:_pickerVC animated:<span class="literal">YES</span> completion:^&#123;&#125;];</div><div class="line">&#125;];</div><div class="line">[alertController addAction:actionDefault];</div><div class="line">&#125;</div><div class="line"><span class="built_in">UIAlertAction</span> * actionDefault = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"从相册获取"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</div><div class="line">_pickerVC = [[<span class="built_in">UIImagePickerController</span> alloc] init];</div><div class="line">_pickerVC.delegate = <span class="keyword">self</span>;</div><div class="line">_pickerVC.allowsEditing = <span class="literal">YES</span>;</div><div class="line">_pickerVC.sourceType = <span class="built_in">UIImagePickerControllerSourceTypePhotoLibrary</span>;</div><div class="line">[<span class="keyword">self</span> presentViewController:_pickerVC animated:<span class="literal">YES</span> completion:^&#123;&#125;];</div><div class="line">&#125;];</div><div class="line">[alertController addAction:actionDefault];</div><div class="line"></div><div class="line"><span class="built_in">UIAlertAction</span> * actionCancel = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"取消"</span> style:<span class="built_in">UIAlertActionStyleCancel</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;&#125;];</div><div class="line">[alertController addAction:actionCancel];</div><div class="line">[<span class="keyword">self</span> presentViewController:alertController animated: <span class="literal">YES</span> completion:^&#123;&#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="但是有的时候会报错"><a href="#但是有的时候会报错" class="headerlink" title="但是有的时候会报错"></a>但是有的时候会报错</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">*** Terminating app due to uncaught exception 'NSGenericException', reason: 'Your application has presented a UIAlertController (&lt;UIAlertController: 0x138d27780&gt;) of style UIAlertControllerStyleActionSheet. The modalPresentationStyle of a UIAlertController with this style is UIModalPresentationPopover. You must provide location information for this popover through the alert controller's popoverPresentationController. You must provide either a sourceView and sourceRect or a barButtonItem.  If this information is not known when you present the alert controller, you may provide it in the UIPopoverPresentationControllerDelegate method -prepareForPopoverPresentation.'</div><div class="line">*** First throw call stack:</div><div class="line">(0x182446db0 0x181aabf80 0x187eed268 0x187901fb0 0x1879000c8 0x1878530c8 0x187860a80 0x1875925a4 0x1823fc728 0x1823fa4cc 0x1823fa8fc 0x182324c50 0x183c0c088 0x18760a088 0x10005b0d4 0x181ec28b8)</div><div class="line">libc++abi.dylib: terminating with uncaught exception of type NSException</div></pre></td></tr></table></figure>
<h1 id="百度给出的翻译是"><a href="#百度给出的翻译是" class="headerlink" title="百度给出的翻译是"></a>百度给出的翻译是</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    终止应用程序由于未捕获的异常的nsgenericexception，原因：你的应用了<span class="built_in">UIAlertController</span>（&lt;&lt; uialertcontroller：<span class="number">0x138d27780</span> &gt;）风格uialertcontrollerstyleactionsheet。一个具有这种风格的modalpresentationstyle <span class="built_in">UIAlertController</span> <span class="built_in">UIModalPresentationPopover</span>。你必须通过报警控制器的popoverpresentationcontroller这个弹出提供位置信息。你必须提供一个sourceview和sourcerect或barbuttonitem。如果这个信息是不知道当你目前的警戒控制器，你可以在uipopoverpresentationcontrollerdelegate方法提供prepareforpopoverpresentation。”</div><div class="line">    第一次抛出调用堆栈：</div><div class="line">（<span class="number">0x182446db0</span> <span class="number">0x181aabf80</span> <span class="number">0x187eed268</span> <span class="number">0x187901fb0</span> <span class="number">0x1879000c8</span> <span class="number">0x1878530c8</span> <span class="number">0x187860a80</span> <span class="number">0x1875925a4</span> <span class="number">0x1823fc728</span> <span class="number">0x1823fa4cc</span> <span class="number">0x1823fa8fc</span> <span class="number">0x182324c50</span> <span class="number">0x183c0c088</span> <span class="number">0x18760a088</span> <span class="number">0x10005b0d4</span> <span class="number">0x181ec28b8</span>）</div><div class="line">libc + abi.dylib：同型nsexception未捕获的异常终止</div></pre></td></tr></table></figure>
<h1 id="原因就是"><a href="#原因就是" class="headerlink" title="原因就是"></a>原因就是</h1><pre><code>你没有给其添加源视图位置，也就是说，我们没有给视图添加一个位置用来显示。我们给其一个视图位置如下：
</code></pre><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIPopoverPresentationController</span> *popover = alertController.popoverPresentationController;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (popover) &#123;</div><div class="line"></div><div class="line">popover.sourceView = <span class="keyword">self</span>.view;</div><div class="line">popover.sourceRect = <span class="keyword">self</span>.view.bounds;</div><div class="line">popover.permittedArrowDirections = <span class="built_in">UIPopoverArrowDirectionAny</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UIAlertController 在iOS8以上的时候需要调用的方法，
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UITextField的光标操作扩展</title>
    <link href="https://github.com/LiShengmin/2016/09/09/iOS-TextField%E7%9A%84%E5%85%89%E6%A0%87%E6%93%8D%E4%BD%9C/"/>
    <id>https://github.com/LiShengmin/2016/09/09/iOS-TextField的光标操作/</id>
    <published>2016-09-09T05:38:26.000Z</published>
    <updated>2017-06-19T17:10:41.034Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UITextField的光标操作扩展"><a href="#UITextField的光标操作扩展" class="headerlink" title="UITextField的光标操作扩展"></a>UITextField的光标操作扩展</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在iOS开发中，有时候需要完全自主的定义键盘，用于完整的单词输入，例如计算机应用中，需要一次性的输入sin(，在移动光标时要完整的跳过sin(，在删除时也要完整的删除，这就需要对光标的位置进行精确控制，而iOS并没有相关的函数可以直接操作光标，只给出了选择某个区域的功能，本文将介绍基于区域选择设计的UITextField扩展，用于获取光标位置以及移动光标。<br><a id="more"></a></p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h2 id="光标位置的获取"><a href="#光标位置的获取" class="headerlink" title="光标位置的获取"></a>光标位置的获取</h2><p>在textField中，有一个属性称之为selectedTextRange，这个属性为UITextRange类型，包含[start,end)两个值，通过实验我们可以发现，在没有文字被选取时，start代表当前光标的位置，而end＝0；当有区域被选择时，start和end分别是选择的头和尾的光标位置，从0开始，并且不包含end，例如选择了0～3的位置，则start＝0，end＝4。</p>
<h2 id="光标的移动"><a href="#光标的移动" class="headerlink" title="光标的移动"></a>光标的移动</h2><p>通过setSelectedTextRange:方法可以设置选取范围，我们只要设置一个选取单个字符的范围，即可移动光标而不选中。</p>
<h2 id="关键属性"><a href="#关键属性" class="headerlink" title="关键属性"></a>关键属性</h2><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 内容为[start,end)，无论是否有选取区域，start都描述了光标的位置。</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">readwrite</span>, <span class="keyword">copy</span>) <span class="built_in">UITextRange</span> *selectedTextRange;</div><div class="line"><span class="comment">// 文首和文尾的位置</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UITextPosition</span> *beginningOfDocument;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UITextPosition</span> *endOfDocument;</div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> selectedRange: UITextRange</div><div class="line"><span class="selector-tag">var</span> beginningOfDocument: UITextPosition</div><div class="line"><span class="selector-tag">var</span> endOfDocument: UITextPostition</div></pre></td></tr></table></figure>
<h2 id="关键方法"><a href="#关键方法" class="headerlink" title="关键方法"></a>关键方法</h2><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取以from为基准的to的偏移，例如abcde，光标在c后，则光标相对文尾的偏移为-2。</span></div><div class="line">- (<span class="built_in">NSInteger</span>)offsetFromPosition:(<span class="built_in">UITextPosition</span> *)from toPosition:(<span class="built_in">UITextPosition</span> *)toPosition;</div><div class="line"><span class="comment">// 获取以from为基准偏移offset的光标位置。</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UITextPosition</span> *)positionFromPosition:(<span class="built_in">UITextPosition</span> *)position offset:(<span class="built_in">NSInteger</span>)offset;</div><div class="line"><span class="comment">// 创建一个UITextRange</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UITextRange</span> *)textRangeFromPosition:(<span class="built_in">UITextPosition</span> *)fromPosition toPosition:(<span class="built_in">UITextPosition</span> *)toPosition;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">textview.ofsetFromPosition(<span class="number">_</span>:textview.endOfDocument)</div><div class="line">textview.positionFromPosition(<span class="number">_</span>:postion, offset: currentoffset)</div><div class="line">textview.textRangeFromPosition:(<span class="number">_</span>:fromPosition, toPosition:newPos)</div></pre></td></tr></table></figure>
<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>下面的代码为UITextField创建了一个分类(Category)，包含三个方法，分别用于获取光标位置、从当前位置偏移、从头偏移。</p>
<h2 id="Object-C"><a href="#Object-C" class="headerlink" title="Object-C"></a>Object-C</h2><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UITextField</span> (<span class="title">Extension</span>)</span></div><div class="line"></div><div class="line">- (<span class="built_in">NSInteger</span>)curOffset;</div><div class="line">- (<span class="keyword">void</span>)makeOffset:(<span class="built_in">NSInteger</span>)offset;</div><div class="line">- (<span class="keyword">void</span>)makeOffsetFromBeginning:(<span class="built_in">NSInteger</span>)offset;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="meta">#import <span class="meta-string">"UITextField+Extension.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UITextField</span> (<span class="title">Extension</span>)</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">description	-	基于文首计算出到光标的偏移数值。</div><div class="line">*/</div><div class="line">- (<span class="built_in">NSInteger</span>)curOffset&#123;</div><div class="line">	<span class="keyword">return</span> [<span class="keyword">self</span> offsetFromPosition:<span class="keyword">self</span>.beginningOfDocument toPosition:<span class="keyword">self</span>.selectedTextRange.start];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">description-	实现原理是先获取一个基于文尾的偏移，然后加上要施加的偏移，再重新根据文尾计算位置，最后利用选取来实现光标定位。</div><div class="line">*/</div><div class="line">- (<span class="keyword">void</span>)makeOffset:(<span class="built_in">NSInteger</span>)offset&#123;</div><div class="line"></div><div class="line">	<span class="built_in">UITextRange</span> * selectedRange = [<span class="keyword">self</span> selectedTextRange];</div><div class="line">	<span class="built_in">NSInteger</span> currentOffset = [<span class="keyword">self</span> offsetFromPosition:<span class="keyword">self</span>.endOfDocument toPosition:selectedRange.end];</div><div class="line">	currentOffset += offset;</div><div class="line">	<span class="built_in">UITextPosition</span> * newPos = [<span class="keyword">self</span> positionFromPosition:<span class="keyword">self</span>.endOfDocument offset:currentOffset];</div><div class="line">	<span class="keyword">self</span>.selectedTextRange = [<span class="keyword">self</span> textRangeFromPosition:newPos toPosition:newPos];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)makeOffsetFromBeginning:(<span class="built_in">NSInteger</span>)offset&#123;</div><div class="line"></div><div class="line"><span class="comment">// 先把光标移动到文首，然后再调用上面实现的偏移函数。</span></div><div class="line">	<span class="built_in">UITextPosition</span> * begin = <span class="keyword">self</span>.beginningOfDocument;</div><div class="line">	<span class="built_in">UITextPosition</span> * start = [<span class="keyword">self</span> positionFromPosition:begin offset:<span class="number">0</span>];</div><div class="line">	<span class="built_in">UITextRange</span>    * range = [<span class="keyword">self</span> textRangeFromPosition:start toPosition:start];</div><div class="line">	[<span class="keyword">self</span> setSelectedTextRange:range];</div><div class="line">	[<span class="keyword">self</span> makeOffset:offset];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> pos = textview.selectedRange.location</div><div class="line"></div><div class="line"><span class="comment">// 基于文首计算出到光标的偏移数值。</span></div><div class="line"><span class="keyword">let</span> position = textview.offsetFromPosition(textview.beginningOfDocument, toPosition: (textview.selectedTextRange?.start)!)</div><div class="line"></div><div class="line"><span class="comment">//赋值</span></div><div class="line">textview.text.insertContentsOf(str.characters, at:textview.text!.startIndex.advancedBy(pos))</div><div class="line">ds!.symptom[<span class="keyword">self</span>.pos!].content = textview.text<span class="comment">//这里是把数据源同步到ds 中由DS自己做上传的工作//gho这里是textField拼接的过程</span></div><div class="line"></div><div class="line"><span class="comment">//移动到文首 再调用上面函数</span></div><div class="line"><span class="keyword">let</span> begin = textview.beginningOfDocument;</div><div class="line"><span class="keyword">let</span> start = textview .positionFromPosition(begin, offset: <span class="number">0</span>);</div><div class="line"><span class="keyword">let</span> range = textview.textRangeFromPosition(start!, toPosition: start!)</div><div class="line">textview.selectedTextRange = range;</div><div class="line"></div><div class="line"><span class="comment">// 实现原理是先获取一个基于文尾的偏移，然后加上要施加的偏移，再重新根据文尾计算位置，最后利用选取来实现光标定位。</span></div><div class="line"><span class="keyword">let</span> selectedRange = textview.selectedTextRange;</div><div class="line"><span class="keyword">var</span> currentoffset = textview.offsetFromPosition((textview.endOfDocument), toPosition: (selectedRange?.end)!)</div><div class="line">currentoffset = currentoffset + position + str.characters.<span class="built_in">count</span>;</div><div class="line"><span class="keyword">let</span> newPos = textview.positionFromPosition(textview.endOfDocument, offset: currentoffset)</div><div class="line">textview.selectedTextRange = textview.textRangeFromPosition(newPos!, toPosition: newPos!)</div></pre></td></tr></table></figure>
<p><a href="http://blog.csdn.net/xyt8023y/article/details/48879985" target="_blank" rel="external">原文</a></p>
<h1 id="Extention-OC代码"><a href="#Extention-OC代码" class="headerlink" title="Extention-OC代码"></a>Extention-OC代码</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"UITextField+ExtentRange.h"</span></span></div></pre></td></tr></table></figure>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span>  </span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UITextField</span> (<span class="title">ExtentRange</span>)  </span></div><div class="line"></div><div class="line">- (<span class="built_in">NSRange</span>) selectedRange;  </div><div class="line">- (<span class="keyword">void</span>) setSelectedRange:(<span class="built_in">NSRange</span>) range;  </div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"UITextField+ExtentRange.h"</span>  </span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UITextField</span> (<span class="title">ExtentRange</span>)  </span></div><div class="line"></div><div class="line">- (<span class="built_in">NSRange</span>) selectedRange  </div><div class="line">&#123;  </div><div class="line">	<span class="built_in">UITextPosition</span> * beginning      = <span class="keyword">self</span>.beginningOfDocument;  </div><div class="line">	</div><div class="line">	<span class="built_in">UITextRange</span>    * selectedRange  = <span class="keyword">self</span>.selectedTextRange;  </div><div class="line">	<span class="built_in">UITextPosition</span> * selectionStart = selectedRange.start;  </div><div class="line">	<span class="built_in">UITextPosition</span> * selectionEnd   = selectedRange.end;  </div><div class="line">	</div><div class="line">	<span class="keyword">const</span> <span class="built_in">NSInteger</span> location = [<span class="keyword">self</span> offsetFromPosition:beginning toPosition:selectionStart];  </div><div class="line">	<span class="keyword">const</span> <span class="built_in">NSInteger</span> length = [<span class="keyword">self</span> offsetFromPosition:selectionStart toPosition:selectionEnd];  </div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="built_in">NSMakeRange</span>(location, length);  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">- (<span class="keyword">void</span>) setSelectedRange:(<span class="built_in">NSRange</span>) range  <span class="comment">// 备注：UITextField必须为第一响应者才有效  </span></div><div class="line">&#123;  </div><div class="line">	<span class="built_in">UITextPosition</span> * beginning      = <span class="keyword">self</span>.beginningOfDocument;  </div><div class="line">	</div><div class="line">	<span class="built_in">UITextPosition</span> * startPosition  = [<span class="keyword">self</span> positionFromPosition:beginning offset:range.location];  </div><div class="line">	<span class="built_in">UITextPosition</span> * endPosition    = [<span class="keyword">self</span> positionFromPosition:beginning offset:range.location + range.length];  </div><div class="line">	<span class="built_in">UITextRange</span>    * selectionRange = [<span class="keyword">self</span> textRangeFromPosition:startPosition toPosition:endPosition];  </div><div class="line">	</div><div class="line">	[<span class="keyword">self</span> setSelectedTextRange:selectionRange];  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h1 id="Protocol-Swift"><a href="#Protocol-Swift" class="headerlink" title="Protocol-Swift"></a>Protocol-Swift</h1><p>这里不建议使用Extension的方式，因为为了这么个小功能，而为TextView整体全部实现一个Postion的方法，有点得不偿失。所以我们将这个建议声明成Protocol的形式，由需要的类来引用。<br>另外建议使用属性自协议的方式来声明，如果不明白什么是自协议，欢迎邮箱骚然～<br>希望对大家写Swift一些启发。</p>
<p>//TODO:<br>这里就不给粗实现了，其实很好实现的～～～</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UITextField的光标操作扩展&quot;&gt;&lt;a href=&quot;#UITextField的光标操作扩展&quot; class=&quot;headerlink&quot; title=&quot;UITextField的光标操作扩展&quot;&gt;&lt;/a&gt;UITextField的光标操作扩展&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;在iOS开发中，有时候需要完全自主的定义键盘，用于完整的单词输入，例如计算机应用中，需要一次性的输入sin(，在移动光标时要完整的跳过sin(，在删除时也要完整的删除，这就需要对光标的位置进行精确控制，而iOS并没有相关的函数可以直接操作光标，只给出了选择某个区域的功能，本文将介绍基于区域选择设计的UITextField扩展，用于获取光标位置以及移动光标。&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Swift2.0中的Sting 的基本操作</title>
    <link href="https://github.com/LiShengmin/2016/09/09/iOS-Sting/"/>
    <id>https://github.com/LiShengmin/2016/09/09/iOS-Sting/</id>
    <published>2016-09-08T17:19:03.000Z</published>
    <updated>2017-06-19T16:44:56.501Z</updated>
    
    <content type="html"><![CDATA[<p>Swift中的字符串，第二篇，基本操作。其他的几篇传送门（GitHub打不开链接的同学请自行把地址github改成gitcafe，或者直接去归档里找:-P）：</p>
<p><a href="https://conanwhf.github.com/2015/12/03/Swift_String_1/" target="_blank" rel="external">Swift2.0 中的String（一）：常用属性</a><br><a href="https://conanwhf.github.com/2015/12/03/Swift_String_2/" target="_blank" rel="external">Swift2.0 中的String（二）：基本操作</a><br><a href="https://conanwhf.github.com/2015/12/03/Swift_String_3/" target="_blank" rel="external">Swift2.0 中的String（三）：类型转换</a><br>编码转换(TBD)<br>我的练习源代码可以在<a href="https://github.com/conanwhf/swiftplayground/tree/master/String.playground">这里</a>看到<a id="more"></a><br>首先，我们要记得使用字符串最常用的两个参数：下标(Index)和范围(Range)，几乎所有API都要用到它们<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> offset = str.startIndex.advancedBy(<span class="number">2</span>)<span class="comment">// offset: 3rd char</span></div><div class="line"><span class="keyword">let</span> range  = <span class="type">Range</span>(start: str.startIndex.advancedBy(<span class="number">3</span>), end: str.endIndex.advancedBy(-<span class="number">2</span>))<span class="comment">// range: 3..&lt;6, "345"</span></div></pre></td></tr></table></figure></p>
<h1 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> n = <span class="type">Int</span>(str)!</div><div class="line"><span class="type">String</span>(<span class="string">"the number is \(n)"</span>)</div><div class="line"><span class="type">String</span>(format:<span class="string">"%.2f,  %i"</span>, <span class="number">9.1</span>, <span class="number">304</span>)</div></pre></td></tr></table></figure>
<h1 id="内容反转"><a href="#内容反转" class="headerlink" title="内容反转"></a>内容反转</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">String</span>(str.characters.<span class="built_in">reverse</span>())</div></pre></td></tr></table></figure>
<h1 id="删除和部分删除"><a href="#删除和部分删除" class="headerlink" title="删除和部分删除"></a>删除和部分删除</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">str.removeRange(range)</div><div class="line">str.removeAtIndex(offset)</div><div class="line"><span class="type">String</span>(str.characters.<span class="built_in">dropFirst</span>())</div><div class="line"><span class="type">String</span>(str.characters.<span class="built_in">dropFirst</span>(<span class="number">3</span>))</div><div class="line"><span class="type">String</span>(str.characters.<span class="built_in">dropLast</span>())</div><div class="line"><span class="type">String</span>(str.characters.<span class="built_in">dropLast</span>(<span class="number">3</span>))</div><div class="line"><span class="comment">//以上对character的操作不改变原来的值！</span></div><div class="line"><span class="comment">// 删除头尾空白字符</span></div><div class="line"><span class="string">"     I love you "</span>.stringByTrimmingCharactersInSet(<span class="type">NSCharacterSet</span>.whitespaceCharacterSet())</div><div class="line"><span class="comment">// 删除头尾字符集</span></div><div class="line"><span class="string">" I love you, too!"</span>.stringByTrimmingCharactersInSet(<span class="type">NSCharacterSet</span>(charactersInString: <span class="string">",. !"</span>))</div><div class="line"><span class="comment">//清空</span></div><div class="line">str.removeAll()</div></pre></td></tr></table></figure>
<h1 id="获取固定位置的子串"><a href="#获取固定位置的子串" class="headerlink" title="获取固定位置的子串"></a>获取固定位置的子串</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">str.substringToIndex(offset)</div><div class="line">str.substringFromIndex(offset)</div><div class="line">str.substringWithRange(range)</div><div class="line">str[range]</div></pre></td></tr></table></figure>
<h1 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">st         = <span class="string">"&lt;123, test2,???&gt;   &lt;测试: 数据  .&gt;"</span></div><div class="line"><span class="comment">// 用固定字符分割</span></div><div class="line">str.componentsSeparatedByString(<span class="string">" "</span>)</div><div class="line"><span class="comment">// 用固定字符集分割</span></div><div class="line">str.componentsSeparatedByCharactersInSet(<span class="type">NSCharacterSet</span>(charactersInString: <span class="string">", ."</span>))</div></pre></td></tr></table></figure>
<h1 id="过滤-查找替换"><a href="#过滤-查找替换" class="headerlink" title="过滤/查找替换"></a>过滤/查找替换</h1><p>使用替换字符串的API，让替换的目标字符串为空即为过滤<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 替换固定位置子串</span></div><div class="line">str.stringByReplacingCharactersInRange(range, withString: <span class="string">"!!!"</span>)</div><div class="line"><span class="comment">// 查找所有匹配并替换/过滤</span></div><div class="line">str.stringByReplacingOccurrencesOfString(<span class="string">"???"</span>, withString: <span class="string">"~"</span>)</div><div class="line">str.stringByReplacingOccurrencesOfString(<span class="string">" "</span>, withString: <span class="string">""</span>, options: <span class="type">NSStringCompareOptions</span>.<span class="type">LiteralSearch</span>, range: <span class="literal">nil</span>)</div><div class="line"><span class="comment">// 过滤字符集合(分割后合并)</span></div><div class="line"><span class="keyword">let</span> arr    = str.componentsSeparatedByCharactersInSet(<span class="type">NSCharacterSet</span>(charactersInString:<span class="string">"-&lt;&gt;"</span>))</div><div class="line">arr.joinWithSeparator(<span class="string">""</span>)</div></pre></td></tr></table></figure></p>
<h1 id="合并-拼接"><a href="#合并-拼接" class="headerlink" title="合并/拼接"></a>合并/拼接</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">s1 + s2 + s3</div><div class="line">str.appendContentsOf(<span class="string">"123"</span>)</div><div class="line">str.stringByAppendingString(<span class="string">"000"</span>)         <span class="comment">//不改变原值！</span></div><div class="line">str.stringByAppendingFormat(<span class="string">"- num %d "</span>, <span class="number">100</span>)      <span class="comment">//不改变原值！</span></div><div class="line"><span class="comment">// 以固定字符串为分隔符拼接</span></div><div class="line">[str, str, str].joinWithSeparator(<span class="string">"\n"</span>)</div></pre></td></tr></table></figure>
<h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">str.insert(<span class="string">" "</span>, atIndex: offset)</div><div class="line">str.insertContentsOf(<span class="string">" hello"</span>.characters, at: offset)</div><div class="line">str.replaceRange(<span class="type">Range</span>( start:offset, end: offset ), with: <span class="string">"???OK!!!"</span>)</div></pre></td></tr></table></figure>
<h1 id="判断前缀或后缀"><a href="#判断前缀或后缀" class="headerlink" title="判断前缀或后缀"></a>判断前缀或后缀</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str.hasPrefix(<span class="string">"01"</span>)</div><div class="line">str.hasSuffix(<span class="string">"567"</span>)</div></pre></td></tr></table></figure>
<h1 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s1.characters.elementsEqual(s2.characters)</div><div class="line">str.characters.elementsEqual(<span class="string">"01234567"</span>.characters)</div><div class="line">s1 == s2</div><div class="line"><span class="string">"111"</span> &lt; <span class="string">"222"</span></div></pre></td></tr></table></figure>
<h1 id="匹配字符串"><a href="#匹配字符串" class="headerlink" title="匹配字符串"></a>匹配字符串</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str.rangeOfString(<span class="string">"efg"</span>)</div><div class="line">str.rangeOfString(<span class="string">"efg"</span>, options: <span class="type">NSStringCompareOptions</span>.<span class="type">CaseInsensitiveSearch</span>, range: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<h1 id="固定位置的部分替换"><a href="#固定位置的部分替换" class="headerlink" title="固定位置的部分替换"></a>固定位置的部分替换</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str.replaceRange(range, with: <span class="string">"test_for_replace"</span>)</div><div class="line">str.stringByReplacingCharactersInRange(range, withString: <span class="string">"哈哈:smile:Tes\nt"</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swift中的字符串，第二篇，基本操作。其他的几篇传送门（GitHub打不开链接的同学请自行把地址github改成gitcafe，或者直接去归档里找:-P）：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://conanwhf.github.com/2015/12/03/Swift_String_1/&quot;&gt;Swift2.0 中的String（一）：常用属性&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://conanwhf.github.com/2015/12/03/Swift_String_2/&quot;&gt;Swift2.0 中的String（二）：基本操作&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://conanwhf.github.com/2015/12/03/Swift_String_3/&quot;&gt;Swift2.0 中的String（三）：类型转换&lt;/a&gt;&lt;br&gt;编码转换(TBD)&lt;br&gt;我的练习源代码可以在&lt;a href=&quot;https://github.com/conanwhf/swiftplayground/tree/master/String.playground&quot;&gt;这里&lt;/a&gt;看到
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-NSString(Categary)</title>
    <link href="https://github.com/LiShengmin/2016/09/07/iOS-NSString(Categary)/"/>
    <id>https://github.com/LiShengmin/2016/09/07/iOS-NSString(Categary)/</id>
    <published>2016-09-07T07:37:14.000Z</published>
    <updated>2017-06-19T17:16:46.778Z</updated>
    
    <content type="html"><![CDATA[<p>主要写了一些项目中常用的方法，使用的是OC语言，后续会陆续补充Swift中的写法。<br><a id="more"></a></p>
<h2 id="1-NSData-与-NSString"><a href="#1-NSData-与-NSString" class="headerlink" title="1. NSData 与 NSString"></a>1. NSData 与 NSString</h2><h3 id="NSData－-gt-NSString"><a href="#NSData－-gt-NSString" class="headerlink" title="NSData－&gt; NSString"></a>NSData－&gt; NSString</h3><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *aString = [[<span class="built_in">NSString</span> alloc] initWithData:adataencoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line"></div><div class="line"><span class="built_in">NSString</span>－&gt;<span class="built_in">NSData</span></div><div class="line"><span class="built_in">NSString</span> *aString = <span class="string">@"1234abcd"</span>;</div><div class="line"><span class="built_in">NSData</span> *aData = [aString dataUsingEncoding: <span class="built_in">NSUTF8StringEncoding</span>];</div></pre></td></tr></table></figure>
<h2 id="2-NSData-与-Byte"><a href="#2-NSData-与-Byte" class="headerlink" title="2.NSData 与 Byte"></a>2.NSData 与 Byte</h2><h3 id="NSData－-gt-Byte数组"><a href="#NSData－-gt-Byte数组" class="headerlink" title="NSData－&gt; Byte数组"></a>NSData－&gt; Byte数组</h3><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *testString = <span class="string">@"1234567890"</span>;</div><div class="line"><span class="built_in">NSData</span> *testData = [testString dataUsingEncoding: <span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">Byte *testByte = (Byte *)[testData bytes];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;[testData length];i++)</div><div class="line">printf(<span class="string">"testByte = %d\n"</span>,testByte[i]);</div></pre></td></tr></table></figure>
<h3 id="Byte数组－-gt-NSData"><a href="#Byte数组－-gt-NSData" class="headerlink" title="Byte数组－&gt; NSData"></a>Byte数组－&gt; NSData</h3><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Byte byte[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>&#125;;</div><div class="line"><span class="built_in">NSData</span> *adata = [[<span class="built_in">NSData</span> alloc] initWithBytes:byte length:<span class="number">24</span>];</div></pre></td></tr></table></figure>
<h3 id="Byte数组－-gt-16进制数"><a href="#Byte数组－-gt-16进制数" class="headerlink" title="Byte数组－&gt;16进制数"></a>Byte数组－&gt;16进制数</h3><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Byte *bytes = (Byte *)[aData bytes];</div><div class="line"><span class="built_in">NSString</span> *hexStr=<span class="string">@""</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;[encryData length];i++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">NSString</span> *newHexStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%x"</span>,bytes[i]&amp;<span class="number">0xff</span>];<span class="comment">///16进制数</span></div><div class="line"><span class="keyword">if</span>([newHexStr length]==<span class="number">1</span>)</div><div class="line">hexStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@0%@"</span>,hexStr,newHexStr];</div><div class="line"><span class="keyword">else</span> </div><div class="line">hexStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@%@"</span>,hexStr,newHexStr];</div><div class="line">&#125;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"bytes 的16进制数为:%@"</span>,hexStr);</div></pre></td></tr></table></figure>
<h3 id="16进制数－-gt-Byte数组"><a href="#16进制数－-gt-Byte数组" class="headerlink" title="16进制数－&gt;Byte数组"></a>16进制数－&gt;Byte数组</h3><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///// 将16进制数据转化成Byte 数组</span></div><div class="line"><span class="built_in">NSString</span> *hexString = <span class="string">@"3e435fab9c34891f"</span>; <span class="comment">//16进制字符串</span></div><div class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">Byte bytes[<span class="number">128</span>];  <span class="comment">///3ds key的Byte 数组， 128位</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;[hexString length];i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> int_ch;  <span class="comment">/// 两位16进制数转化后的10进制数</span></div><div class="line"></div><div class="line"><span class="keyword">unichar</span> hex_char1 = [hexString characterAtIndex:i]; <span class="comment">////两位16进制数中的第一位(高位*16)</span></div><div class="line"><span class="keyword">int</span> int_ch1;</div><div class="line"><span class="keyword">if</span>(hex_char1 &gt;= <span class="string">'0'</span> &amp;&amp; hex_char1 &lt;=<span class="string">'9'</span>)</div><div class="line">int_ch1 = (hex_char1<span class="number">-48</span>)*<span class="number">16</span>;   <span class="comment">//// 0 的Ascll - 48</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(hex_char1 &gt;= <span class="string">'A'</span> &amp;&amp; hex_char1 &lt;=<span class="string">'F'</span>)</div><div class="line">int_ch1 = (hex_char1<span class="number">-55</span>)*<span class="number">16</span>; <span class="comment">//// A 的Ascll - 65</span></div><div class="line"><span class="keyword">else</span> </div><div class="line">int_ch1 = (hex_char1<span class="number">-87</span>)*<span class="number">16</span>; <span class="comment">//// a 的Ascll - 97</span></div><div class="line">i++;</div><div class="line"></div><div class="line"><span class="keyword">unichar</span> hex_char2 = [hexString characterAtIndex:i]; <span class="comment">///两位16进制数中的第二位(低位)</span></div><div class="line"><span class="keyword">int</span> int_ch2;</div><div class="line"><span class="keyword">if</span>(hex_char2 &gt;= <span class="string">'0'</span> &amp;&amp; hex_char2 &lt;=<span class="string">'9'</span>)</div><div class="line">int_ch2 = (hex_char2<span class="number">-48</span>); <span class="comment">//// 0 的Ascll - 48</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(hex_char1 &gt;= <span class="string">'A'</span> &amp;&amp; hex_char1 &lt;=<span class="string">'F'</span>)</div><div class="line">int_ch2 = hex_char2<span class="number">-55</span>; <span class="comment">//// A 的Ascll - 65</span></div><div class="line"><span class="keyword">else</span> </div><div class="line">int_ch2 = hex_char2<span class="number">-87</span>; <span class="comment">//// a 的Ascll - 97</span></div><div class="line"></div><div class="line">int_ch = int_ch1+int_ch2;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"int_ch=%d"</span>,int_ch);</div><div class="line">bytes[j] = int_ch;  <span class="comment">///将转化后的数放入Byte数组里</span></div><div class="line">j++;</div><div class="line">&#125;</div><div class="line"><span class="built_in">NSData</span> *newData = [[<span class="built_in">NSData</span> alloc] initWithBytes:bytes length:<span class="number">128</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"newData=%@"</span>,newData);</div></pre></td></tr></table></figure>
<h2 id="3-NSData-与-UIImage"><a href="#3-NSData-与-UIImage" class="headerlink" title="3. NSData 与 UIImage"></a>3. NSData 与 UIImage</h2><h3 id="NSData－-gt-UIImage"><a href="#NSData－-gt-UIImage" class="headerlink" title="NSData－&gt;UIImage"></a>NSData－&gt;UIImage</h3><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIImage</span> *aimage = [<span class="built_in">UIImage</span> imageWithData: imageData];</div><div class="line"></div><div class="line"><span class="comment">//例：从本地文件沙盒中取图片并转换为NSData</span></div><div class="line"><span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] bundlePath];</div><div class="line"><span class="built_in">NSString</span> *name = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"ceshi.png"</span>];</div><div class="line"><span class="built_in">NSString</span> *finalPath = [path stringByAppendingPathComponent:name];</div><div class="line"><span class="built_in">NSData</span> *imageData = [<span class="built_in">NSData</span> dataWithContentsOfFile: finalPath];</div><div class="line"><span class="built_in">UIImage</span> *aimage = [<span class="built_in">UIImage</span> imageWithData: imageData];</div></pre></td></tr></table></figure>
<h3 id="UIImage－-gt-NSData"><a href="#UIImage－-gt-NSData" class="headerlink" title="UIImage－&gt; NSData"></a>UIImage－&gt; NSData</h3><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSData</span> *imageData = <span class="built_in">UIImagePNGRepresentation</span>(aimae);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要写了一些项目中常用的方法，使用的是OC语言，后续会陆续补充Swift中的写法。&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS[利用Application Loader]App打包上架流程&#39;</title>
    <link href="https://github.com/LiShengmin/2016/09/06/iOS-%E5%88%A9%E7%94%A8Application-Loader-App%E6%89%93%E5%8C%85%E4%B8%8A%E6%9E%B6%E6%B5%81%E7%A8%8B/"/>
    <id>https://github.com/LiShengmin/2016/09/06/iOS-利用Application-Loader-App打包上架流程/</id>
    <published>2016-09-05T17:58:16.000Z</published>
    <updated>2017-05-08T09:46:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何把App打包成ipa文件，然后App上架流程-利用Application-Loader"><a href="#如何把App打包成ipa文件，然后App上架流程-利用Application-Loader" class="headerlink" title="如何把App打包成ipa文件，然后App上架流程[利用Application Loader]"></a>如何把App打包成ipa文件，然后App上架流程[利用Application Loader]</h1><p><a href="http://www.jianshu.com/p/a885da9ce4a9" target="_blank" rel="external">本文详情</a> <a id="more"></a><br>在上一篇博客已经讲过上传项目了，但是有的时候，需要我们进行打包成ipa包到别的手机上跑（但是前提是，这个手机的UDID必须绑定到对应的开发者账号中，也就是证书也得是从同样的开发者账号申请下来的才可以）<br>假设你现在已经完成了证书，Bundle Identifier 和描述文件的配置（如果没有请参考这个博客中)<br><a href="http://www.jianshu.com/p/391f6102b4fb" target="_blank" rel="external">http://www.jianshu.com/p/391f6102b4fb</a><br>的前4步<br>然后配置工程<br>打开你项目工程 第一步，这里不能选择模拟器，选择iOS Device<br><img src="http://upload-images.jianshu.io/upload_images/1400788-d6282beac5d4aa67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image1"><br>如果不支持横屏，把这2个勾去掉<br><img src="http://upload-images.jianshu.io/upload_images/1400788-507035f0aeeba65f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image2"><br>然后查看版本号和构建版本号<br><img src="http://upload-images.jianshu.io/upload_images/1400788-c115b621232831e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image3"><br>然后配置发布证书<br><img src="http://upload-images.jianshu.io/upload_images/1400788-0ab593756949d975.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image4"><br>然后，如果这里没有黄色叹号，代表你的配置没问题，如果有，那就是证书和描述文件不匹配，或者描述文件里刚才选的Bundle和现在的工程的Bundle Identifier不一致，去develop.apple.com 上找到你的描述文件在确认下绑定的bundle Identifier和你工程是不是一样的？<br><img src="http://upload-images.jianshu.io/upload_images/1400788-6b105c3ef679946d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image5"><br>然后继续。断点，全局断点，僵尸模式等都要去掉。<br><img src="http://upload-images.jianshu.io/upload_images/1400788-c1d557383ff16be5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image6"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何把App打包成ipa文件，然后App上架流程-利用Application-Loader&quot;&gt;&lt;a href=&quot;#如何把App打包成ipa文件，然后App上架流程-利用Application-Loader&quot; class=&quot;headerlink&quot; title=&quot;如何把App打包成ipa文件，然后App上架流程[利用Application Loader]&quot;&gt;&lt;/a&gt;如何把App打包成ipa文件，然后App上架流程[利用Application Loader]&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/a885da9ce4a9&quot;&gt;本文详情&lt;/a&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UITableViewCell点击时子视图背景透明的解决办法</title>
    <link href="https://github.com/LiShengmin/2016/09/01/iOS-UITableViewCell%E7%82%B9%E5%87%BB%E6%97%B6%E5%AD%90%E8%A7%86%E5%9B%BE%E8%83%8C%E6%99%AF%E9%80%8F%E6%98%8E%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://github.com/LiShengmin/2016/09/01/iOS-UITableViewCell点击时子视图背景透明的解决办法/</id>
    <published>2016-09-01T02:57:46.000Z</published>
    <updated>2017-05-08T09:51:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>在iOS开发中，经常会使用到UITableView，对于自定义的UITableViewCell，当用户点击或者选中时，其上面的子视图会自动背景透明。<a id="more"></a></p>
<h1 id="iOS开发中UITableViewCell点击时子视图背景透明的解决方法"><a href="#iOS开发中UITableViewCell点击时子视图背景透明的解决方法" class="headerlink" title="iOS开发中UITableViewCell点击时子视图背景透明的解决方法"></a>iOS开发中UITableViewCell点击时子视图背景透明的解决方法</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在做iOS项目的开发中，UITableView(表视图)应用十分广泛。在进行自定义UITableViewCell(表示图的子视图)时，经常有小伙伴遇到这样的问题：<br>如果在UITableViewCell上面添加了带有背景颜色的控件，或者使用重绘来加载UITableViewCell时，如果用户点击UITableViewCell（UITableViewCell的is_select被激活），Cell上的子视图发生了奇怪的变化，各种空间背景色消失，重绘的东西也会消失，如果只在Cell上添加一个色块，那么我们看起来，这个色块好像莫名其妙的消失了一样。如下图所示：<br><img src="http://static.oschina.net/uploads/space/2016/0810/142921_gC8o_2340880.png" alt="image1"></p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>由于UITableViewCell的选中风格所致。如果开发者不进行设置，UITableViewCell中的selectionStyle属性默认风格为UITableViewCellSelectionStyleBlue。这时，如果用户点击或者选中了某个Cell，系统会自动将其上子视图的背景色改成透明以便统一Cell的整体背景颜色。开发者可以将其设置为UITableViewCellSelectionStyleNone枚举值来不适用任何Cell的选中风格。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>如果需要使用Cell的选中风格同时又不想让Cell上的子视图收到影响，我们可以继承UITableViewCell后,在其中覆写父类的如下两个方法:<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- setSelected:animated:</div><div class="line">- setHighlighted:animated:</div></pre></td></tr></table></figure></p>
<h2 id="🌰"><a href="#🌰" class="headerlink" title="🌰"></a>🌰</h2><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这个方法在Cell被选中或者被取消选中时调用</span></div><div class="line">- (<span class="keyword">void</span>)setSelected:(<span class="built_in">BOOL</span>)selected animated:(<span class="built_in">BOOL</span>)animated &#123;</div><div class="line">[<span class="keyword">super</span> setSelected:selected animated:animated];</div><div class="line"><span class="keyword">self</span>.testLabel.backgroundColor = [<span class="built_in">UIColor</span> orangeColor];</div><div class="line">&#125;</div><div class="line"><span class="comment">//这个方法在用户按住Cell时被调用</span></div><div class="line">- (<span class="keyword">void</span>)setHighlighted:(<span class="built_in">BOOL</span>)highlighted animated:(<span class="built_in">BOOL</span>)animated&#123;</div><div class="line">[<span class="keyword">super</span> setHighlighted:highlighted animated:animated];</div><div class="line"><span class="keyword">self</span>.testLabel.backgroundColor = [<span class="built_in">UIColor</span> orangeColor];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://static.oschina.net/uploads/space/2016/0810/144116_Ll58_2340880.png" alt="image2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;在iOS开发中，经常会使用到UITableView，对于自定义的UITableViewCell，当用户点击或者选中时，其上面的子视图会自动背景透明。
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-CollectionViewCell的复用问题</title>
    <link href="https://github.com/LiShengmin/2016/08/17/iOS-CollectionViewCell%E7%9A%84%E5%A4%8D%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://github.com/LiShengmin/2016/08/17/iOS-CollectionViewCell的复用问题/</id>
    <published>2016-08-17T06:27:03.000Z</published>
    <updated>2017-05-08T09:48:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h1><p>需要的Button 的个数不一定 Button上显示的字符串的长度不一定，Button上显示的字符串和Button的个数全部从服务器下发 ，当Button的个数在屏幕上展示不下的时候要可以左右滑动 以展示更多的Button</p>
<h1 id="方案："><a href="#方案：" class="headerlink" title="方案："></a>方案：</h1><p>综合以上因素 我选择利用CollectionView实现此功能.</p>
<p>其中遇到几个问题：<br>首先说明： cell中有一个Label 属性<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UILabel</span> *)textLabel&#123;</div><div class="line"><span class="keyword">if</span> (!_textLabel) &#123;</div><div class="line">_textLabel = [[<span class="built_in">UILabel</span> alloc]initWithFrame:<span class="keyword">self</span>.contentView.frame];</div><div class="line">_textLabel.layer.borderWidth = <span class="number">1</span>;</div><div class="line">_textLabel.layer.borderColor = [<span class="built_in">UIColor</span> lightGrayColor].CGColor;</div><div class="line">_textLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">13</span>];</div><div class="line">_textLabel.textAlignment = <span class="built_in">NSTextAlignmentCenter</span>;</div><div class="line">_textLabel.textColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">[<span class="keyword">self</span>.contentView addSubview:_textLabel];</div><div class="line">&#125;</div><div class="line">_textLabel.frame = <span class="built_in">CGRectMake</span>(<span class="built_in">CGRectGetMinX</span>(<span class="keyword">self</span>.contentView.frame), <span class="built_in">CGRectGetMinY</span>(<span class="keyword">self</span>.contentView.frame), <span class="keyword">self</span>.frame.size.width, <span class="keyword">self</span>.frame.size.height);</div><div class="line"><span class="keyword">return</span> _textLabel;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h1><pre><code>因为选中cell时 cell的字和边框要变成红色 ，当再点击其他Item时此item要变为原来的样子
</code></pre><p>这个功能主要在collectionView的两个代理方法中实现<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView didSelectItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line">- (<span class="keyword">void</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView didDeselectItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;;</div></pre></td></tr></table></figure></p>
<h2 id="具体实现如下："><a href="#具体实现如下：" class="headerlink" title="具体实现如下："></a>具体实现如下：</h2><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">*  当点击item时会调用此方法 在此方法中把点击的item的textLabel属性的字体颜色和边框改变颜色</div><div class="line">*</div><div class="line">*/</div><div class="line">- (<span class="keyword">void</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView didSelectItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">JWCCollectionViewCell *cell = (JWCCollectionViewCell *)[collectionView cellForItemAtIndexPath:indexPath];</div><div class="line">cell.textLabel.textColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line">cell.textLabel.layer.borderColor = [<span class="built_in">UIColor</span> redColor].CGColor;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">*  当点击其他cell时调用此方法 比如点击第一个cell的时候调用上面的方法，当点击第二个的时候先调用此方法，然后再调用上面的方法</div><div class="line">在此方法中获取第一次点击的cell 即</div><div class="line">JWCCollectionViewCell *cell = (JWCCollectionViewCell *)[collectionView cellForItemAtIndexPath:indexPath];</div><div class="line">把此cell 的textLabel属性变回原来的样子 然后系统会调用上面的代理方法把点击的第二个cell的textLabel属性的字体颜色和边框改变颜色</div><div class="line">这样就实现了 点击此cell改变颜色 再点击其他的cell是时 上一个点击的cell恢复到原来的样子</div><div class="line">*</div><div class="line">*/</div><div class="line">- (<span class="keyword">void</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView didDeselectItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">JWCCollectionViewCell *cell = (JWCCollectionViewCell *)[collectionView cellForItemAtIndexPath:indexPath];</div><div class="line">cell.textLabel.textColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">cell.textLabel.layer.borderColor = [<span class="built_in">UIColor</span> lightGrayColor].CGColor;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="问题二："><a href="#问题二：" class="headerlink" title="问题二："></a>问题二：</h1><pre><code>假如cell的个数太多的话肯定会发生复用的问题：
比如：屏幕的宽度只能显示3个cell 但是现在有四个需要显示，那么当点击第一个cell 向左滑动时会显示第四个 这个时候第四个item就是从复用队列中取出一个cell ，那么这个cell可能还保留这上一个的属性 比如说字体是红色的 其宽度可能会很大，不适合当前的string的宽度 ，左右滑动的时候cell 之间的间隔也会发生错乱 这绝不是想要的结果 。出现这个原因主要是cell的复用产生的。
</code></pre><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>在cell复用之前把cell恢复到初始化状态，那么这就要重写 - (void)prepareForReuse方法</p>
<p>具体做法如下：<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)prepareForReuse&#123;</div><div class="line">[<span class="keyword">super</span> prepareForReuse];</div><div class="line">_textLabel.frame = <span class="keyword">self</span>.contentView.frame;</div><div class="line">_textLabel.layer.borderWidth = <span class="number">1</span>;</div><div class="line">_textLabel.textColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">_textLabel.layer.borderColor = [<span class="built_in">UIColor</span> lightGrayColor].CGColor;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就解决了颜色问题</p>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><pre><code>prepareForReuse这个方法是CollectionViewCell的方法
</code></pre><p>但是错乱问题仍然没有解决：这主要是因为在定义_textLabel 时它的frame设置问题 应该在添加一句<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_textLabel.frame = <span class="built_in">CGRectMake</span>(<span class="built_in">CGRectGetMinX</span>(<span class="keyword">self</span>.contentView.frame), <span class="built_in">CGRectGetMinY</span>(<span class="keyword">self</span>.contentView.frame), <span class="keyword">self</span>.frame.size.width, <span class="keyword">self</span>.frame.size.height);</div></pre></td></tr></table></figure></p>
<h2 id="具体是这样的"><a href="#具体是这样的" class="headerlink" title="具体是这样的"></a>具体是这样的</h2><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UILabel</span> *)textLabel&#123;</div><div class="line"><span class="keyword">if</span> (!_textLabel) &#123;</div><div class="line">_textLabel = [[<span class="built_in">UILabel</span> alloc]initWithFrame:<span class="keyword">self</span>.contentView.frame];</div><div class="line">_textLabel.layer.borderWidth = <span class="number">1</span>;</div><div class="line">_textLabel.layer.borderColor = [<span class="built_in">UIColor</span> lightGrayColor].CGColor;</div><div class="line">_textLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">13</span>];</div><div class="line">_textLabel.textAlignment = <span class="built_in">NSTextAlignmentCenter</span>;</div><div class="line">_textLabel.textColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">[<span class="keyword">self</span>.contentView addSubview:_textLabel];</div><div class="line">&#125;</div><div class="line">_textLabel.frame = <span class="built_in">CGRectMake</span>(<span class="built_in">CGRectGetMinX</span>(<span class="keyword">self</span>.contentView.frame), <span class="built_in">CGRectGetMinY</span>(<span class="keyword">self</span>.contentView.frame), <span class="keyword">self</span>.frame.size.width, <span class="keyword">self</span>.frame.size.height);</div><div class="line"><span class="keyword">return</span> _textLabel;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="问题三："><a href="#问题三：" class="headerlink" title="问题三："></a>问题三：</h1><p>比如说 当点击第一个cell 后 向左滑动让第一个消失在界面中，当再滑出界面时你会发现它的选中状态消失了，而你并没有选中其他的cell ，这是为什么？？？因为上一问题的解决方法导致了这一步。那么该怎么样解决才能不至于解决上面的问题引出下面的问题呢？？方法如下：<br>1，  定义一个全局变量：<br>@property (nonatomic ,assign)NSInteger selectIndex; </p>
<p>2 这个先给它赋一个永远也不可能达到的值<br>self.selectIndex = MAXFLOAT;至于为什么赋这么大下面说<br>3，在 - (void)collectionView:(UICollectionView <em>)collectionView didSelectItemAtIndexPath:(NSIndexPath </em>)indexPath;这个代理方法中把 indexPath.row 值赋值给 self.selectIndex如下<br>self.selectIndex = indexPath.row; 这就记住了所选择的item的位置<br>4，在 - (UICollectionViewCell <em>)collectionView:(UICollectionView </em>)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath;这个方法中可能会从复用队列中去处cell 产生复用 但在复用之前会调用- (void)prepareForReuse方法 又会恢复原样使选中状态消失，这个时候要判断一下，判断这个方法中的 indexPath.row 是否等于 self.selectIndex 如果等于 使其变为选中的状态，具体代码如下：</p>
<ul>
<li>(UICollectionViewCell <em>)collectionView:(UICollectionView </em>)collectionView cellForItemAtIndexPath:(NSIndexPath <em>)indexPath {<br>JWCCollectionViewCell </em>cell = [collectionView dequeueReusableCellWithReuseIdentifier:@”cellID” forIndexPath:indexPath ];<br>if (indexPath.row == _selectIndex ) {<br>cell.textLabel.textColor = [UIColor redColor];<br>cell.textLabel.layer.borderColor = [UIColor redColor].CGColor;<br>}<br>cell.textLabel.text = [self.dataSourceArr objectAtIndex:indexPath.item];<br>NSLog(@”%@”,cell.textLabel.text);<br>return cell;<br>}<br>这样即使选中的cell 消失在界面中在出现的时候也不会改变选中状态。</li>
</ul>
<p>为什么要把self.selectIndex = MAXFLOAT<br>如果不这样赋值  假如赋的值为0 那么每次打开时第一个cell就是选中状态，但是你并没有点击第一个。这主要是在cell生成的代理方法中的这一句代码引起的<br>if (indexPath.row == _selectIndex ) {<br>cell.textLabel.textColor = [UIColor redColor];<br>cell.textLabel.layer.borderColor = [UIColor redColor].CGColor;<br>}<br>所以把self.selectIndex 赋值为 MAXFLOAT 这样就不会有当一启动APP的时候就有cell被选中的状态 </p>
<p>问题四：</p>
<p>根据string的宽度不同来生成的cell的宽度也不同的功能是在</p>
<ul>
<li>(CGSize)collectionView:(UICollectionView <em>)collectionView layout:(UICollectionViewLayout</em>)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath;<br>实在这个方法中返回不通的CGSize 来改变每一个cell的宽度。<br>在此可以计算字符串的宽度：<br>具体的方法如下：</li>
</ul>
<p>#pragma mark - UICollectionViewFlowLayoutDelegate</p>
<ul>
<li>(CGSize)collectionView:(UICollectionView <em>)collectionView layout:(UICollectionViewLayout </em>)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath <em>)indexPath{<br>NSString </em>str =  [self.dataSourceArr objectAtIndex:indexPath.item];<br>CGRect rect = [self getStringRect:str withFont:13];<br>return CGSizeMake(rect.size.width, 30);<br>}</li>
</ul>
<p>/**</p>
<ul>
<li>计算字符串的宽度的方法<br>*/</li>
</ul>
<ul>
<li>(CGRect)getStringRect:(NSString*)aString withFont :(CGFloat)font<br>{<br>CGRect rect;<br>if(aString){<br>CGRect rect = [aString boundingRectWithSize:CGSizeMake(MAXFLOAT, 30) options:NSStringDrawingUsesLineFragmentOrigin | NSStringDrawingUsesFontLeading attributes:@{NSFontAttributeName : [UIFont systemFontOfSize:font]} context:nil];<br>return  rect;<br>}<br>return rect;<br>}</li>
</ul>
<p>注意注意：!!!!<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">CGRect</span>)getStringRect:(<span class="built_in">NSString</span>*)aString withFont :(<span class="built_in">CGFloat</span>)font 在这个方法中需要传入字体的大小。</div><div class="line">这个大小一定要和 textLabel初始化时的字体大小一样 比如本例中在初始化的时候是<span class="number">13</span> 那么在计算字符串的宽度的时候一定要是<span class="number">13</span> 不然计算出的字符串的宽度比实际的要长 ：会出现的问题是当左右滑动时会出现各个cell之间的间隔会出现改变 也许会两个cell会出现重叠！！</div><div class="line">_textLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">13</span>];</div></pre></td></tr></table></figure></p>
<p>版权声明：本文为GodBlessMyParents原创文章，未经博主允许不得转载。<a href="http://blog.csdn.net/godblessmyparents/article/details/50675263" target="_blank" rel="external">原文地址</a><br>声明：本人未经博主允许转载了文章，纯粹自我学习与使用，如有侵权，请博主联系本人手机:18646926678</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;需求：&quot;&gt;&lt;a href=&quot;#需求：&quot; class=&quot;headerlink&quot; title=&quot;需求：&quot;&gt;&lt;/a&gt;需求：&lt;/h1&gt;&lt;p&gt;需要的Button 的个数不一定 Button上显示的字符串的长度不一定，Button上显示的字符串和Button的个数全部从服务器
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-RunTime</title>
    <link href="https://github.com/LiShengmin/2016/07/19/iOS-RunTime/"/>
    <id>https://github.com/LiShengmin/2016/07/19/iOS-RunTime/</id>
    <published>2016-07-19T06:59:12.000Z</published>
    <updated>2017-06-19T16:42:44.623Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://cdn.cocimg.com/cms/uploads/allimg/141105/4196_141105101156_1.jpg" alt="image1"><br>Objective<br>-C中的分类允许我们通过给一个类添加方法来扩充它（但是通过category不能添加新的实例变量），并且我们不需要访问类中的代码就可以做到。</p>
<p>Objective-C中的协议是普遍存在的接口定义方式，即在一个类中通过@protocol定义接口，在另外类中实现接口，这种接口定义方式也成为“delegation”模式，@protocol声明了可以呗其他任何方法类实现的方法，协议仅仅是定义一个接口，而由其他的类去负责实现。<a id="more"></a></p>
<p>在本章中，我们来看看runtime对分类与协议的支持。</p>
<h1 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h1><h2 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h2><p>Category是表示一个指向分类的结构体的指针，其定义如下：</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_category *Category;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> objc_category &#123;</div><div class="line"><span class="keyword">char</span> *category_name                          OBJC2_UNAVAILABLE; <span class="comment">// 分类名</span></div><div class="line"><span class="keyword">char</span> *class_name                             OBJC2_UNAVAILABLE; <span class="comment">// 分类所属的类名</span></div><div class="line"><span class="keyword">struct</span> objc_method_list *instance_methods    OBJC2_UNAVAILABLE; <span class="comment">// 实例方法列表</span></div><div class="line"><span class="keyword">struct</span> objc_method_list *class_methods       OBJC2_UNAVAILABLE; <span class="comment">// 类方法列表</span></div><div class="line"><span class="keyword">struct</span> objc_protocol_list *protocols         OBJC2_UNAVAILABLE; <span class="comment">// 分类所实现的协议列表</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个结构体主要包含了分类定义的实例方法与类方法，其中instance_methods列表是objc_class中方法列表的一个子集，而class_methods列表是元类方法列表的一个子集。</p>
<h2 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h2><p>Protocol的定义如下：<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_object Protocol;</div></pre></td></tr></table></figure></p>
<p>我们可以看到，Protocol其中实就是一个对象结构体。</p>
<h1 id="操作函数"><a href="#操作函数" class="headerlink" title="操作函数"></a>操作函数</h1><p>Runtime并没有在<objc runtime.h="">头文件中提供针对分类的操作函数。因为这些分类中的信息都包含在objc_class中，我们可以通过针对objc_class的操作函数来获取分类的信息。如下例所示：<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RuntimeCategoryClass</span> : <span class="title">NSObject</span></span></div><div class="line">- (<span class="keyword">void</span>)method1;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RuntimeCategoryClass</span> (<span class="title">Category</span>)</span></div><div class="line">- (<span class="keyword">void</span>)method2;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RuntimeCategoryClass</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)method1 &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RuntimeCategoryClass</span> (<span class="title">Category</span>)</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)method2 &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"测试objc_class中的方法列表是否包含分类中的方法"</span>);</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> outCount = <span class="number">0</span>;</div><div class="line">Method *methodList = class_copyMethodList(RuntimeCategoryClass.class, &amp;outCount);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outCount; i++) &#123;</div><div class="line">Method method = methodList[i];</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *name = sel_getName(method_getName(method));</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"RuntimeCategoryClass's method: %s"</span>, name);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (strcmp(name, sel_getName(<span class="keyword">@selector</span>(method2)))) &#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"分类方法method2在objc_class的方法列表中"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></objc></p>
<h3 id="其输出是："><a href="#其输出是：" class="headerlink" title="其输出是："></a>其输出是：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">2014-11-08 10:36:39.213 [561:151847] 测试objc_class中的方法列表是否包含分类中的方法</div><div class="line">2014-11-08 10:36:39.215 [561:151847] RuntimeCategoryClass's method: method2</div><div class="line">2014-11-08 10:36:39.215 [561:151847] RuntimeCategoryClass's method: method1</div><div class="line">2014-11-08 10:36:39.215 [561:151847] 分类方法method2在objc_class的方法列表中</div></pre></td></tr></table></figure>
<h2 id="而对于Protocol，runtime提供了一系列函数来对其进行操作，这些函数包括："><a href="#而对于Protocol，runtime提供了一系列函数来对其进行操作，这些函数包括：" class="headerlink" title="而对于Protocol，runtime提供了一系列函数来对其进行操作，这些函数包括："></a>而对于Protocol，runtime提供了一系列函数来对其进行操作，这些函数包括：</h2><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 返回指定的协议</span></div><div class="line">Protocol * objc_getProtocol ( <span class="keyword">const</span> <span class="keyword">char</span> *name );</div><div class="line"></div><div class="line"><span class="comment">// 获取运行时所知道的所有协议的数组</span></div><div class="line">Protocol ** objc_copyProtocolList ( <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount );</div><div class="line"></div><div class="line"><span class="comment">// 创建新的协议实例</span></div><div class="line">Protocol * objc_allocateProtocol ( <span class="keyword">const</span> <span class="keyword">char</span> *name );</div><div class="line"></div><div class="line"><span class="comment">// 在运行时中注册新创建的协议</span></div><div class="line"><span class="keyword">void</span> objc_registerProtocol ( Protocol *proto );</div><div class="line"></div><div class="line"><span class="comment">// 为协议添加方法</span></div><div class="line"><span class="keyword">void</span> protocol_addMethodDescription ( Protocol *proto, SEL name, <span class="keyword">const</span> <span class="keyword">char</span> *types, <span class="built_in">BOOL</span> isRequiredMethod, <span class="built_in">BOOL</span> isInstanceMethod );</div><div class="line"></div><div class="line"><span class="comment">// 添加一个已注册的协议到协议中</span></div><div class="line"><span class="keyword">void</span> protocol_addProtocol ( Protocol *proto, Protocol *addition );</div><div class="line"></div><div class="line"><span class="comment">// 为协议添加属性</span></div><div class="line"><span class="keyword">void</span> protocol_addProperty ( Protocol *proto, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> objc_property_attribute_t *attributes, <span class="keyword">unsigned</span> <span class="keyword">int</span> attributeCount, <span class="built_in">BOOL</span> isRequiredProperty, <span class="built_in">BOOL</span> isInstanceProperty );</div><div class="line"></div><div class="line"><span class="comment">// 返回协议名</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> * protocol_getName ( Protocol *p );</div><div class="line"></div><div class="line"><span class="comment">// 测试两个协议是否相等</span></div><div class="line"><span class="built_in">BOOL</span> protocol_isEqual ( Protocol *proto, Protocol *other );</div><div class="line"></div><div class="line"><span class="comment">// 获取协议中指定条件的方法的方法描述数组</span></div><div class="line"><span class="keyword">struct</span> objc_method_description * protocol_copyMethodDescriptionList ( Protocol *p, <span class="built_in">BOOL</span> isRequiredMethod, <span class="built_in">BOOL</span> isInstanceMethod, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount );</div><div class="line"></div><div class="line"><span class="comment">// 获取协议中指定方法的方法描述</span></div><div class="line"><span class="keyword">struct</span> objc_method_description protocol_getMethodDescription ( Protocol *p, SEL aSel, <span class="built_in">BOOL</span> isRequiredMethod, <span class="built_in">BOOL</span> isInstanceMethod );</div><div class="line"></div><div class="line"><span class="comment">// 获取协议中的属性列表</span></div><div class="line">objc_property_t * protocol_copyPropertyList ( Protocol *proto, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount );</div><div class="line"></div><div class="line"><span class="comment">// 获取协议的指定属性</span></div><div class="line">objc_property_t protocol_getProperty ( Protocol *proto, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="built_in">BOOL</span> isRequiredProperty, <span class="built_in">BOOL</span> isInstanceProperty );</div><div class="line"></div><div class="line"><span class="comment">// 获取协议采用的协议</span></div><div class="line">Protocol ** protocol_copyProtocolList ( Protocol *proto, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount );</div><div class="line"></div><div class="line"><span class="comment">// 查看协议是否采用了另一个协议</span></div><div class="line"><span class="built_in">BOOL</span> protocol_conformsToProtocol ( Protocol *proto, Protocol *other );</div></pre></td></tr></table></figure>
<p>objc_getProtocol函数，需要注意的是如果仅仅是声明了一个协议，而未在任何类中实现这个协议，则该函数返回的是nil。</p>
<p>● objc_copyProtocolList函数，获取到的数组需要使用free来释放</p>
<p>● objc_allocateProtocol函数，如果同名的协议已经存在，则返回nil</p>
<p>● objc_registerProtocol函数，创建一个新的协议后，必须调用该函数以在运行时中注册新的协议。协议注册后便可以使用，但不能再做修改，即注册完后不能再向协议添加方法或协议</p>
<p>需要强调的是，协议一旦注册后就不可再修改，即无法再通过调用protocol_addMethodDescription、protocol_addProtocol和protocol_addProperty往协议中添加方法等。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>Runtime并没有提供过多的函数来处理分类。对于协议，我们可以动态地创建协议，并向其添加方法、属性及继承的协议，并在运行时动态地获取这些信息。</p>
<p><a href="http://www.cocoachina.com/ios/20141031/10105.html" target="_blank" rel="external">Objective-C Runtime 运行时之一：类与对象</a><br><a href="http://www.cocoachina.com/ios/20141105/10134.html" target="_blank" rel="external">Objective-C Runtime 运行时之二：成员变量与属性</a><br><a href="http://www.cocoachina.com/ios/20141106/10150.html" target="_blank" rel="external">Objective-C Runtime 运行时之三：方法与消息</a><br><a href="http://www.cocoachina.com/ios/20140225/7880.html" target="_blank" rel="external">Objective-C Runtime 运行时之四：Method Swizzling</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://cdn.cocimg.com/cms/uploads/allimg/141105/4196_141105101156_1.jpg&quot; alt=&quot;image1&quot;&gt;&lt;br&gt;Objective&lt;br&gt;-C中的分类允许我们通过给一个类添加方法来扩充它（但是通过category不能添加新的实例变量），并且我们不需要访问类中的代码就可以做到。&lt;/p&gt;
&lt;p&gt;Objective-C中的协议是普遍存在的接口定义方式，即在一个类中通过@protocol定义接口，在另外类中实现接口，这种接口定义方式也成为“delegation”模式，@protocol声明了可以呗其他任何方法类实现的方法，协议仅仅是定义一个接口，而由其他的类去负责实现。
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-获取网卡地址和IP地址</title>
    <link href="https://github.com/LiShengmin/2016/07/13/iOS-%E8%8E%B7%E5%8F%96%E7%BD%91%E5%8D%A1%E5%9C%B0%E5%9D%80%E5%92%8CIP%E5%9C%B0%E5%9D%80/"/>
    <id>https://github.com/LiShengmin/2016/07/13/iOS-获取网卡地址和IP地址/</id>
    <published>2016-07-13T08:25:27.000Z</published>
    <updated>2017-05-08T09:50:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>直接上代码<a id="more"></a></p>
<h1 id="网卡的硬件地址"><a href="#网卡的硬件地址" class="headerlink" title="网卡的硬件地址:"></a>网卡的硬件地址:</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#include <span class="meta-string">&lt;sys/socket.h&gt;</span> // Per msqr</span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;sys/sysctl.h&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;net/if.h&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;net/if_dl.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark MAC addy</span></div><div class="line"><span class="comment">// Return the local MAC addy</span></div><div class="line"><span class="comment">// Courtesy of FreeBSD hackers email list</span></div><div class="line"><span class="comment">// Accidentally munged during previous update. Fixed thanks to mlamb.</span></div><div class="line">- (<span class="built_in">NSString</span> *) macaddress</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span>                  mib[<span class="number">6</span>];</div><div class="line">    size_t               len;</div><div class="line">    <span class="keyword">char</span>                *buf;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>       *ptr;</div><div class="line">    <span class="keyword">struct</span> if_msghdr    *ifm;</div><div class="line">    <span class="keyword">struct</span> sockaddr_dl  *sdl;</div><div class="line"></div><div class="line">    mib[<span class="number">0</span>] = <span class="built_in">CTL_NET</span>;</div><div class="line">    mib[<span class="number">1</span>] = AF_ROUTE;</div><div class="line">    mib[<span class="number">2</span>] = <span class="number">0</span>;</div><div class="line">    mib[<span class="number">3</span>] = AF_LINK;</div><div class="line">    mib[<span class="number">4</span>] = NET_RT_IFLIST;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((mib[<span class="number">5</span>] = if_nametoindex(<span class="string">"en0"</span>)) == <span class="number">0</span>) &#123;</div><div class="line">        printf(<span class="string">"Error: if_nametoindex error/n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (sysctl(mib, <span class="number">6</span>, <span class="literal">NULL</span>, &amp;len, <span class="literal">NULL</span>, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</div><div class="line">        printf(<span class="string">"Error: sysctl, take 1/n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((buf = malloc(len)) == <span class="literal">NULL</span>) &#123;</div><div class="line">        printf(<span class="string">"Could not allocate memory. error!/n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (sysctl(mib, <span class="number">6</span>, buf, &amp;len, <span class="literal">NULL</span>, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</div><div class="line">        printf(<span class="string">"Error: sysctl, take 2"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ifm = (<span class="keyword">struct</span> if_msghdr *)buf;</div><div class="line">    sdl = (<span class="keyword">struct</span> sockaddr_dl *)(ifm + <span class="number">1</span>);</div><div class="line">    ptr = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)LLADDR(sdl);</div><div class="line">    <span class="comment">// NSString *outstring = [NSString stringWithFormat:@"x:x:x:x:x:x", *ptr, *(ptr+1), *(ptr+2), *(ptr+3), *(ptr+4), *(ptr+5)];</span></div><div class="line">    <span class="built_in">NSString</span> *outstring = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"xxxxxx"</span>, *ptr, *(ptr+<span class="number">1</span>), *(ptr+<span class="number">2</span>), *(ptr+<span class="number">3</span>), *(ptr+<span class="number">4</span>), *(ptr+<span class="number">5</span>)];</div><div class="line">    free(buf);</div><div class="line">    <span class="keyword">return</span> [outstring uppercaseString];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="这写头文件是用于获取ip等系列功能的"><a href="#这写头文件是用于获取ip等系列功能的" class="headerlink" title="这写头文件是用于获取ip等系列功能的"></a>这写头文件是用于获取ip等系列功能的</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#include <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;net/if.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;ifaddrs.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;dlfcn.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"wwanconnect.h//frome apple 你可能没有哦</span></span></div><div class="line"></div><div class="line">#import &lt;SystemConfiguration/SystemConfiguration.h&gt;</div></pre></td></tr></table></figure>
<h2 id="这是外网可见的ip地址，如果你在小区的局域网中，那就是小区的，不是局域网的内网地址。"><a href="#这是外网可见的ip地址，如果你在小区的局域网中，那就是小区的，不是局域网的内网地址。" class="headerlink" title="这是外网可见的ip地址，如果你在小区的局域网中，那就是小区的，不是局域网的内网地址。"></a>这是外网可见的ip地址，如果你在小区的局域网中，那就是小区的，不是局域网的内网地址。</h2><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSString</span> *) whatismyipdotcom</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSError</span> *error;</div><div class="line">    <span class="built_in">NSURL</span> *ipURL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://www.whatismyip.com/automation/n09230945.asp"</span>];</div><div class="line">    <span class="built_in">NSString</span> *ip = [<span class="built_in">NSString</span> stringWithContentsOfURL:ipURL encoding:<span class="number">1</span> error:&amp;error];</div><div class="line">    <span class="keyword">return</span> ip ? ip : [error localizedDescription];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="这是获取本地wifi的ip地址"><a href="#这是获取本地wifi的ip地址" class="headerlink" title="这是获取本地wifi的ip地址"></a>这是获取本地wifi的ip地址</h2><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Matt Brown's get WiFi IP addy solution</span></div><div class="line"><span class="comment">// Author gave permission to use in Cookbook under cookbook license</span></div><div class="line"><span class="comment">// http://mattbsoftware.blogspot.com/2009/04/how-to-get-ip-address-of-iphone-os-v221.html</span></div><div class="line">- (<span class="built_in">NSString</span> *) localWiFiIPAddress</div><div class="line">&#123;</div><div class="line">    <span class="built_in">BOOL</span> success;</div><div class="line">    <span class="keyword">struct</span> ifaddrs * addrs;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">struct</span> ifaddrs * cursor;</div><div class="line"></div><div class="line">    success = getifaddrs(&amp;addrs) == <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (success) &#123;</div><div class="line">        cursor = addrs;</div><div class="line">        <span class="keyword">while</span> (cursor != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="comment">// the second test keeps from picking up the loopback address</span></div><div class="line">        <span class="keyword">if</span> (cursor-&gt;ifa_addr-&gt;sa_family == AF_INET &amp;&amp; (cursor-&gt;ifa_flags &amp; IFF_LOOPBACK) == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">NSString</span> *name = [<span class="built_in">NSString</span> stringWithUTF8String:cursor-&gt;ifa_name];</div><div class="line">            <span class="keyword">if</span> ([name isEqualToString:<span class="string">@"en0"</span>])  <span class="comment">// Wi-Fi adapter</span></div><div class="line">                <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithUTF8String:inet_ntoa(((<span class="keyword">struct</span> sockaddr_in *)cursor-&gt;ifa_addr)-&gt;sin_addr)];</div><div class="line">            &#125;</div><div class="line">            cursor = cursor-&gt;ifa_next;</div><div class="line">        &#125;</div><div class="line">        freeifaddrs(addrs);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="NSString和Address的转换"><a href="#NSString和Address的转换" class="headerlink" title="NSString和Address的转换"></a>NSString和Address的转换</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">NSString</span> *) stringFromAddress: (<span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *) address</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(address &amp;&amp; address-&gt;sa_family == AF_INET) &#123;</div><div class="line">        <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr_in* sin = (<span class="keyword">struct</span> sockaddr_in*) address;</div><div class="line">        <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@:%d"</span>, [<span class="built_in">NSString</span> stringWithUTF8String:inet_ntoa(sin-&gt;sin_addr)], ntohs(sin-&gt;sin_port)];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">BOOL</span>)addressFromString:(<span class="built_in">NSString</span> *)IPAddress address:(<span class="keyword">struct</span> sockaddr_in *)address</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!IPAddress || ![IPAddress length]) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    memset((<span class="keyword">char</span> *) address, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in), <span class="number">0</span>);</div><div class="line">    address-&gt;sin_family = AF_INET;</div><div class="line">    address-&gt;sin_len = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> conversionResult = inet_aton([IPAddress UTF8String], &amp;address-&gt;sin_addr);</div><div class="line">    <span class="keyword">if</span> (conversionResult == <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">NSAssert1</span>(conversionResult != <span class="number">1</span>, <span class="string">@"Failed to convert the IP address string into a sockaddr_in: %@"</span>, IPAddress);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="获取host的名称"><a href="#获取host的名称" class="headerlink" title="获取host的名称"></a>获取host的名称</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (NSString *) hostname</div><div class="line">&#123;</div><div class="line">    char baseHostName[256]; // Thanks, Gunnar Larisch</div><div class="line">    int success = gethostname(baseHostName, 255);</div><div class="line">    if (success != 0) return nil;</div><div class="line">    baseHostName[255] = '/0';</div><div class="line"></div><div class="line">    #if TARGET_IPHONE_SIMULATOR</div><div class="line">        return [NSString stringWithFormat:@"%s", baseHostName];</div><div class="line">    #else</div><div class="line">        return [NSString stringWithFormat:@"%s.local", baseHostName];</div><div class="line">    #endif</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="从host获取地址"><a href="#从host获取地址" class="headerlink" title="从host获取地址"></a>从host获取地址</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSString</span> *) getIPAddressForHost: (<span class="built_in">NSString</span> *) theHost</div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> hostent *host = gethostbyname([theHost UTF8String]);</div><div class="line">    <span class="keyword">if</span> (!host) &#123;herror(<span class="string">"resolv"</span>); <span class="keyword">return</span> <span class="literal">NULL</span>; &#125;</div><div class="line">    <span class="keyword">struct</span> in_addr **list = (<span class="keyword">struct</span> in_addr **)host-&gt;h_addr_list;</div><div class="line">    <span class="built_in">NSString</span> *addressString = [<span class="built_in">NSString</span> stringWithCString:inet_ntoa(*list[<span class="number">0</span>]) encoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">    <span class="keyword">return</span> addressString;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="这是本地host的IP地址"><a href="#这是本地host的IP地址" class="headerlink" title="这是本地host的IP地址"></a>这是本地host的IP地址</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSString</span> *) localIPAddress</div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> hostent *host = gethostbyname([[<span class="keyword">self</span> hostname] UTF8String]);</div><div class="line">    <span class="keyword">if</span> (!host) &#123;herror(<span class="string">"resolv"</span>); <span class="keyword">return</span> <span class="literal">nil</span>;&#125;</div><div class="line">    <span class="keyword">struct</span> in_addr **list = (<span class="keyword">struct</span> in_addr **)host-&gt;h_addr_list;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithCString:inet_ntoa(*list[<span class="number">0</span>]) encoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大家有什么不懂尽请留言<a href="http://www.cnblogs.com/hanjun/archive/2013/07/12/3185860.html" target="_blank" rel="external">原文地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;直接上代码
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-优化自动布局</title>
    <link href="https://github.com/LiShengmin/2016/07/03/iOS-%E4%BC%98%E5%8C%96%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80/"/>
    <id>https://github.com/LiShengmin/2016/07/03/iOS-优化自动布局/</id>
    <published>2016-07-03T04:31:02.000Z</published>
    <updated>2017-06-19T16:36:56.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="优化自动布局"><a href="#优化自动布局" class="headerlink" title="优化自动布局"></a>优化自动布局</h1><p>有一个帖子由弗洛里安·库格勒最近一轮持续大约在iOS自动布局的性能。它看着它需要多少时间自动布局添加的意见，这与视图的数量增加如何。该职位，同时提供非常有用的信息，似乎没有最能代表自动布局的现实世界中的表现，而不是显示一组最坏的情况。<a id="more"></a></p>
<p>在这篇文章中，我想看到​​更多的，为什么弗洛里安了他做的结果。我的希望是要突出一些不好的做法，人们可以有自动布局，看看是什么让双方的陈述，“自动布局需要几秒钟布局几百意见”和“自动布局可以布局一些100浏览速度非常快”真，尽管他们看似矛盾的性质。</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>首先，我想捂住我究竟是如何在问题测量的数字。我相信这是弗洛里安如何衡量他们稍有不同，但更加紧密地显示了布局。我开始用原始的源项目，并进行了修改，以测试一些变化。你可以找到我的版本的项目的GitHub上。</p>
<p>为了测量时序，我跑了使用时间探查模板仪器的应用程序。我并不觉得有必要每次重新启动应用程序因为很少有到无缓存的事情。我跑了每个测试3次连续，清除每次测试之间的意见。之后，在仪器，我集中，其中每个测试运行示例的区域。为了得到一个布局花时间，我用的时候说的仪器其布局方法了。我计算了3次的平均值和使用，要为这个职位提供数据。</p>
<h1 id="重建的初步结果"><a href="#重建的初步结果" class="headerlink" title="重建的初步结果"></a>重建的初步结果</h1><p>正如我的方法是略有不同，我使用的是不同的设备弗洛里安（第3代iPad），我第一次开始测试他做同样的事情。他的项目测试铺设的3种方式：</p>
<pre><code>各种观点的平面层次结构，绝对定位在根视图
各种观点的平面层次结构，相对定位彼此
视图嵌套层次结构，相对定位彼此
</code></pre><p>他还通过简单的设置框架做了平坦和嵌套层次两者。下面是显示我得到了平面层次结构图。<br><img src="http://pilky.me/static/blogmedia/optimiseautolayout1.png" alt="img1"><br>如果你比较弗洛里安的帖子，你会看到这看起来相当不同。在弗洛里安的图中，绿线是比橙线差，但他们都相当接近。在我的图中，橙色线是差很多（作为一个例子，对于600的看法，弗洛里安了5秒，而我走近7.5秒时，尽管有一个更快的iPad），但绿线是好多了（对于600的观点我在2.5秒VS弗洛里安的6-7秒）。</p>
<p>我把这种差异下降到测量的差异。如前面提到的，我使用的方法产生的限制的定时。为了做到这一点，我调用-layoutIfNeeded在每个方法的末尾上的根查看方法。这迫使自动布局立即运行，而不是延迟，直到运行循环结束，这意味着仪器计数的方法创建的限制，而不是系统的方法的性能。</p>
<p>我怀疑是弗洛里安测量总时间的CPU是工作，但是这不一定都是因为自动布局。我相信我的方式更表明了什么自动布局正在做，但弗洛里安之更有象征的应用程序多长时间是没有响应。无论如何，实际值并不重要不亚于曲线，和任何相对的改进，我们可以找到。<br><img src="http://pilky.me/static/blogmedia/optimiseautolayout2.png" alt="img2"><br>嵌套布局图与原检验少的差别。曲线几乎是相同的。唯一的区别是，我的时间稍快，这是更快的设备上运行时，可以预期的。</p>
<h1 id="电源局部性"><a href="#电源局部性" class="headerlink" title="电源局部性"></a>电源局部性</h1><p>有一件事我注意到了有关的原代码是正在的根视图中添加所有的约束。在某些情况下，这是必需的，作为约束引用根视图。所有意见的约束引用必须在它被添加到视图的子树。因此，你可以随便扔在UI每一个约束到应用程序的根视图。</p>
<p>你不想做，虽然，有几个原因。最明显的是，这是一个很多更容易理解的代码时，它在本地添加约束。另一种是，它显着地影响性能。</p>
<p>让我们来看看我们的公寓布局。虽然位置限制必须是根视图，尺寸的限制没有。我改变了代码，这样大小的限制，正在加入到子视图来代替，并得到了以下结果：<br><img src="http://pilky.me/static/blogmedia/optimiseautolayout3.png" alt="img3"><br>紫线是相对布局，大小限制为尽可能地方，红色为绝对布局的等效线。正如你所看到的，我们得到了一些性能改进。我不是100％肯定，但我的猜测是，这是因为我们正在减少对根视图计算的大小。我们让自动布局进行布局的一部分，因为很多小的计算，而不是在一个大的blob计算整个事情。</p>
<p>这些收益都比较小，但。在更复杂的计算仍然是所有聚集在一起，并尽可能本地。让我们来看看嵌套布局的话，因为所有涉及到一个视图的约束可以放在眼前的上海华，极大地提高当地。下图显示了刚才的改进如何显著这给。<br><img src="http://pilky.me/static/blogmedia/optimiseautolayout4.png" alt="img4"><br>为了给实际的数字，200视图布局时，把根视图中的所有限制，但把他们当只有2.00秒于眼前的SuperView了22.75秒。把根认为同样的限制导致运行在11倍慢的代码。这个教训应该是显而易见的。当使用自动布局工作，把所有的约束作为本地越好。</p>
<h1 id="修改现有视图层次"><a href="#修改现有视图层次" class="headerlink" title="修改现有视图层次"></a>修改现有视图层次</h1><p>弗洛里安提到，约束满足问题有一个多项式复杂性。我们可以在上面的图的曲线看到这一点。然而，测试上述基本上不具代表性的实际使用自动布局的。了解自动布局有多快扔在1000意见纳入父视图是很有用的，就像知道NSArray的速度有多快是增加数百万个对象。然而，大多数创造NSArrays很少持有超过几百项的更多，许多持有小于10.同样，也很少为个人观点持有多40-50子视图，或者视图层次超过20-深30次（我怀疑这些值将大大偏高）。</p>
<p>更现实的情况是有，我们希望移动的一些看法，或者添加一些额外的看法视图层次。我进行基于上面的一些测试。以两个平（绝对的，不是相对）和嵌套布局，在上面使用的大小，然后我计算过了多长时间，将所有的意见，并增加10个额外的意见。</p>
<p>我们可以从下面的图中看到，即使在高达1000的意见，增加一个额外的10次到平，绝对定位的布局基本上是线性的。这是因为我们仅引用根视图，并且因此，所有的其他观点并不需要重新计算。如果我们插入的图成的相对定位视图的链的中间，它可能会不这么快。</p>
<p>同样，移动基本上是线性的，尽管它在1000的观点确实秒杀。再次，这是因为对于一个视图的约束不依赖于任何其它同级图。<br><img src="http://pilky.me/static/blogmedia/optimiseautolayout5.png" alt="img4"><br>如果我们看一下嵌套布局，我们发现，移动也看似线性的。虽然它看起来比持平层次浅了很多，它仅仅是图的一招，他们大多是在同一行。当谈到加入，我们确实看到了曲线，但我们在这里添加视图层次额外10层，每层依赖于前。<br><img src="http://pilky.me/static/blogmedia/optimiseautolayout6.png" alt="img5"><br>与所有这些需要注意的事，就是他们的速度有多快相比之前的测试。要加1000绝对定位的看法了6.6秒，但要加一个额外的10只花了0.055秒。这归结为食火鸡约束解算器多么聪明的。</p>
<p>而不是试图每次重新解决从无到有的全部问题，它有一个增量系统。它可以重新使用以前的所有计算，当您添加，编辑或删除约束仅仅是修改的结果。这就是为什么它可能需要几秒钟的时间一气呵成添加一些100的观点，但你可以迅速地调整该窗口，并拥有所有的约束进行重新计算和框架集。</p>
<p>自动布局比手动设定帧慢。它是要概括的解决跨整个UI相当复杂的布局问题。其专注于一个单一的视图专门的算法总是会更快地运行。自动布局的优势不在于布局使得在运行时速度较快，但在使其更快，更容易为我们的编码时定义布局。</p>
<p>像许多我们使用的工具，自动布局充分利用了我们有处理能力丰富的事实，为了使我们更容易编写应用程序。对于绝大多数的用例，如果正确使用，自动布局比速度不够快了。这听起来像一个借口，但它是我们使用我们的高级编程语言，而不是议会来证明书写同样的借口。</p>
<p>如果您正在寻找更多的自动布局，检出自动布局指南，未来的2014年夏季。<br>如果你想给我一个评论对这个职位，请发送电子邮件至pilky@mcubedsw.com。或者发推@pilky。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;优化自动布局&quot;&gt;&lt;a href=&quot;#优化自动布局&quot; class=&quot;headerlink&quot; title=&quot;优化自动布局&quot;&gt;&lt;/a&gt;优化自动布局&lt;/h1&gt;&lt;p&gt;有一个帖子由弗洛里安·库格勒最近一轮持续大约在iOS自动布局的性能。它看着它需要多少时间自动布局添加的意见，这与视图的数量增加如何。该职位，同时提供非常有用的信息，似乎没有最能代表自动布局的现实世界中的表现，而不是显示一组最坏的情况。
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-状态栏(UIStatusBar)颜色</title>
    <link href="https://github.com/LiShengmin/2016/04/29/iOS-%E7%8A%B6%E6%80%81%E6%A0%8F-UIStatusBar-%E9%A2%9C%E8%89%B2/"/>
    <id>https://github.com/LiShengmin/2016/04/29/iOS-状态栏-UIStatusBar-颜色/</id>
    <published>2016-04-29T08:06:19.000Z</published>
    <updated>2017-05-08T09:48:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UIStatusBar的相关设置"><a href="#UIStatusBar的相关设置" class="headerlink" title="UIStatusBar的相关设置"></a>UIStatusBar的相关设置</h1><h2 id="知识普及"><a href="#知识普及" class="headerlink" title="知识普及"></a>知识普及</h2><p>iOS上状态栏 就是指的最上面的20像素高的部分<br>状态栏分前后两部分，要分清这两个概念，后面会用到：<br>前景部分：就是指的显示电池、时间等部分；<br>背景部分：就是显示黑色或者图片的背景部分；</p>
<p>如下图：前景部分为白色，背景部分为黑色<br><img src="/image/005046_Oztm_574576.png" alt=""><br>在此输入图片描述</p>
<p>注意：这里只涉及到ios7以及更高版本，低版本下面的讲解可能无效。<a id="more"></a></p>
<h2 id="设置statusBar的【前景部分】"><a href="#设置statusBar的【前景部分】" class="headerlink" title="设置statusBar的【前景部分】"></a>设置statusBar的【前景部分】</h2><p>简单来说，就是设置显示电池电量、时间、网络部分标示的颜色，<br>这里只能设置两种颜色：<br>    默认的黑色（UIStatusBarStyleDefault）<br>    白色     （UIStatusBarStyleLightContent）<br>可以设置的地方有两个：plist设置里面 和 程序代码里</p>
<h3 id="1-plist设置statusBar"><a href="#1-plist设置statusBar" class="headerlink" title="1.plist设置statusBar"></a>1.plist设置statusBar</h3><p>在plist里增加一行 UIStatusBarStyle(或者是“Status bar style”也可以)，这里可以设置两个值，就是上面提到那两个<br>UIStatusBarStyleDefault 和 UIStatusBarStyleLightContent<br>这样在app启动的launch页显示的时候，statusBar的样式就是上面plist设置的风格。</p>
<h3 id="2-程序代码里设置statusBar"><a href="#2-程序代码里设置statusBar" class="headerlink" title="2.程序代码里设置statusBar"></a>2.程序代码里设置statusBar</h3><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setStatusBarStyle:<span class="built_in">UIStatusBarStyleLightContent</span>];</div></pre></td></tr></table></figure>
<p>或者<br>//相对于上面的接口，这个接口可以动画的改变statusBar的前景色<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setStatusBarStyle:<span class="built_in">UIStatusBarStyleLightContent</span> animated:<span class="literal">YES</span>];</div></pre></td></tr></table></figure></p>
<p>不仅如此，ios还很贴心的在UIViewController也增加了几个接口，<br>目的是让状态栏根据当前显示的UIViewController来定制statusBar的前景部分。<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle;</div><div class="line">- (<span class="built_in">UIViewController</span> *)childViewControllerForStatusBarStyle;</div><div class="line">- (<span class="keyword">void</span>)setNeedsStatusBarAppearanceUpdate</div><div class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle:</div></pre></td></tr></table></figure></p>
<p>在你自己的UIViewController里重写此方法，返回你需要的值(UIStatusBarStyleDefault 或者 UIStatusBarStyleLightContent)；</p>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>这里如果你只是简单的return一个固定的值，那么该UIViewController显示的时候，程序就会马上调用该方法，来改变statusBar的前景部分；<br>如果在该UIViewController已经在显示在当前，你可能还要在当前页面不时的更改statusBar的前景色，那么，你首先需要调用下面的setNeedsStatusBarAppearanceUpdate方法(这个方法会通知系统去调用当前UIViewController的preferredStatusBarStyle方法)， 这个和UIView的setNeedsDisplay原理差不多(调用UIView对象的setNeedsDisplay方法后，系统会在下次页面刷新时，调用重绘该view，系统最快能1秒刷新60次页面，具体要看程序设置)。<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIViewController</span> *)childViewControllerForStatusBarStyle:</div></pre></td></tr></table></figure></p>
<p>这个接口也很重要，默认返回值为nil。当我们调用setNeedsStatusBarAppearanceUpdate时，系统会调用application.window的rootViewController的preferredStatusBarStyle方法，我们的程序里一般都是用UINavigationController做root，如果是这种情况，那我们自己的UIViewController里的preferredStatusBarStyle根本不会被调用；<br>这种情况下childViewControllerForStatusBarStyle就派上用场了，<br>我们要子类化一个UINavigationController，在这个子类里面重写childViewControllerForStatusBarStyle方法，如下：<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIViewController</span> *)childViewControllerForStatusBarStyle&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">self</span>.topViewController;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码的意思就是说，不要调用我自己(就是UINavigationController)的preferredStatusBarStyle方法，而是去调用navigationController.topViewController的preferredStatusBarStyle方法，这样写的话，就能保证当前显示的UIViewController的preferredStatusBarStyle方法能影响statusBar的前景部分。</p>
<p>另外，有时我们的当前显示的UIViewController可能有多个childViewController，重写当前UIViewController的childViewControllerForStatusBarStyle方法，让childViewController的preferredStatusBarStyle生效(当前UIViewController的preferredStatusBarStyle就不会被调用了)。</p>
<p>简单来说，只要UIViewController重写的的childViewControllerForStatusBarStyle方法返回值不是nil，那么，UIViewController的preferredStatusBarStyle方法就不会被系统调用，系统会调用childViewControllerForStatusBarStyle方法返回的UIViewController的preferredStatusBarStyle方法。</p>
<ul>
<li>(void)setNeedsStatusBarAppearanceUpdate:</li>
</ul>
<p>让系统去调用application.window的rootViewController的preferredStatusBarStyle方法,如果rootViewController的childViewControllerForStatusBarStyle返回值不为nil，则参考上面的讲解。</p>
<h2 id="设置statusBar的【背景部分】"><a href="#设置statusBar的【背景部分】" class="headerlink" title="设置statusBar的【背景部分】"></a>设置statusBar的【背景部分】</h2><p>背景部分，简单来说，就是背景色；改变方法有两种：<br>系统提供的方法<br>navigationBar的setBarTintColor接口，用此接口可改变statusBar的背景色<br>注意：一旦你设置了navigationBar的- (void)setBackgroundImage:(UIImage *)backgroundImage forBarMetrics:(UIBarMetrics)barMetrics接口，那么上面的setBarTintColor接口就不能改变statusBar的背景色，statusBar的背景色就会变成纯黑色。<br>另辟蹊径<br>创建一个UIView，<br>设置该UIView的frame.size 和statusBar大小一样，<br>设置该UIView的frame.origin 为{0,-20},<br>设置该UIView的背景色为你希望的statusBar的颜色，<br>在navigationBar上addSubView该UIView即可。<br>注意：<br>1.引用来自“云天青”的评论<br>你好，<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setStatusBarStyle:<span class="built_in">UIStatusBarStyleLightContent</span>];在 AppDelegate里</div></pre></td></tr></table></figure></p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123; 执行也不会起作用。就在控制里写</div><div class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle:起到作用。请问这是什么问题？</div></pre></td></tr></table></figure>
<p>回答：<br>info.plist文件中，View controller-based status bar appearance项设为YES，则View controller对status bar的设置优先级高于application的设置。为NO则以application的设置为准，view controller的prefersStatusBarHidden方法无效，是根本不会被调用的</p>
<p>作者：shede333<br>版权声明：原创文章，版权声明：自由转载-非商用-非衍生-保持署名<br>主页：<a href="http://my.oschina.net/shede333" target="_blank" rel="external">主页1</a> &amp;&amp; <a href="http://blog.sina.com.cn/u/1509658847" target="_blank" rel="external">主页2</a></p>
<p>第三方方法<br>“CWStatusBarNotification 在状态栏显示自定义通知”,我感觉 这个第三方,挺好用的 <a href="http://www.ios122.com/2015/08/cwstatusbarnotification/" target="_blank" rel="external">地址</a></p>
<h1 id="最后说点别的"><a href="#最后说点别的" class="headerlink" title="最后说点别的"></a>最后说点别的</h1><p>IOS7最让人尿性的就是UI的改动，这几天把项目放到ios7上运行，结果让我大跌眼镜，特别是NavigationBar实在我恶心！</p>
<h2 id="NavigationBar与UIViewController-重叠的问题困扰我两天。"><a href="#NavigationBar与UIViewController-重叠的问题困扰我两天。" class="headerlink" title="NavigationBar与UIViewController 重叠的问题困扰我两天。"></a>NavigationBar与UIViewController 重叠的问题困扰我两天。</h2><p>后来发现IOS7的视图有个边缘延伸的属性：edgesForExtendedLayout，<br>其默认值是UIExtendedEdgeAll。<br>只要将其改成UIExtendedEdgeNone即可，要注意的是在IOS7以下版本会出现bug。<br>所以在UIViewController 的viewDidLoad里加上下面代码就完美解决了这个问题<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>( ([[[<span class="built_in">UIDevicecurrentDevice</span>] systemVersion] doubleValue]&gt;=<span class="number">7.0</span>)) &#123;<span class="keyword">self</span>.edgesForExtendedLayout= <span class="built_in">UIExtendedEdgeNone</span>;    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="还有一个问题是NavigationBar-setTintColor这个方法设置颜色无效！"><a href="#还有一个问题是NavigationBar-setTintColor这个方法设置颜色无效！" class="headerlink" title="还有一个问题是NavigationBar setTintColor这个方法设置颜色无效！"></a>还有一个问题是NavigationBar setTintColor这个方法设置颜色无效！</h2><p>但是我发现IOS7有个setBarTintColor 的方法，而且能达到效果。同样也要判断是否是IOS7。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UIStatusBar的相关设置&quot;&gt;&lt;a href=&quot;#UIStatusBar的相关设置&quot; class=&quot;headerlink&quot; title=&quot;UIStatusBar的相关设置&quot;&gt;&lt;/a&gt;UIStatusBar的相关设置&lt;/h1&gt;&lt;h2 id=&quot;知识普及&quot;&gt;&lt;a href=&quot;#知识普及&quot; class=&quot;headerlink&quot; title=&quot;知识普及&quot;&gt;&lt;/a&gt;知识普及&lt;/h2&gt;&lt;p&gt;iOS上状态栏 就是指的最上面的20像素高的部分&lt;br&gt;状态栏分前后两部分，要分清这两个概念，后面会用到：&lt;br&gt;前景部分：就是指的显示电池、时间等部分；&lt;br&gt;背景部分：就是显示黑色或者图片的背景部分；&lt;/p&gt;
&lt;p&gt;如下图：前景部分为白色，背景部分为黑色&lt;br&gt;&lt;img src=&quot;/image/005046_Oztm_574576.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;在此输入图片描述&lt;/p&gt;
&lt;p&gt;注意：这里只涉及到ios7以及更高版本，低版本下面的讲解可能无效。
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
</feed>
