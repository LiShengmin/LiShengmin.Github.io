<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shemmy</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-12T15:59:45.157Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Shemmy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS-iOS11无线调试</title>
    <link href="http://yoursite.com/2017/06/12/iOS-iOS11%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95/"/>
    <id>http://yoursite.com/2017/06/12/iOS-iOS11无线调试/</id>
    <published>2017-06-12T09:17:04.000Z</published>
    <updated>2017-06-12T15:59:45.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用XCode进行iOS无线调试"><a href="#使用XCode进行iOS无线调试" class="headerlink" title="使用XCode进行iOS无线调试"></a>使用XCode进行iOS无线调试</h1><p>首先这种方法是对你的系统，Xcode版本，对iOS版本有要求的！<br>MacOS：10.13<br>XCode：9<br>iOS：11<br><a id="more"></a></p>
<h1 id="下面是操作步骤"><a href="#下面是操作步骤" class="headerlink" title="下面是操作步骤"></a>下面是操作步骤</h1><ul>
<li>手机连接Xcode中，选择菜单上的<code>Window</code>,-&gt;<code>Device and Simulators</code>。<br><img src="\image\Window-Device.png" alt=""></li>
<li>找到连接设备，把Connect viaNetWork选项勾选。<br><img src="\image\d6058bdd9f50010037191a0ed1f1111f.png" alt=""></li>
<li>等待。。</li>
<li>断开和iPad/iPhone的有线连接。</li>
<li>左侧选择刚才的设备，右键，选择<code>Connect via IP Address...</code><br><img src="\image\200ee9e43bc886462d3928a72193d58d.png" alt=""><br><img src="\image\0505eb003339651a107b33fa8477836d.png" alt=""></li>
<li>添加设备局域网IP<br><img src="\image\c3eee091de2599f5c38ff0a6ce0f37b5.png" alt=""></li>
<li>直接运行就好了<br><img src="\image\1402206e1bbcc33f16f442b62ea0d6fd.png" alt=""></li>
</ul>
<h1 id="Operation-procedure"><a href="#Operation-procedure" class="headerlink" title="Operation procedure"></a>Operation procedure</h1><ul>
<li>iPhone/iPad Client Mac, In Xcode menu bar select Window re select Device and Simulators.</li>
<li>In left menu find your Device, Check Connect viaNetWork</li>
<li>Wait for success.</li>
<li>Disconnect your iPad/iPhone to Mac. </li>
<li>Re select your Device, right Click, select <code>Connect via IP Address</code>..And you can’t find it, you must disconnect with iPad to Mac Client</li>
<li>Please write you iPad/iPhone’s IP address.</li>
<li>you can run your app to iPad with wireless, is very cool.</li>
<li>successful.</li>
</ul>
<h1 id="thanks-to-read"><a href="#thanks-to-read" class="headerlink" title="thanks to read"></a>thanks to read</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用XCode进行iOS无线调试&quot;&gt;&lt;a href=&quot;#使用XCode进行iOS无线调试&quot; class=&quot;headerlink&quot; title=&quot;使用XCode进行iOS无线调试&quot;&gt;&lt;/a&gt;使用XCode进行iOS无线调试&lt;/h1&gt;&lt;p&gt;首先这种方法是对你的系统，Xcode版本，对iOS版本有要求的！&lt;br&gt;MacOS：10.13&lt;br&gt;XCode：9&lt;br&gt;iOS：11&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Carthage使用</title>
    <link href="http://yoursite.com/2017/04/28/Carthage%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/04/28/Carthage使用/</id>
    <published>2017-04-28T10:49:43.000Z</published>
    <updated>2017-05-08T09:44:43.000Z</updated>
    
    <content type="html"><![CDATA[<p> 今天有朋友在群里问“怎么使用Swift第三方库？”，对象是SwiftyJSON，正巧这段时间也要用，干脆折腾了下。在SwiftyJSON的GitHub上说，需要先安装Carthage这个包管理。 <a id="more"></a></p>
<p>github地址：<a href="https://github.com/Carthage/Carthage" target="_blank" rel="external">https://github.com/Carthage/Carthage</a></p>
<ol>
<li>安装Carthage<br>首先到github上Download或者Clone Git 或者使用HomeBrew（我是用这个），安装好。<br><code>brew update</code>(先更新).<code>brew install carthage</code> (安装Carthage).  </li>
<li>安装好以后在carthage的根目录<strong>创建一个Cartfile</strong>文件：<br><code>vim Cartfile</code>输入你想要编译成Framework的Swift第三方库，比如说SwiftyJSON和Alamofire，如下所示:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">github &quot;Alamofire/Alamofire&quot; &amp;gt;= 1.1</div><div class="line">github &quot;SwiftyJSON/SwiftyJSON&quot; &amp;gt;= 2.1.2</div></pre></td></tr></table></figure>
<p>github代表源，而后面的就是用户名和版本库的名字，而”&gt;=” 后面是Tag（本质上就是版本号）</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">carthage update</span></div></pre></td></tr></table></figure>
<p>之后会发现在跟目录下多出了“Carthage”文件夹和“Cartfile.resolved”文件。<br>进入“Carthage/Checkouts”下可以看到刚刚得到的Alamofire和SwiftyJSON。</p>
<h1 id="使用第三方库"><a href="#使用第三方库" class="headerlink" title="使用第三方库"></a>使用第三方库</h1><p>在你的应用程序target的“General”设置标签中的“Embedded Binaries”区域，将“Carthage/Build”目录下你想使用的第三方库文件夹拖进去即可，比如“Carthage/Build/SwiftyJSON”。</p>
<h1 id="失败了不可怕"><a href="#失败了不可怕" class="headerlink" title="失败了不可怕"></a>失败了不可怕</h1><p>如果Build文件夹里是空的，说明刚刚在update的时候一定出现了错误。可以查看下刚刚执行的日志文件里说了什么，按部就班的解决就行。</p>
<p>像我遇到的问题就是因为我没有为SwiftyJSON项目配置我的apple 开发者账号ID，99刀就可以解决问题！<br>解决完问题之后，因为之前执行update时，已经将github的内容抓取到了Checkout目录中，就不用再update抓取了，执行bootstrap就可以开始编译，节省时间。<br><a href="http://blog.crazyphper.com/?p=3661" target="_blank" rel="external">本文链接地址: 使用Carthage安装第三方Swift库</a><br><a href="http://www.isaced.com/post-265.html" target="_blank" rel="external">更加全面的文章在这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 今天有朋友在群里问“怎么使用Swift第三方库？”，对象是SwiftyJSON，正巧这段时间也要用，干脆折腾了下。在SwiftyJSON的GitHub上说，需要先安装Carthage这个包管理。
    
    </summary>
    
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>iOS中 请求主线程刷新UI</title>
    <link href="http://yoursite.com/2016/11/18/iOS-%E8%AF%B7%E6%B1%82%E4%B8%BB%E7%BA%BF%E7%A8%8B%E5%88%B7%E6%96%B0UI/"/>
    <id>http://yoursite.com/2016/11/18/iOS-请求主线程刷新UI/</id>
    <published>2016-11-18T08:07:57.000Z</published>
    <updated>2017-05-08T09:45:25.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ([<span class="built_in">NSThread</span> isMainThread])  </div><div class="line">&#123;  </div><div class="line">[<span class="keyword">self</span>.downloadMapBtn setImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"download_map.png"</span>] forState:<span class="built_in">UIControlStateNormal</span>];  </div><div class="line">[<span class="keyword">self</span>.downloadMapBtn setNeedsDisplay];  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">else</span>  </div><div class="line">&#123;  </div><div class="line"><span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;  </div><div class="line"><span class="comment">//Update UI in UI thread here  </span></div><div class="line">[<span class="keyword">self</span>.downloadMapBtn setImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"download_map.png"</span>] forState:<span class="built_in">UIControlStateNormal</span>];  </div><div class="line">[<span class="keyword">self</span>.downloadMapBtn setNeedsDisplay];  </div><div class="line"></div><div class="line"></div><div class="line">&#125;);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div cla
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Swift2.3 to Swift3.0 迁移</title>
    <link href="http://yoursite.com/2016/11/14/Swift2-3-to-Swift3-0-%E8%BF%81%E7%A7%BB/"/>
    <id>http://yoursite.com/2016/11/14/Swift2-3-to-Swift3-0-迁移/</id>
    <published>2016-11-14T05:34:50.000Z</published>
    <updated>2016-11-14T11:10:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>4982个错误,下降到3973<br>因为项目需要，将iPad 和 iPhone 分别进行了迁移，iPhone从Swift2.3迁移到了Swift3.0， 而iPad则使用OC进行了重构。<br>在迁移中遇到了许多问题，以此记录解决过程。与小伙伴们分享。</p>
<p>我们在打开原有的Swift项目，使用Edit-&gt; Convert -&gt; Choose Swift Version 选择Swift3.0 选择自己的工程， next就可以了。</p>
<p>流程控制语句中的For循环，原有的C风格的for(;;)已经被废弃，Swift2.3 中 for in .. 中的 .. 也被替换成更加严谨的方式。<br>其实自增自减运算符用得最多的地方，还是在 for 循环部分。移除该运算符意味着 for 循环的特性也随之远去了，因为在 for-in 的世界中，循环控制语句与范围限制用不上该操作符。<br>for (i = 1; i &lt; 10; i++)<br>for i in i ..&lt; 10 {}<br>for (i = 1; i &lt;= 10; i++) {<br>print(i)<br>}<br>在 Swift 3 中，已经不允许这种写法了，而应该写为（注意闭区间范围的写法）：<br>for i in 1…10 {<br>print(i)<br>}<br>或者，你也可以使用 for-each 加闭包的写法（更多循环相关信息请看这）:<br>(1…10).forEach {<br>print($0)<br>}</p>
<p>CGPath也被更改为对象的调用方法，原有的CGPathMoveToPoint，CGPathAddArc 被替换，而且中间不允许存在nil，<br>Swift2.3<br>CGPathMoveToPoint(path, nil, circleBox.midX, circleBox.midY)<br>CGPathMoveToPoint(path, &amp;transform, circleBox.midX, circleBox.midY)<br>CGPathAddArc(path, &amp;transform, circleBox.midX, circleBox.midY, radius, startAngle <em> ChartUtils.Math.FDEG2RAD, endAngle </em> ChartUtils.Math.FDEG2RAD, false)<br>Swift3.0<br>path.move(to: CGPoint(x: circleBox.midX, y: circleBox.midY))<br>path.addArc(center: CGPoint(x:circleBox.midX, y: circleBox.midY), radius: innerRadius, startAngle: startAngle <em> ChartUtils.Math.FDEG2RAD, endAngle: endAngle </em> ChartUtils.Math.FDEG2RAD, clockwise: false)</p>
<p>CGContextEOFillPath(context)<br>被我替换成为<br>context.fillPath(using: .evenOdd)<br>也不知道对不对。。</p>
<p>CGContextSetLineDash(context, dataSet.lineDashPhase, dataSet.lineDashLengths, dataSet.lineDashLengths.count)<br>context.setLineDash(phase: dataSet.lineDashPhase, lengths: dataSet.lineDashLengths)</p>
<p>dispatch_after(0, mainQueue) { () -&gt; Void in…<br>mainQueue.asyncAfter(deadline: DispatchTime.now()) { () -&gt; Void in…</p>
<p>dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (Int64)(2 * NSEC_PER_SEC)),mainQueue, { () -&gt; Void in<br>mainQueue.asyncAfter(deadline: DispatchTime.now() + 2, execute: { () -&gt; Void in</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;4982个错误,下降到3973&lt;br&gt;因为项目需要，将iPad 和 iPhone 分别进行了迁移，iPhone从Swift2.3迁移到了Swift3.0， 而iPad则使用OC进行了重构。&lt;br&gt;在迁移中遇到了许多问题，以此记录解决过程。与小伙伴们分享。&lt;/p&gt;
&lt;p&gt;我们
    
    </summary>
    
    
      <category term="Swift3" scheme="http://yoursite.com/tags/Swift3/"/>
    
  </entry>
  
  <entry>
    <title>客户端 HTTP请求的Header信息</title>
    <link href="http://yoursite.com/2016/11/11/%E5%AE%A2%E6%88%B7%E7%AB%AF-HTTP%E8%AF%B7%E6%B1%82%E7%9A%84Header%E4%BF%A1%E6%81%AF/"/>
    <id>http://yoursite.com/2016/11/11/客户端-HTTP请求的Header信息/</id>
    <published>2016-11-11T02:58:09.000Z</published>
    <updated>2017-05-08T09:43:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="客户端HTTP请求的Header信息"><a href="#客户端HTTP请求的Header信息" class="headerlink" title="客户端HTTP请求的Header信息"></a>客户端HTTP请求的Header信息</h1><p>HTTP（HyperTextTransferProtocol）即超文本传输协议，目前网页传输的的通用协议。HTTP协议采用了请求/响应模型，浏览器或其他客户端发出请求，服务器给与响应。就整个网络资源传输而言，包括message-header和message-body两部分。首先传递message- header，即http header消息 。http header 消息通常被分为4个部分：general  header, request header, response header, entity header。但是这种分法就理解而言，感觉界限不太明确。根据维基百科对http header内容的组织形式，大体分为Request和Response两部分。<br><a id="more"></a></p>
<h2 id="1、HTTP请求方式"><a href="#1、HTTP请求方式" class="headerlink" title="1、HTTP请求方式"></a>1、HTTP请求方式</h2><h3 id="如下表："><a href="#如下表：" class="headerlink" title="如下表："></a>如下表：</h3><table>
<thead>
<tr>
<th>方 法</th>
<th>描 述</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>向Web服务器请求一个文件</td>
</tr>
<tr>
<td>POST</td>
<td>向Web服务器发送数据让Web服务器进行处理</td>
</tr>
<tr>
<td>PUT</td>
<td>向Web服务器发送数据并存储在Web服务器内部</td>
</tr>
<tr>
<td>HEAD</td>
<td>检查一个对象是否存在</td>
</tr>
<tr>
<td>DELETE</td>
<td>从Web服务器上删除一个文件</td>
</tr>
<tr>
<td>CONNECT</td>
<td>对通道提供支持</td>
</tr>
<tr>
<td>TRACE</td>
<td>跟踪到服务器的路径</td>
</tr>
<tr>
<td>OPTIONS</td>
<td>查询Web服务器的性能</td>
</tr>
</tbody>
</table>
<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><p>主要使用到“GET”和“POST”。</p>
<h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><p>POST /test/tupian/cm HTTP/1.1<br>分成三部分：<br>（1）POST：HTTP请求方式<br>（2）/test/tupian/cm：请求Web服务器的目录地址（或者指令）<br>（3）HTTP/1.1: URI（Uniform Resource Identifier，统一资源标识符）及其版本<br>备注：在Ajax中，对应method属性设置。</p>
<h2 id="2、Host"><a href="#2、Host" class="headerlink" title="2、Host"></a>2、Host</h2><p>说明：<br>请求的web服务器域名地址<br>实例：<br>    例如web请求URL：<a href="http://zjm-forum-test10.zjm.baidu.com:8088/test/tupian/cm" target="_blank" rel="external">http://zjm-forum-test10.zjm.baidu.com:8088/test/tupian/cm</a><br>    Host就为zjm-forum-test10.zjm.baidu.com:8088</p>
<h2 id="3、User-Agent"><a href="#3、User-Agent" class="headerlink" title="3、User-Agent"></a>3、User-Agent</h2><p>说明：<br>HTTP客户端运行的浏览器类型的详细信息。通过该头部信息，web服务器可以判断到当前HTTP请求的客户端浏览器类别。<br>实例：<br>    User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11</p>
<h2 id="4、Accept"><a href="#4、Accept" class="headerlink" title="4、Accept"></a>4、Accept</h2><p>说明：<br>指定客户端能够接收的内容类型，内容类型中的先后次序表示客户端接收的先后次序。<br>实例：<br>    例如：Accept:text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,<em>/</em>;<br>q=0.5<br>备注：在Prototyp（1.5）的Ajax代码封装中，将Accept默认设置为“text/javascript, text/html, application/xml, text/xml, <em>/</em>”。<br>这是因为Ajax默认获取服务器返回的Json数据模式。<br>在Ajax代码中，可以使用XMLHttpRequest 对象中setRequestHeader函数方法来动态设置这些Header信息。</p>
<h2 id="5、Accept-Language"><a href="#5、Accept-Language" class="headerlink" title="5、Accept-Language"></a>5、Accept-Language</h2><p>说明：指定HTTP客户端浏览器用来展示返回信息所优先选择的语言。<br>实例：Accept-Language: zh-cn,zh;q=0.5<br>         这里默认为中文。</p>
<h2 id="6、Accept-Encoding"><a href="#6、Accept-Encoding" class="headerlink" title="6、Accept-Encoding"></a>6、Accept-Encoding</h2><p>说明：<br>指定客户端浏览器可以支持的web服务器返回内容压缩编码类型。表示允许服务器在将输出内容发送到客户端以前进行压缩，以节约带宽。而这里设置的就是客户端浏览器所能够支持的返回压缩格式。<br>实例：Accept-Encoding: gzip,deflate<br>备注：其实在百度很多产品线中，apache在给客户端返回页面数据之前，将数据以gzip格式进行压缩。<br><a href="http://man.chinaunix.net/newsoft/ApacheMenual_CN_2.2new/mod/mod_deflate.html" target="_blank" rel="external">另外有关deflate压缩介绍</a></p>
<h2 id="7、Accept-Charset"><a href="#7、Accept-Charset" class="headerlink" title="7、Accept-Charset"></a>7、Accept-Charset</h2><p>说明：浏览器可以接受的字符编码集。<br>实例：Accept-Charset: gb2312,utf-8;q=0.7,*;q=0.7</p>
<h2 id="8、Content-Type"><a href="#8、Content-Type" class="headerlink" title="8、Content-Type"></a>8、Content-Type</h2><p>说明：显示此HTTP请求提交的内容类型。一般只有post提交时才需要设置该属性。<br>实例：Content-type: application/x-www-form-urlencoded;charset:UTF-8<br>有关Content-Type属性值可以如下两种编码类型：<br>（1）“application/x-www-form-urlencoded”： 表单数据向服务器提交时所采用的编码类型，默认的缺省值就是“application/x-www-form-urlencoded”。 然而，在向服务器发送大量的文本、包含非ASCII字符的文本或二进制数据时这种编码方式效率很低。<br>（2）“multipart/form-data”： 在文件上载时，所使用的编码类型应当是“multipart/form-data”，它既可以发送文本数据，也支持二进制数据上载。<br>当提交为单单数据时，可以使用“application/x-www-form-urlencoded”；当提交的是文件时，就需要使用“multipart/form-data”编码类型。<br>在Content-Type属性当中还是指定提交内容的charset字符编码。一般不进行设置，它只是告诉web服务器post提交的数据采用的何种字符编码。<br>         一般在开发过程，是由前端工程与后端UI工程师商量好使用什么字符编码格式来post提交的，然后后端ui工程师按照固定的字符编码来解析提交的数据。所以这里设置的charset没有多大作用。</p>
<h2 id="9、Connection"><a href="#9、Connection" class="headerlink" title="9、Connection"></a>9、Connection</h2><p>说明：<br>表示是否需要持久连接。如果web服务器端看到这里的值为“Keep-Alive”，或者看到请求使用的是HTTP 1.1（HTTP 1.1默认进行持久连接），它就可以利用持久连接的优点，当页面包含多个元素时（例如Applet，图片），显著地减少下载所需要的时间。要实现这一点， web服务器需要在返回给客户端HTTP头信息中发送一个Content-Length（返回信息正文的长度）头，最简单的实现方法是：先把内容写入ByteArrayOutputStream，然 后在正式写出内容之前计算它的大小。</p>
<p>实例：<br>Connection: keep-alive</p>
<h2 id="10、Keep-Alive"><a href="#10、Keep-Alive" class="headerlink" title="10、Keep-Alive"></a>10、Keep-Alive</h2><p>说明：<br>         显示此HTTP连接的Keep-Alive时间。使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。<br>         以前HTTP请求是一站式连接，从HTTP/1.1协议之后，就有了长连接，即在规定的Keep-Alive时间内，连接是不会断开的。</p>
<p>实例：<br>Keep-Alive: 300</p>
<h2 id="11、cookie"><a href="#11、cookie" class="headerlink" title="11、cookie"></a>11、cookie</h2><p>说明：<br>         HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。</p>
<h2 id="12、Referer"><a href="#12、Referer" class="headerlink" title="12、Referer"></a>12、Referer</h2><p>说明：<br>包含一个URL，用户从该URL代表的页面出发访问当前请求的页面</p>
<h1 id="服务器端返回HTTP头部信息"><a href="#服务器端返回HTTP头部信息" class="headerlink" title="服务器端返回HTTP头部信息"></a>服务器端返回HTTP头部信息</h1><p>1、Content-Length<br>说明：表示web服务器返回消息正文的长度</p>
<p>2、Content-Type:<br>说明：返回数据的类型（例如text/html文本类型）和字符编码格式。<br>实例：Content-Type: text/html;charset=utf-8</p>
<p>3、Date<br>说明：显示当前的时间</p>
<p>4、Server<br>说明： 服务器类型</p>
<h1 id="Requests部分"><a href="#Requests部分" class="headerlink" title="Requests部分"></a>Requests部分</h1><table>
<thead>
<tr>
<th style="text-align:left">Header</th>
<th>解释</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Accept</td>
<td>指定客户端能够接收的内容类型</td>
<td>Accept:text/plain, text/html</td>
</tr>
<tr>
<td style="text-align:left">Accept-Charset</td>
<td>浏览器可以接受的字符编码集。</td>
<td>Accept-Charset: iso-8859-5</td>
</tr>
<tr>
<td style="text-align:left">Accept-Encoding</td>
<td>指定浏览器可以支持的web服务器返回内容压缩编码类型。</td>
<td>Accept-Encoding: compress, gzip</td>
</tr>
<tr>
<td style="text-align:left">Accept-Language</td>
<td>浏览器可接受的语言</td>
<td>Accept-Language: en,zh</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">Accept-Ranges</td>
<td>可以请求网页实体的一个或者多个子范围字段</td>
<td>Accept-Ranges: bytes</td>
</tr>
<tr>
<td style="text-align:left">Authorization</td>
<td>HTTP授权的授权证书</td>
<td>Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td>
</tr>
<tr>
<td style="text-align:left">Cache-Control</td>
<td>指定请求和响应遵循的缓存机制</td>
<td>Cache-Control: no-cache</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">Connection</td>
<td>表示是否需要持久连接。（HTTP 1.1默认进行持久连接）</td>
<td>Connection: close</td>
</tr>
<tr>
<td style="text-align:left">Cookie</td>
<td>HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。</td>
<td>Cookie: $Version=1; Skin=new;</td>
</tr>
<tr>
<td style="text-align:left">Content-Length</td>
<td>请求的内容长度</td>
<td>Content-Length: 348</td>
</tr>
<tr>
<td style="text-align:left">Content-Type</td>
<td>请求的与实体对应的MIME信息</td>
<td>Content-Type: application/x-www-form-urlencoded</td>
</tr>
<tr>
<td style="text-align:left">Date</td>
<td>请求发送的日期和时间</td>
<td>Date: Tue, 15 Nov 2010 08:12:31 GMT</td>
</tr>
<tr>
<td style="text-align:left">Expect</td>
<td>请求的特定的服务器行为</td>
<td>Expect: 100-continue</td>
</tr>
<tr>
<td style="text-align:left">From</td>
<td>发出请求的用户的Email</td>
<td>From: user@email.com</td>
</tr>
<tr>
<td style="text-align:left">Host</td>
<td>指定请求的服务器的域名和端口号</td>
<td>Host: www.zcmhi.com</td>
</tr>
<tr>
<td style="text-align:left">If-Match</td>
<td>只有请求内容与实体相匹配才有效</td>
<td>If-Match: “737060cd8c284d8af7ad3082f209582d”</td>
</tr>
<tr>
<td style="text-align:left">If-Modified-Since</td>
<td>如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码</td>
<td>If-Modified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td>
</tr>
<tr>
<td style="text-align:left">If-None-Match</td>
<td>如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变</td>
<td>If-None-Match: “737060cd8c284d8af7ad3082f209582d”</td>
</tr>
<tr>
<td style="text-align:left">If-Range</td>
<td>如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。参数也为Etag</td>
<td>If-Range: “737060cd8c284d8af7ad3082f209582d”</td>
</tr>
<tr>
<td style="text-align:left">If-Unmodified-Since</td>
<td>只在实体在指定时间之后未被修改才请求成功</td>
<td>If-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td>
</tr>
<tr>
<td style="text-align:left">Max-Forwards</td>
<td>限制信息通过代理和网关传送的时间</td>
<td>Max-Forwards: 10</td>
</tr>
<tr>
<td style="text-align:left">Pragma</td>
<td>用来包含实现特定的指令</td>
<td>Pragma: no-cache</td>
</tr>
<tr>
<td style="text-align:left">Proxy-Authorization</td>
<td>连接到代理的授权证书</td>
<td>Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td>
</tr>
<tr>
<td style="text-align:left">Range</td>
<td>只请求实体的一部分，指定范围</td>
<td>Range: bytes=500-999</td>
</tr>
<tr>
<td style="text-align:left">Referer</td>
<td>先前网页的地址，当前请求网页紧随其后,即来路</td>
<td>Referer: <a href="http://www.zcmhi.com/archives/71.html" target="_blank" rel="external">http://www.zcmhi.com/archives/71.html</a></td>
</tr>
<tr>
<td style="text-align:left">TE</td>
<td>客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息</td>
<td>TE: trailers,deflate;q=0.5</td>
</tr>
<tr>
<td style="text-align:left">Upgrade</td>
<td>向服务器指定某种传输协议以便服务器进行转换（如果支持）</td>
<td>Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</td>
</tr>
<tr>
<td style="text-align:left">User-Agent</td>
<td>User-Agent的内容包含发出请求的用户信息</td>
<td>User-Agent: Mozilla/5.0 (Linux; X11)</td>
</tr>
<tr>
<td style="text-align:left">Via</td>
<td>通知中间网关或代理服务器地址，通信协议</td>
<td>Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)</td>
</tr>
<tr>
<td style="text-align:left">Warning</td>
<td>关于消息实体的警告信息</td>
<td>Warn: 199 Miscellaneous warning</td>
</tr>
</tbody>
</table>
<h1 id="Responses-部分"><a href="#Responses-部分" class="headerlink" title="Responses 部分"></a>Responses 部分</h1><table>
<thead>
<tr>
<th>Header</th>
<th>解释</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Accept-Ranges</td>
<td>表明服务器是否支持指定范围请求及哪种类型的分段请求</td>
<td>Accept-Ranges: bytes</td>
</tr>
<tr>
<td>Age</td>
<td>从原始服务器到代理缓存形成的估算时间（以秒计，非负）</td>
<td>Age: 12</td>
</tr>
<tr>
<td>Allow</td>
<td>对某网络资源的有效的请求行为，不允许则返回405</td>
<td>Allow: GET, HEAD</td>
</tr>
<tr>
<td>Cache-Control</td>
<td>告诉所有的缓存机制是否可以缓存及哪种类型</td>
<td>Cache-Control: no-cache</td>
</tr>
<tr>
<td>Content-Encoding</td>
<td>web服务器支持的返回内容压缩编码类型。</td>
<td>Content-Encoding: gzip</td>
</tr>
<tr>
<td>Content-Language</td>
<td>响应体的语言</td>
<td>Content-Language: en,zh</td>
</tr>
<tr>
<td>Content-Length</td>
<td>响应体的长度</td>
<td>Content-Length: 348</td>
</tr>
<tr>
<td>Content-Location</td>
<td>请求资源可替代的备用的另一地址</td>
<td>Content-Location: /index.htm</td>
</tr>
<tr>
<td>Content-MD5</td>
<td>返回资源的MD5校验值</td>
<td>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==</td>
</tr>
<tr>
<td>Content-Range</td>
<td>在整个返回体中本部分的字节位置</td>
<td>Content-Range: bytes 21010-47021/47022</td>
</tr>
<tr>
<td>Content-Type</td>
<td>返回内容的MIME类型</td>
<td>Content-Type: text/html; charset=utf-8</td>
</tr>
<tr>
<td>Date</td>
<td>原始服务器消息发出的时间</td>
<td>Date: Tue, 15 Nov 2010 08:12:31 GMT</td>
</tr>
<tr>
<td>ETag</td>
<td>请求变量的实体标签的当前值</td>
<td>ETag: “737060cd8c284d8af7ad3082f209582d”</td>
</tr>
<tr>
<td>Expires</td>
<td>响应过期的日期和时间</td>
<td>Expires: Thu, 01 Dec 2010 16:00:00 GMT</td>
</tr>
<tr>
<td>Last-Modified</td>
<td>请求资源的最后修改时间</td>
<td>Last-Modified: Tue, 15 Nov 2010 12:45:26 GMT</td>
</tr>
<tr>
<td>Location</td>
<td>用来重定向接收方到非请求URL的位置来完成请求或标识新的资源</td>
<td>Location: <a href="http://www.zcmhi.com/archives/94.html" target="_blank" rel="external">http://www.zcmhi.com/archives/94.html</a></td>
</tr>
<tr>
<td>Pragma</td>
<td>包括实现特定的指令，它可应用到响应链上的任何接收方</td>
<td>Pragma: no-cache</td>
</tr>
<tr>
<td>Proxy-Authenticate</td>
<td>它指出认证方案和可应用到代理的该URL上的参数</td>
<td>Proxy-Authenticate: Basic</td>
</tr>
<tr>
<td>refresh</td>
<td>应用于重定向或一个新的资源被创造，在5秒之后重定向（由网景提出，被大部分浏览器支持）</td>
<td>Refresh: 5; url=<a href="http://www.zcmhi.com/archives/94.html" target="_blank" rel="external">http://www.zcmhi.com/archives/94.html</a></td>
</tr>
<tr>
<td>Retry-After</td>
<td>如果实体暂时不可取，通知客户端在指定时间之后再次尝试</td>
<td>Retry-After: 120</td>
</tr>
<tr>
<td>Server</td>
<td>web服务器软件名称</td>
<td>Server: Apache/1.3.27 (Unix) (Red-Hat/Linux)</td>
</tr>
<tr>
<td>Set-Cookie</td>
<td>设置Http Cookie</td>
<td>Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</td>
</tr>
<tr>
<td>Trailer</td>
<td>指出头域在分块传输编码的尾部存在</td>
<td>Trailer: Max-Forwards</td>
</tr>
<tr>
<td>Transfer-Encoding</td>
<td>文件传输编码</td>
<td>Transfer-Encoding:chunked</td>
</tr>
<tr>
<td>Vary</td>
<td>告诉下游代理是使用缓存响应还是从原始服务器请求</td>
<td>Vary: *</td>
</tr>
<tr>
<td>Via</td>
<td>告知代理客户端响应是通过哪里发送的</td>
<td>Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)</td>
</tr>
<tr>
<td>Warning</td>
<td>警告实体可能存在的问题</td>
<td>Warning: 199 Miscellaneous warning</td>
</tr>
<tr>
<td>WWW-Authenticate</td>
<td>表明客户端请求实体应该使用的授权方案</td>
<td>WWW-Authenticate: Basic</td>
</tr>
</tbody>
</table>
<p>更多参见 <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html" target="_blank" rel="external">w3c官网</a></p>
<h1 id="引用："><a href="#引用：" class="headerlink" title="引用："></a>引用：</h1><p>1.<a href="http://kb.cnblogs.com/page/92320/" target="_blank" rel="external">Http header详解</a>   <a href="http://www.zcmhi.com/archives/71.html" target="_blank" rel="external">原文链接</a><br>2.<a href="http://technique-digest.iteye.com/blog/1174581" target="_blank" rel="external">客户端HTTP请求的Header信息</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;客户端HTTP请求的Header信息&quot;&gt;&lt;a href=&quot;#客户端HTTP请求的Header信息&quot; class=&quot;headerlink&quot; title=&quot;客户端HTTP请求的Header信息&quot;&gt;&lt;/a&gt;客户端HTTP请求的Header信息&lt;/h1&gt;&lt;p&gt;HTTP（HyperTextTransferProtocol）即超文本传输协议，目前网页传输的的通用协议。HTTP协议采用了请求/响应模型，浏览器或其他客户端发出请求，服务器给与响应。就整个网络资源传输而言，包括message-header和message-body两部分。首先传递message- header，即http header消息 。http header 消息通常被分为4个部分：general  header, request header, response header, entity header。但是这种分法就理解而言，感觉界限不太明确。根据维基百科对http header内容的组织形式，大体分为Request和Response两部分。&lt;br&gt;
    
    </summary>
    
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>UICollectionView reloadData无法更新视图问题</title>
    <link href="http://yoursite.com/2016/11/04/UICollectionView-reloadData%E6%97%A0%E6%B3%95%E6%9B%B4%E6%96%B0%E7%9A%84%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/11/04/UICollectionView-reloadData无法更新的奇怪问题/</id>
    <published>2016-11-04T09:46:11.000Z</published>
    <updated>2016-11-04T09:51:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>近来偶尔用到UICollectionView，对于九宫格之类的布局还是很方便的。但使用过程中却出现一个奇怪的问题，暂时没时间仔细研究。先记录下来。<br>在UICollectionViewCell中定义一个图标和一个文本，显示的效果是典型的九宫格。默认会有几条数据，点击最后一个cell会弹出编辑框添加自定义的cell。使用过程中出现的问题时，在第二行最后一个添加的自定义cell，图标怎么都改变不了。如果将整个view切换一下，显示又变成正常了。<br>查找原因是因为，[CollectionView reloadData]方法未调用刷新，网上搜索，也看到有人问类似的问题。有些人给出的解决办法是加一个空的UIView在上面，强制整个collection view刷新。但感觉不是好的办法。后来，尝试使用指定项更新，发现问题解决了：<br>以下两种方法均有效：<br>[self.collectionView reloadItemsAtIndexPaths:@[[NSIndexPath indexPathForRow:7 inSection:0]]];<br>或者<br>[self.collectionView reloadSections:[NSIndexSet indexSetWithIndex:0]];<br>至于为什么reloadData会无效。这个暂时留下，等有空的时候再研究一下其原理。或者有牛人知道也请不吝赐教。<br>另外，这情况也提醒我们，能确定加载某个子项（cell）的时候，还是调用直接刷新指定项更好。一来效率高，二来可以避免莫名其妙的现象出现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近来偶尔用到UICollectionView，对于九宫格之类的布局还是很方便的。但使用过程中却出现一个奇怪的问题，暂时没时间仔细研究。先记录下来。&lt;br&gt;在UICollectionViewCell中定义一个图标和一个文本，显示的效果是典型的九宫格。默认会有几条数据，点击最后
    
    </summary>
    
    
      <category term="iOS UICollectionView" scheme="http://yoursite.com/tags/iOS-UICollectionView/"/>
    
  </entry>
  
  <entry>
    <title>MacOS-Sierra注册机无法运行的解决办法</title>
    <link href="http://yoursite.com/2016/11/01/MacOS-Sierra%E6%B3%A8%E5%86%8C%E6%9C%BA%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2016/11/01/MacOS-Sierra注册机无法运行的解决办法/</id>
    <published>2016-11-01T02:46:24.000Z</published>
    <updated>2017-05-08T09:54:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.sdifenzhou.com/wp-content/uploads/2016/09/Keygen.jpg" alt="image1"><br>这段时间以来，小子陆续收到朋友们的留言，因为升级到了macOS Sierra导致所有的Keygen破解程序都无法正常打开了。<br>小子之前因为还停留在OS X 10.11.6，所以更多给朋友们的意见是等待软件更新或者系统更新来兼容，这里小子有时间也更新到了macOS Sierra，根据大家反馈的情况，小子给出一个临时解决macOS Sierra使用注册机的办法。<br><a id="more"></a></p>
<p><img src="http://www.sdifenzhou.com/wp-content/uploads/2016/09/keygen1.jpg" alt="image2"><br>小子简单说明下macOS Sierra下使用注册机的方法：<br>1.右键注册机（这里以“Keygen.app”）显示包内容-Contents-MacOS；<br>2.打开应用程序-实用工具-终端；<br>3.将第一步文件夹内的“patcher”拖入第二步的终端中，再将应用程序中需要破解的程序继续拖入终端中（终端中的格式不要手动去改动），接着，继续将“eyePatch”拖入终端，再次将应用程序中需要破解的程序拖入终端，最后回车即可完成注册；<br>4.第三步的操作小子以命令的方式显示为：patcher 程序 eyePatch 程序 回车；<br>5.Have done！<br><img src="http://www.sdifenzhou.com/wp-content/uploads/2016/09/CORE-Keygen.jpg" alt="image3"><br>另外，有朋友提到CORE KeyGen也无法正常使用，小子这里也一并分享上临时解决的方法：<br>1.下载<a href="https://pan.baidu.com/s/1jIg6bSa" target="_blank" rel="external">upx.out程序</a>并解压缩;<br>2.打开应用程序-实用工具-终端，将解压缩得到的“upx.out”拖入终端，之后输入-d，再空格；<br>3.3.将dmg镜像中的“CORE Keygen.app”拷贝到任意位置（小子将其放置桌面），同样，右键“CORE Keygen”显示包内容-Contents-MacOS，将其中的“CORE Keygen”继续拖入第二步的终端中；<br>4.4.回车，终端中显示“Unpacked 1 file.”表示成功，这时桌面的“CORE Keygen.app”已经可以在MacOS Sierra下正常打开了；<br>5.以上操作小子总结命令如下：upx.out -d CORE Keygen 回车；<br>6.Have done！<br>转载声明：本文转载自：<a href="http://www.sdifenzhou.com/macossierrakeygen.html" target="_blank" rel="external">史蒂芬周的博客</a>：<br>`</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.sdifenzhou.com/wp-content/uploads/2016/09/Keygen.jpg&quot; alt=&quot;image1&quot;&gt;&lt;br&gt;这段时间以来，小子陆续收到朋友们的留言，因为升级到了macOS Sierra导致所有的Keygen破解程序都无法正常打开了。&lt;br&gt;小子之前因为还停留在OS X 10.11.6，所以更多给朋友们的意见是等待软件更新或者系统更新来兼容，这里小子有时间也更新到了macOS Sierra，根据大家反馈的情况，小子给出一个临时解决macOS Sierra使用注册机的办法。&lt;br&gt;
    
    </summary>
    
    
      <category term="MacOS" scheme="http://yoursite.com/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS8中使用UIAlertController</title>
    <link href="http://yoursite.com/2016/10/18/iOS8%E4%B8%AD%E4%BD%BF%E7%94%A8UIAlertController/"/>
    <id>http://yoursite.com/2016/10/18/iOS8中使用UIAlertController/</id>
    <published>2016-10-18T06:51:30.000Z</published>
    <updated>2017-05-08T09:47:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.cocoachina.com/ios/20141126/10320.html" target="_blank" rel="external">http://www.cocoachina.com/ios/20141126/10320.html</a><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.cocoachina.com/ios/20141126/10320.html&quot;&gt;http://www.cocoachina.com/ios/20141126/10320.html&lt;/a&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>UIAlertController介绍</title>
    <link href="http://yoursite.com/2016/09/21/iOS-UIAlertController%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2016/09/21/iOS-UIAlertController介绍/</id>
    <published>2016-09-21T03:46:35.000Z</published>
    <updated>2017-05-08T09:52:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>UIAlertController 在iOS8以上的时候需要调用的方法， <a id="more"></a></p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (IOS8) &#123;</div><div class="line"><span class="built_in">UIAlertController</span> * alertController = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"获取照片"</span> message:<span class="literal">nil</span> preferredStyle:<span class="built_in">UIAlertControllerStyleActionSheet</span>];</div><div class="line"><span class="keyword">if</span> ([<span class="built_in">UIImagePickerController</span> isSourceTypeAvailable:<span class="built_in">UIImagePickerControllerSourceTypeCamera</span>]) &#123;</div><div class="line"><span class="built_in">UIAlertAction</span> * actionDefault = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"相机拍摄"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</div><div class="line">_pickerVC = [[<span class="built_in">UIImagePickerController</span> alloc] init];</div><div class="line">_pickerVC.delegate = <span class="keyword">self</span>;</div><div class="line">_pickerVC.allowsEditing = <span class="literal">NO</span>;</div><div class="line">_pickerVC.sourceType = <span class="built_in">UIImagePickerControllerSourceTypeCamera</span>;</div><div class="line">_pickerVC.showsCameraControls = <span class="literal">NO</span>;</div><div class="line">_pickerVC.cameraOverlayView = <span class="keyword">self</span>.userImagePickerView;</div><div class="line">[<span class="keyword">self</span> presentViewController:_pickerVC animated:<span class="literal">YES</span> completion:^&#123;&#125;];</div><div class="line">&#125;];</div><div class="line">[alertController addAction:actionDefault];</div><div class="line">&#125;</div><div class="line"><span class="built_in">UIAlertAction</span> * actionDefault = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"从相册获取"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</div><div class="line">_pickerVC = [[<span class="built_in">UIImagePickerController</span> alloc] init];</div><div class="line">_pickerVC.delegate = <span class="keyword">self</span>;</div><div class="line">_pickerVC.allowsEditing = <span class="literal">YES</span>;</div><div class="line">_pickerVC.sourceType = <span class="built_in">UIImagePickerControllerSourceTypePhotoLibrary</span>;</div><div class="line">[<span class="keyword">self</span> presentViewController:_pickerVC animated:<span class="literal">YES</span> completion:^&#123;&#125;];</div><div class="line">&#125;];</div><div class="line">[alertController addAction:actionDefault];</div><div class="line"></div><div class="line"><span class="built_in">UIAlertAction</span> * actionCancel = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"取消"</span> style:<span class="built_in">UIAlertActionStyleCancel</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;&#125;];</div><div class="line">[alertController addAction:actionCancel];</div><div class="line">[<span class="keyword">self</span> presentViewController:alertController animated: <span class="literal">YES</span> completion:^&#123;&#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="但是有的时候会报错"><a href="#但是有的时候会报错" class="headerlink" title="但是有的时候会报错"></a>但是有的时候会报错</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">*** Terminating app due to uncaught exception 'NSGenericException', reason: 'Your application has presented a UIAlertController (&lt;UIAlertController: 0x138d27780&gt;) of style UIAlertControllerStyleActionSheet. The modalPresentationStyle of a UIAlertController with this style is UIModalPresentationPopover. You must provide location information for this popover through the alert controller's popoverPresentationController. You must provide either a sourceView and sourceRect or a barButtonItem.  If this information is not known when you present the alert controller, you may provide it in the UIPopoverPresentationControllerDelegate method -prepareForPopoverPresentation.'</div><div class="line">*** First throw call stack:</div><div class="line">(0x182446db0 0x181aabf80 0x187eed268 0x187901fb0 0x1879000c8 0x1878530c8 0x187860a80 0x1875925a4 0x1823fc728 0x1823fa4cc 0x1823fa8fc 0x182324c50 0x183c0c088 0x18760a088 0x10005b0d4 0x181ec28b8)</div><div class="line">libc++abi.dylib: terminating with uncaught exception of type NSException</div></pre></td></tr></table></figure>
<h1 id="百度给出的翻译是"><a href="#百度给出的翻译是" class="headerlink" title="百度给出的翻译是"></a>百度给出的翻译是</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    终止应用程序由于未捕获的异常的nsgenericexception，原因：你的应用了<span class="built_in">UIAlertController</span>（&lt;&lt; uialertcontroller：<span class="number">0x138d27780</span> &gt;）风格uialertcontrollerstyleactionsheet。一个具有这种风格的modalpresentationstyle <span class="built_in">UIAlertController</span> <span class="built_in">UIModalPresentationPopover</span>。你必须通过报警控制器的popoverpresentationcontroller这个弹出提供位置信息。你必须提供一个sourceview和sourcerect或barbuttonitem。如果这个信息是不知道当你目前的警戒控制器，你可以在uipopoverpresentationcontrollerdelegate方法提供prepareforpopoverpresentation。”</div><div class="line">    第一次抛出调用堆栈：</div><div class="line">（<span class="number">0x182446db0</span> <span class="number">0x181aabf80</span> <span class="number">0x187eed268</span> <span class="number">0x187901fb0</span> <span class="number">0x1879000c8</span> <span class="number">0x1878530c8</span> <span class="number">0x187860a80</span> <span class="number">0x1875925a4</span> <span class="number">0x1823fc728</span> <span class="number">0x1823fa4cc</span> <span class="number">0x1823fa8fc</span> <span class="number">0x182324c50</span> <span class="number">0x183c0c088</span> <span class="number">0x18760a088</span> <span class="number">0x10005b0d4</span> <span class="number">0x181ec28b8</span>）</div><div class="line">libc + abi.dylib：同型nsexception未捕获的异常终止</div></pre></td></tr></table></figure>
<h1 id="原因就是"><a href="#原因就是" class="headerlink" title="原因就是"></a>原因就是</h1><pre><code>你没有给其添加源视图位置，也就是说，我们没有给视图添加一个位置用来显示。我们给其一个视图位置如下：
</code></pre><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIPopoverPresentationController</span> *popover = alertController.popoverPresentationController;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (popover) &#123;</div><div class="line"></div><div class="line">popover.sourceView = <span class="keyword">self</span>.view;</div><div class="line">popover.sourceRect = <span class="keyword">self</span>.view.bounds;</div><div class="line">popover.permittedArrowDirections = <span class="built_in">UIPopoverArrowDirectionAny</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UIAlertController 在iOS8以上的时候需要调用的方法，
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>UITextField的光标操作扩展</title>
    <link href="http://yoursite.com/2016/09/09/UITextField%E7%9A%84%E5%85%89%E6%A0%87%E6%93%8D%E4%BD%9C%E6%89%A9%E5%B1%95/"/>
    <id>http://yoursite.com/2016/09/09/UITextField的光标操作扩展/</id>
    <published>2016-09-09T05:38:26.000Z</published>
    <updated>2016-09-09T05:50:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在iOS开发中，有时候需要完全自主的定义键盘，用于完整的单词输入，例如计算机应用中，需要一次性的输入sin(，在移动光标时要完整的跳过sin(，在删除时也要完整的删除，这就需要对光标的位置进行精确控制，而iOS并没有相关的函数可以直接操作光标，只给出了选择某个区域的功能，本文将介绍基于区域选择设计的UITextField扩展，用于获取光标位置以及移动光标。<br><a id="more"></a></p>
<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><h1 id="光标位置的获取"><a href="#光标位置的获取" class="headerlink" title="光标位置的获取"></a>光标位置的获取</h1><p>在textField中，有一个属性称之为selectedTextRange，这个属性为UITextRange类型，包含[start,end)两个值，通过实验我们可以发现，在没有文字被选取时，start代表当前光标的位置，而end＝0；当有区域被选择时，start和end分别是选择的头和尾的光标位置，从0开始，并且不包含end，例如选择了0～3的位置，则start＝0，end＝4。</p>
<h1 id="光标的移动"><a href="#光标的移动" class="headerlink" title="光标的移动"></a>光标的移动</h1><p>通过setSelectedTextRange:方法可以设置选取范围，我们只要设置一个选取单个字符的范围，即可移动光标而不选中。</p>
<h1 id="关键属性"><a href="#关键属性" class="headerlink" title="关键属性"></a>关键属性</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 内容为[start,end)，无论是否有选取区域，start都描述了光标的位置。</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">readwrite</span>, <span class="keyword">copy</span>) <span class="built_in">UITextRange</span> *selectedTextRange;</div><div class="line"><span class="comment">// 文首和文尾的位置</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UITextPosition</span> *beginningOfDocument;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UITextPosition</span> *endOfDocument;</div></pre></td></tr></table></figure>
<h1 id="关键方法"><a href="#关键方法" class="headerlink" title="关键方法"></a>关键方法</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取以from为基准的to的偏移，例如abcde，光标在c后，则光标相对文尾的偏移为-2。</span></div><div class="line">- (<span class="built_in">NSInteger</span>)offsetFromPosition:(<span class="built_in">UITextPosition</span> *)from toPosition:(<span class="built_in">UITextPosition</span> *)toPosition;</div><div class="line"><span class="comment">// 获取以from为基准偏移offset的光标位置。</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UITextPosition</span> *)positionFromPosition:(<span class="built_in">UITextPosition</span> *)position offset:(<span class="built_in">NSInteger</span>)offset;</div><div class="line"><span class="comment">// 创建一个UITextRange</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UITextRange</span> *)textRangeFromPosition:(<span class="built_in">UITextPosition</span> *)fromPosition toPosition:(<span class="built_in">UITextPosition</span> *)toPosition;</div></pre></td></tr></table></figure>
<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>下面的代码为UITextField创建了一个分类(Category)，包含三个方法，分别用于获取光标位置、从当前位置偏移、从头偏移。</p>
<h2 id="Object-C"><a href="#Object-C" class="headerlink" title="Object-C"></a>Object-C</h2><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UITextField</span> (<span class="title">Extension</span>)</span></div><div class="line"></div><div class="line">- (<span class="built_in">NSInteger</span>)curOffset;</div><div class="line">- (<span class="keyword">void</span>)makeOffset:(<span class="built_in">NSInteger</span>)offset;</div><div class="line">- (<span class="keyword">void</span>)makeOffsetFromBeginning:(<span class="built_in">NSInteger</span>)offset;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="meta">#import <span class="meta-string">"UITextField+Extension.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UITextField</span> (<span class="title">Extension</span>)</span></div><div class="line"></div><div class="line">- (<span class="built_in">NSInteger</span>)curOffset&#123;</div><div class="line"></div><div class="line"><span class="comment">// 基于文首计算出到光标的偏移数值。</span></div><div class="line"><span class="keyword">return</span> [<span class="keyword">self</span> offsetFromPosition:<span class="keyword">self</span>.beginningOfDocument toPosition:<span class="keyword">self</span>.selectedTextRange.start];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)makeOffset:(<span class="built_in">NSInteger</span>)offset&#123;</div><div class="line"></div><div class="line"><span class="comment">// 实现原理是先获取一个基于文尾的偏移，然后加上要施加的偏移，再重新根据文尾计算位置，最后利用选取来实现光标定位。</span></div><div class="line"><span class="built_in">UITextRange</span> * selectedRange = [<span class="keyword">self</span> selectedTextRange];</div><div class="line"><span class="built_in">NSInteger</span> currentOffset = [<span class="keyword">self</span> offsetFromPosition:<span class="keyword">self</span>.endOfDocument toPosition:selectedRange.end];</div><div class="line">currentOffset += offset;</div><div class="line"><span class="built_in">UITextPosition</span> * newPos = [<span class="keyword">self</span> positionFromPosition:<span class="keyword">self</span>.endOfDocument offset:currentOffset];</div><div class="line"><span class="keyword">self</span>.selectedTextRange = [<span class="keyword">self</span> textRangeFromPosition:newPos toPosition:newPos];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)makeOffsetFromBeginning:(<span class="built_in">NSInteger</span>)offset&#123;</div><div class="line"></div><div class="line"><span class="comment">// 先把光标移动到文首，然后再调用上面实现的偏移函数。</span></div><div class="line"><span class="built_in">UITextPosition</span> * begin = <span class="keyword">self</span>.beginningOfDocument;</div><div class="line"><span class="built_in">UITextPosition</span> * start = [<span class="keyword">self</span> positionFromPosition:begin offset:<span class="number">0</span>];</div><div class="line"><span class="built_in">UITextRange</span>    * range = [<span class="keyword">self</span> textRangeFromPosition:start toPosition:start];</div><div class="line">[<span class="keyword">self</span> setSelectedTextRange:range];</div><div class="line">[<span class="keyword">self</span> makeOffset:offset];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> pos = textview.selectedRange.location</div><div class="line"></div><div class="line"><span class="comment">// 基于文首计算出到光标的偏移数值。</span></div><div class="line"><span class="keyword">let</span> position = textview.offsetFromPosition(textview.beginningOfDocument, toPosition: (textview.selectedTextRange?.start)!)</div><div class="line"></div><div class="line"><span class="comment">//赋值</span></div><div class="line">textview.text.insertContentsOf(str.characters, at:textview.text!.startIndex.advancedBy(pos))</div><div class="line">ds!.symptom[<span class="keyword">self</span>.pos!].content = textview.text<span class="comment">//这里是把数据源同步到ds 中由DS自己做上传的工作//gho这里是textField拼接的过程</span></div><div class="line"></div><div class="line"><span class="comment">//移动到文首 再调用上面函数</span></div><div class="line"><span class="keyword">let</span> begin = textview.beginningOfDocument;</div><div class="line"><span class="keyword">let</span> start = textview .positionFromPosition(begin, offset: <span class="number">0</span>);</div><div class="line"><span class="keyword">let</span> range = textview.textRangeFromPosition(start!, toPosition: start!)</div><div class="line">textview.selectedTextRange = range;</div><div class="line"></div><div class="line"><span class="comment">// 实现原理是先获取一个基于文尾的偏移，然后加上要施加的偏移，再重新根据文尾计算位置，最后利用选取来实现光标定位。</span></div><div class="line"><span class="keyword">let</span> selectedRange = textview.selectedTextRange;</div><div class="line"><span class="keyword">var</span> currentoffset = textview.offsetFromPosition((textview.endOfDocument), toPosition: (selectedRange?.end)!)</div><div class="line">currentoffset = currentoffset + position + str.characters.<span class="built_in">count</span>;</div><div class="line"><span class="keyword">let</span> newPos = textview.positionFromPosition(textview.endOfDocument, offset: currentoffset)</div><div class="line">textview.selectedTextRange = textview.textRangeFromPosition(newPos!, toPosition: newPos!)</div></pre></td></tr></table></figure>
<p><a href="http://blog.csdn.net/xyt8023y/article/details/48879985" target="_blank" rel="external">原文</a></p>
<h1 id="Extention"><a href="#Extention" class="headerlink" title="Extention"></a>Extention</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"UITextField+ExtentRange.h"</span></span></div></pre></td></tr></table></figure>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span>  </span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UITextField</span> (<span class="title">ExtentRange</span>)  </span></div><div class="line"></div><div class="line">- (<span class="built_in">NSRange</span>) selectedRange;  </div><div class="line">- (<span class="keyword">void</span>) setSelectedRange:(<span class="built_in">NSRange</span>) range;  </div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"UITextField+ExtentRange.h"</span>  </span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UITextField</span> (<span class="title">ExtentRange</span>)  </span></div><div class="line"></div><div class="line">- (<span class="built_in">NSRange</span>) selectedRange  </div><div class="line">&#123;  </div><div class="line"><span class="built_in">UITextPosition</span> * beginning      = <span class="keyword">self</span>.beginningOfDocument;  </div><div class="line"></div><div class="line"><span class="built_in">UITextRange</span>    * selectedRange  = <span class="keyword">self</span>.selectedTextRange;  </div><div class="line"><span class="built_in">UITextPosition</span> * selectionStart = selectedRange.start;  </div><div class="line"><span class="built_in">UITextPosition</span> * selectionEnd   = selectedRange.end;  </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="built_in">NSInteger</span> location = [<span class="keyword">self</span> offsetFromPosition:beginning toPosition:selectionStart];  </div><div class="line"><span class="keyword">const</span> <span class="built_in">NSInteger</span> length = [<span class="keyword">self</span> offsetFromPosition:selectionStart toPosition:selectionEnd];  </div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="built_in">NSMakeRange</span>(location, length);  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">- (<span class="keyword">void</span>) setSelectedRange:(<span class="built_in">NSRange</span>) range  <span class="comment">// 备注：UITextField必须为第一响应者才有效  </span></div><div class="line">&#123;  </div><div class="line"><span class="built_in">UITextPosition</span> * beginning      = <span class="keyword">self</span>.beginningOfDocument;  </div><div class="line"></div><div class="line"><span class="built_in">UITextPosition</span> * startPosition  = [<span class="keyword">self</span> positionFromPosition:beginning offset:range.location];  </div><div class="line"><span class="built_in">UITextPosition</span> * endPosition    = [<span class="keyword">self</span> positionFromPosition:beginning offset:range.location + range.length];  </div><div class="line"><span class="built_in">UITextRange</span>    * selectionRange = [<span class="keyword">self</span> textRangeFromPosition:startPosition toPosition:endPosition];  </div><div class="line"></div><div class="line">[<span class="keyword">self</span> setSelectedTextRange:selectionRange];  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;在iOS开发中，有时候需要完全自主的定义键盘，用于完整的单词输入，例如计算机应用中，需要一次性的输入sin(，在移动光标时要完整的跳过sin(，在删除时也要完整的删除，这就需要对光标的位置进行精确控制，而iOS并没有相关的函数可以直接操作光标，只给出了选择某个区域的功能，本文将介绍基于区域选择设计的UITextField扩展，用于获取光标位置以及移动光标。&lt;br&gt;
    
    </summary>
    
    
      <category term="textfield   ios   oc   光标   offset" scheme="http://yoursite.com/tags/textfield-ios-oc-%E5%85%89%E6%A0%87-offset/"/>
    
  </entry>
  
  <entry>
    <title>Swift2.0中的Sting 的基本操作</title>
    <link href="http://yoursite.com/2016/09/09/Swift2-0%E4%B8%AD%E7%9A%84Sting-%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2016/09/09/Swift2-0中的Sting-的基本操作/</id>
    <published>2016-09-08T17:19:03.000Z</published>
    <updated>2016-09-09T01:38:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Swift中的字符串，第二篇，基本操作。其他的几篇传送门（GitHub打不开链接的同学请自行把地址github改成gitcafe，或者直接去归档里找:-P）：</p>
<p><a href="https://conanwhf.github.com/2015/12/03/Swift_String_1/" target="_blank" rel="external">Swift2.0 中的String（一）：常用属性</a><br><a href="https://conanwhf.github.com/2015/12/03/Swift_String_2/" target="_blank" rel="external">Swift2.0 中的String（二）：基本操作</a><br><a href="https://conanwhf.github.com/2015/12/03/Swift_String_3/" target="_blank" rel="external">Swift2.0 中的String（三）：类型转换</a><br>编码转换(TBD)<br>我的练习源代码可以在<a href="https://github.com/conanwhf/swiftplayground/tree/master/String.playground" target="_blank" rel="external">这里</a>看到<a id="more"></a><br>首先，我们要记得使用字符串最常用的两个参数：下标(Index)和范围(Range)，几乎所有API都要用到它们<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> offset = str.startIndex.advancedBy(<span class="number">2</span>)<span class="comment">// offset: 3rd char</span></div><div class="line"><span class="keyword">let</span> range  = <span class="type">Range</span>(start: str.startIndex.advancedBy(<span class="number">3</span>), end: str.endIndex.advancedBy(-<span class="number">2</span>))<span class="comment">// range: 3..&lt;6, "345"</span></div></pre></td></tr></table></figure></p>
<h1 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> n      = <span class="type">Int</span>(str)!</div><div class="line"><span class="type">String</span>(<span class="string">"the number is \(n)"</span>)</div><div class="line"><span class="type">String</span>(format:<span class="string">"%.2f,  %i"</span>, <span class="number">9.1</span>, <span class="number">304</span>)</div></pre></td></tr></table></figure>
<h1 id="内容反转"><a href="#内容反转" class="headerlink" title="内容反转"></a>内容反转</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">String</span>(str.characters.<span class="built_in">reverse</span>())</div></pre></td></tr></table></figure>
<h1 id="删除和部分删除"><a href="#删除和部分删除" class="headerlink" title="删除和部分删除"></a>删除和部分删除</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">str.removeRange(range)</div><div class="line">str.removeAtIndex(offset)</div><div class="line"><span class="type">String</span>(str.characters.<span class="built_in">dropFirst</span>())</div><div class="line"><span class="type">String</span>(str.characters.<span class="built_in">dropFirst</span>(<span class="number">3</span>))</div><div class="line"><span class="type">String</span>(str.characters.<span class="built_in">dropLast</span>())</div><div class="line"><span class="type">String</span>(str.characters.<span class="built_in">dropLast</span>(<span class="number">3</span>))</div><div class="line"><span class="comment">//以上对character的操作不改变原来的值！</span></div><div class="line"><span class="comment">// 删除头尾空白字符</span></div><div class="line"><span class="string">"     I love you "</span>.stringByTrimmingCharactersInSet(<span class="type">NSCharacterSet</span>.whitespaceCharacterSet())</div><div class="line"><span class="comment">// 删除头尾字符集</span></div><div class="line"><span class="string">" I love you, too!"</span>.stringByTrimmingCharactersInSet(<span class="type">NSCharacterSet</span>(charactersInString: <span class="string">",. !"</span>))</div><div class="line"><span class="comment">//清空</span></div><div class="line">str.removeAll()</div></pre></td></tr></table></figure>
<h1 id="获取固定位置的子串"><a href="#获取固定位置的子串" class="headerlink" title="获取固定位置的子串"></a>获取固定位置的子串</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">str.substringToIndex(offset)</div><div class="line">str.substringFromIndex(offset)</div><div class="line">str.substringWithRange(range)</div><div class="line">str[range]</div></pre></td></tr></table></figure>
<h1 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">st         = <span class="string">"&lt;123, test2,???&gt;   &lt;测试: 数据  .&gt;"</span></div><div class="line"><span class="comment">// 用固定字符分割</span></div><div class="line">str.componentsSeparatedByString(<span class="string">" "</span>)</div><div class="line"><span class="comment">// 用固定字符集分割</span></div><div class="line">str.componentsSeparatedByCharactersInSet(<span class="type">NSCharacterSet</span>(charactersInString: <span class="string">", ."</span>))</div></pre></td></tr></table></figure>
<h1 id="过滤-查找替换"><a href="#过滤-查找替换" class="headerlink" title="过滤/查找替换"></a>过滤/查找替换</h1><p>使用替换字符串的API，让替换的目标字符串为空即为过滤<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 替换固定位置子串</span></div><div class="line">str.stringByReplacingCharactersInRange(range, withString: <span class="string">"!!!"</span>)</div><div class="line"><span class="comment">// 查找所有匹配并替换/过滤</span></div><div class="line">str.stringByReplacingOccurrencesOfString(<span class="string">"???"</span>, withString: <span class="string">"~"</span>)</div><div class="line">str.stringByReplacingOccurrencesOfString(<span class="string">" "</span>, withString: <span class="string">""</span>, options: <span class="type">NSStringCompareOptions</span>.<span class="type">LiteralSearch</span>, range: <span class="literal">nil</span>)</div><div class="line"><span class="comment">// 过滤字符集合(分割后合并)</span></div><div class="line"><span class="keyword">let</span> arr    = str.componentsSeparatedByCharactersInSet(<span class="type">NSCharacterSet</span>(charactersInString:<span class="string">"-&lt;&gt;"</span>))</div><div class="line">arr.joinWithSeparator(<span class="string">""</span>)</div></pre></td></tr></table></figure></p>
<h1 id="合并-拼接"><a href="#合并-拼接" class="headerlink" title="合并/拼接"></a>合并/拼接</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">s1 + s2 + s3</div><div class="line">str.appendContentsOf(<span class="string">"123"</span>)</div><div class="line">str.stringByAppendingString(<span class="string">"000"</span>)         <span class="comment">//不改变原值！</span></div><div class="line">str.stringByAppendingFormat(<span class="string">"- num %d "</span>, <span class="number">100</span>)      <span class="comment">//不改变原值！</span></div><div class="line"><span class="comment">// 以固定字符串为分隔符拼接</span></div><div class="line">[str, str, str].joinWithSeparator(<span class="string">"\n"</span>)</div></pre></td></tr></table></figure>
<h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">str.insert(<span class="string">" "</span>, atIndex: offset)</div><div class="line">str.insertContentsOf(<span class="string">" hello"</span>.characters, at: offset)</div><div class="line">str.replaceRange(<span class="type">Range</span>( start:offset, end: offset ), with: <span class="string">"???OK!!!"</span>)</div></pre></td></tr></table></figure>
<h1 id="判断前缀或后缀"><a href="#判断前缀或后缀" class="headerlink" title="判断前缀或后缀"></a>判断前缀或后缀</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str.hasPrefix(<span class="string">"01"</span>)</div><div class="line">str.hasSuffix(<span class="string">"567"</span>)</div></pre></td></tr></table></figure>
<h1 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s1.characters.elementsEqual(s2.characters)</div><div class="line">str.characters.elementsEqual(<span class="string">"01234567"</span>.characters)</div><div class="line">s1 == s2</div><div class="line"><span class="string">"111"</span> &lt; <span class="string">"222"</span></div></pre></td></tr></table></figure>
<h1 id="匹配字符串"><a href="#匹配字符串" class="headerlink" title="匹配字符串"></a>匹配字符串</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str.rangeOfString(<span class="string">"efg"</span>)</div><div class="line">str.rangeOfString(<span class="string">"efg"</span>, options: <span class="type">NSStringCompareOptions</span>.<span class="type">CaseInsensitiveSearch</span>, range: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<h1 id="固定位置的部分替换"><a href="#固定位置的部分替换" class="headerlink" title="固定位置的部分替换"></a>固定位置的部分替换</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str.replaceRange(range, with: <span class="string">"test_for_replace"</span>)</div><div class="line">str.stringByReplacingCharactersInRange(range, withString: <span class="string">"哈哈:smile:Tes\nt"</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swift中的字符串，第二篇，基本操作。其他的几篇传送门（GitHub打不开链接的同学请自行把地址github改成gitcafe，或者直接去归档里找:-P）：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://conanwhf.github.com/2015/12/03/Swift_String_1/&quot;&gt;Swift2.0 中的String（一）：常用属性&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://conanwhf.github.com/2015/12/03/Swift_String_2/&quot;&gt;Swift2.0 中的String（二）：基本操作&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://conanwhf.github.com/2015/12/03/Swift_String_3/&quot;&gt;Swift2.0 中的String（三）：类型转换&lt;/a&gt;&lt;br&gt;编码转换(TBD)&lt;br&gt;我的练习源代码可以在&lt;a href=&quot;https://github.com/conanwhf/swiftplayground/tree/master/String.playground&quot;&gt;这里&lt;/a&gt;看到
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NSString+Categary</title>
    <link href="http://yoursite.com/2016/09/07/NSString-Categary/"/>
    <id>http://yoursite.com/2016/09/07/NSString-Categary/</id>
    <published>2016-09-07T07:37:14.000Z</published>
    <updated>2017-04-19T18:05:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要写了一些项目中常用的方法，使用的是OC语言，后续会陆续补充Swift中的写法。<br><a id="more"></a></p>
<ol>
<li>NSData 与 NSString<br>NSData－&gt; NSString<br>NSString *aString = [[NSString alloc] initWithData:adataencoding:NSUTF8StringEncoding];</li>
</ol>
<p>NSString－&gt;NSData<br>NSString <em>aString = @”1234abcd”;<br>NSData </em>aData = [aString dataUsingEncoding: NSUTF8StringEncoding];</p>
<p>2.NSData 与 Byte<br>NSData－&gt; Byte数组<br>NSString <em>testString = @”1234567890”;<br>NSData </em>testData = [testString dataUsingEncoding: NSUTF8StringEncoding];<br>Byte <em>testByte = (Byte </em>)[testData bytes];<br>for(int i=0;i&lt;[testData length];i++)<br>printf(“testByte = %d\n”,testByte[i]);</p>
<p>Byte数组－&gt; NSData<br>Byte byte[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23};<br>NSData *adata = [[NSData alloc] initWithBytes:byte length:24];</p>
<p>Byte数组－&gt;16进制数<br>Byte <em>bytes = (Byte </em>)[aData bytes];<br>NSString <em>hexStr=@””;<br>for(int i=0;i&lt;[encryData length];i++)<br>{<br>NSString </em>newHexStr = [NSString stringWithFormat:@”%x”,bytes[i]&amp;0xff];///16进制数<br>if([newHexStr length]==1)<br>hexStr = [NSString stringWithFormat:@”%@0%@”,hexStr,newHexStr];<br>else<br>hexStr = [NSString stringWithFormat:@”%@%@”,hexStr,newHexStr];<br>}<br>NSLog(@”bytes 的16进制数为:%@”,hexStr);</p>
<p>16进制数－&gt;Byte数组<br>///// 将16进制数据转化成Byte 数组<br>NSString *hexString = @”3e435fab9c34891f”; //16进制字符串<br>int j=0;<br>Byte bytes[128];  ///3ds key的Byte 数组， 128位<br>for(int i=0;i&lt;[hexString length];i++)<br>{<br>int int_ch;  /// 两位16进制数转化后的10进制数</p>
<p>unichar hex_char1 = [hexString characterAtIndex:i]; ////两位16进制数中的第一位(高位<em>16)<br>int int_ch1;<br>if(hex_char1 &gt;= ‘0’ &amp;&amp; hex_char1 &lt;=’9’)<br>int_ch1 = (hex_char1-48)</em>16;   //// 0 的Ascll - 48<br>else if(hex_char1 &gt;= ‘A’ &amp;&amp; hex_char1 &lt;=’F’)<br>int_ch1 = (hex_char1-55)<em>16; //// A 的Ascll - 65<br>else<br>int_ch1 = (hex_char1-87)</em>16; //// a 的Ascll - 97<br>i++;</p>
<p>unichar hex_char2 = [hexString characterAtIndex:i]; ///两位16进制数中的第二位(低位)<br>int int_ch2;<br>if(hex_char2 &gt;= ‘0’ &amp;&amp; hex_char2 &lt;=’9’)<br>int_ch2 = (hex_char2-48); //// 0 的Ascll - 48<br>else if(hex_char1 &gt;= ‘A’ &amp;&amp; hex_char1 &lt;=’F’)<br>int_ch2 = hex_char2-55; //// A 的Ascll - 65<br>else<br>int_ch2 = hex_char2-87; //// a 的Ascll - 97</p>
<p>int_ch = int_ch1+int_ch2;<br>NSLog(@”int_ch=%d”,int_ch);<br>bytes[j] = int_ch;  ///将转化后的数放入Byte数组里<br>j++;<br>}<br>NSData *newData = [[NSData alloc] initWithBytes:bytes length:128];<br>NSLog(@”newData=%@”,newData);</p>
<ol>
<li>NSData 与 UIImage<br>NSData－&gt;UIImage<br>UIImage *aimage = [UIImage imageWithData: imageData];</li>
</ol>
<p>//例：从本地文件沙盒中取图片并转换为NSData<br>NSString <em>path = [[NSBundle mainBundle] bundlePath];<br>NSString </em>name = [NSString stringWithFormat:@”ceshi.png”];<br>NSString <em>finalPath = [path stringByAppendingPathComponent:name];<br>NSData </em>imageData = [NSData dataWithContentsOfFile: finalPath];<br>UIImage *aimage = [UIImage imageWithData: imageData];</p>
<p>UIImage－&gt; NSData<br>NSData *imageData = UIImagePNGRepresentation(aimae);</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要写了一些项目中常用的方法，使用的是OC语言，后续会陆续补充Swift中的写法。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS[利用Application Loader]App打包上架流程&#39;</title>
    <link href="http://yoursite.com/2016/09/06/iOS-%E5%88%A9%E7%94%A8Application-Loader-App%E6%89%93%E5%8C%85%E4%B8%8A%E6%9E%B6%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/09/06/iOS-利用Application-Loader-App打包上架流程/</id>
    <published>2016-09-05T17:58:16.000Z</published>
    <updated>2017-05-08T09:46:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何把App打包成ipa文件，然后App上架流程-利用Application-Loader"><a href="#如何把App打包成ipa文件，然后App上架流程-利用Application-Loader" class="headerlink" title="如何把App打包成ipa文件，然后App上架流程[利用Application Loader]"></a>如何把App打包成ipa文件，然后App上架流程[利用Application Loader]</h1><p><a href="http://www.jianshu.com/p/a885da9ce4a9" target="_blank" rel="external">本文详情</a> <a id="more"></a><br>在上一篇博客已经讲过上传项目了，但是有的时候，需要我们进行打包成ipa包到别的手机上跑（但是前提是，这个手机的UDID必须绑定到对应的开发者账号中，也就是证书也得是从同样的开发者账号申请下来的才可以）<br>假设你现在已经完成了证书，Bundle Identifier 和描述文件的配置（如果没有请参考这个博客中)<br><a href="http://www.jianshu.com/p/391f6102b4fb" target="_blank" rel="external">http://www.jianshu.com/p/391f6102b4fb</a><br>的前4步<br>然后配置工程<br>打开你项目工程 第一步，这里不能选择模拟器，选择iOS Device<br><img src="http://upload-images.jianshu.io/upload_images/1400788-d6282beac5d4aa67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image1"><br>如果不支持横屏，把这2个勾去掉<br><img src="http://upload-images.jianshu.io/upload_images/1400788-507035f0aeeba65f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image2"><br>然后查看版本号和构建版本号<br><img src="http://upload-images.jianshu.io/upload_images/1400788-c115b621232831e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image3"><br>然后配置发布证书<br><img src="http://upload-images.jianshu.io/upload_images/1400788-0ab593756949d975.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image4"><br>然后，如果这里没有黄色叹号，代表你的配置没问题，如果有，那就是证书和描述文件不匹配，或者描述文件里刚才选的Bundle和现在的工程的Bundle Identifier不一致，去develop.apple.com 上找到你的描述文件在确认下绑定的bundle Identifier和你工程是不是一样的？<br><img src="http://upload-images.jianshu.io/upload_images/1400788-6b105c3ef679946d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image5"><br>然后继续。断点，全局断点，僵尸模式等都要去掉。<br><img src="http://upload-images.jianshu.io/upload_images/1400788-c1d557383ff16be5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image6"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何把App打包成ipa文件，然后App上架流程-利用Application-Loader&quot;&gt;&lt;a href=&quot;#如何把App打包成ipa文件，然后App上架流程-利用Application-Loader&quot; class=&quot;headerlink&quot; title=&quot;如何把App打包成ipa文件，然后App上架流程[利用Application Loader]&quot;&gt;&lt;/a&gt;如何把App打包成ipa文件，然后App上架流程[利用Application Loader]&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/a885da9ce4a9&quot;&gt;本文详情&lt;/a&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UITableViewCell点击时子视图背景透明的解决办法</title>
    <link href="http://yoursite.com/2016/09/01/iOS-UITableViewCell%E7%82%B9%E5%87%BB%E6%97%B6%E5%AD%90%E8%A7%86%E5%9B%BE%E8%83%8C%E6%99%AF%E9%80%8F%E6%98%8E%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2016/09/01/iOS-UITableViewCell点击时子视图背景透明的解决办法/</id>
    <published>2016-09-01T02:57:46.000Z</published>
    <updated>2017-05-08T09:51:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>在iOS开发中，经常会使用到UITableView，对于自定义的UITableViewCell，当用户点击或者选中时，其上面的子视图会自动背景透明。<a id="more"></a></p>
<h1 id="iOS开发中UITableViewCell点击时子视图背景透明的解决方法"><a href="#iOS开发中UITableViewCell点击时子视图背景透明的解决方法" class="headerlink" title="iOS开发中UITableViewCell点击时子视图背景透明的解决方法"></a>iOS开发中UITableViewCell点击时子视图背景透明的解决方法</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在做iOS项目的开发中，UITableView(表视图)应用十分广泛。在进行自定义UITableViewCell(表示图的子视图)时，经常有小伙伴遇到这样的问题：<br>如果在UITableViewCell上面添加了带有背景颜色的控件，或者使用重绘来加载UITableViewCell时，如果用户点击UITableViewCell（UITableViewCell的is_select被激活），Cell上的子视图发生了奇怪的变化，各种空间背景色消失，重绘的东西也会消失，如果只在Cell上添加一个色块，那么我们看起来，这个色块好像莫名其妙的消失了一样。如下图所示：<br><img src="http://static.oschina.net/uploads/space/2016/0810/142921_gC8o_2340880.png" alt="image1"></p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>由于UITableViewCell的选中风格所致。如果开发者不进行设置，UITableViewCell中的selectionStyle属性默认风格为UITableViewCellSelectionStyleBlue。这时，如果用户点击或者选中了某个Cell，系统会自动将其上子视图的背景色改成透明以便统一Cell的整体背景颜色。开发者可以将其设置为UITableViewCellSelectionStyleNone枚举值来不适用任何Cell的选中风格。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>如果需要使用Cell的选中风格同时又不想让Cell上的子视图收到影响，我们可以继承UITableViewCell后,在其中覆写父类的如下两个方法:<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- setSelected:animated:</div><div class="line">- setHighlighted:animated:</div></pre></td></tr></table></figure></p>
<h2 id="🌰"><a href="#🌰" class="headerlink" title="🌰"></a>🌰</h2><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这个方法在Cell被选中或者被取消选中时调用</span></div><div class="line">- (<span class="keyword">void</span>)setSelected:(<span class="built_in">BOOL</span>)selected animated:(<span class="built_in">BOOL</span>)animated &#123;</div><div class="line">[<span class="keyword">super</span> setSelected:selected animated:animated];</div><div class="line"><span class="keyword">self</span>.testLabel.backgroundColor = [<span class="built_in">UIColor</span> orangeColor];</div><div class="line">&#125;</div><div class="line"><span class="comment">//这个方法在用户按住Cell时被调用</span></div><div class="line">- (<span class="keyword">void</span>)setHighlighted:(<span class="built_in">BOOL</span>)highlighted animated:(<span class="built_in">BOOL</span>)animated&#123;</div><div class="line">[<span class="keyword">super</span> setHighlighted:highlighted animated:animated];</div><div class="line"><span class="keyword">self</span>.testLabel.backgroundColor = [<span class="built_in">UIColor</span> orangeColor];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://static.oschina.net/uploads/space/2016/0810/144116_Ll58_2340880.png" alt="image2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;在iOS开发中，经常会使用到UITableView，对于自定义的UITableViewCell，当用户点击或者选中时，其上面的子视图会自动背景透明。
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-CollectionViewCell的复用问题</title>
    <link href="http://yoursite.com/2016/08/17/iOS-CollectionViewCell%E7%9A%84%E5%A4%8D%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/08/17/iOS-CollectionViewCell的复用问题/</id>
    <published>2016-08-17T06:27:03.000Z</published>
    <updated>2017-05-08T09:48:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h1><p>需要的Button 的个数不一定 Button上显示的字符串的长度不一定，Button上显示的字符串和Button的个数全部从服务器下发 ，当Button的个数在屏幕上展示不下的时候要可以左右滑动 以展示更多的Button</p>
<h1 id="方案："><a href="#方案：" class="headerlink" title="方案："></a>方案：</h1><p>综合以上因素 我选择利用CollectionView实现此功能.</p>
<p>其中遇到几个问题：<br>首先说明： cell中有一个Label 属性<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UILabel</span> *)textLabel&#123;</div><div class="line"><span class="keyword">if</span> (!_textLabel) &#123;</div><div class="line">_textLabel = [[<span class="built_in">UILabel</span> alloc]initWithFrame:<span class="keyword">self</span>.contentView.frame];</div><div class="line">_textLabel.layer.borderWidth = <span class="number">1</span>;</div><div class="line">_textLabel.layer.borderColor = [<span class="built_in">UIColor</span> lightGrayColor].CGColor;</div><div class="line">_textLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">13</span>];</div><div class="line">_textLabel.textAlignment = <span class="built_in">NSTextAlignmentCenter</span>;</div><div class="line">_textLabel.textColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">[<span class="keyword">self</span>.contentView addSubview:_textLabel];</div><div class="line">&#125;</div><div class="line">_textLabel.frame = <span class="built_in">CGRectMake</span>(<span class="built_in">CGRectGetMinX</span>(<span class="keyword">self</span>.contentView.frame), <span class="built_in">CGRectGetMinY</span>(<span class="keyword">self</span>.contentView.frame), <span class="keyword">self</span>.frame.size.width, <span class="keyword">self</span>.frame.size.height);</div><div class="line"><span class="keyword">return</span> _textLabel;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h1><pre><code>因为选中cell时 cell的字和边框要变成红色 ，当再点击其他Item时此item要变为原来的样子
</code></pre><p>这个功能主要在collectionView的两个代理方法中实现<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView didSelectItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line">- (<span class="keyword">void</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView didDeselectItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;;</div></pre></td></tr></table></figure></p>
<h2 id="具体实现如下："><a href="#具体实现如下：" class="headerlink" title="具体实现如下："></a>具体实现如下：</h2><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">*  当点击item时会调用此方法 在此方法中把点击的item的textLabel属性的字体颜色和边框改变颜色</div><div class="line">*</div><div class="line">*/</div><div class="line">- (<span class="keyword">void</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView didSelectItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">JWCCollectionViewCell *cell = (JWCCollectionViewCell *)[collectionView cellForItemAtIndexPath:indexPath];</div><div class="line">cell.textLabel.textColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line">cell.textLabel.layer.borderColor = [<span class="built_in">UIColor</span> redColor].CGColor;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">*  当点击其他cell时调用此方法 比如点击第一个cell的时候调用上面的方法，当点击第二个的时候先调用此方法，然后再调用上面的方法</div><div class="line">在此方法中获取第一次点击的cell 即</div><div class="line">JWCCollectionViewCell *cell = (JWCCollectionViewCell *)[collectionView cellForItemAtIndexPath:indexPath];</div><div class="line">把此cell 的textLabel属性变回原来的样子 然后系统会调用上面的代理方法把点击的第二个cell的textLabel属性的字体颜色和边框改变颜色</div><div class="line">这样就实现了 点击此cell改变颜色 再点击其他的cell是时 上一个点击的cell恢复到原来的样子</div><div class="line">*</div><div class="line">*/</div><div class="line">- (<span class="keyword">void</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView didDeselectItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">JWCCollectionViewCell *cell = (JWCCollectionViewCell *)[collectionView cellForItemAtIndexPath:indexPath];</div><div class="line">cell.textLabel.textColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">cell.textLabel.layer.borderColor = [<span class="built_in">UIColor</span> lightGrayColor].CGColor;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="问题二："><a href="#问题二：" class="headerlink" title="问题二："></a>问题二：</h1><pre><code>假如cell的个数太多的话肯定会发生复用的问题：
比如：屏幕的宽度只能显示3个cell 但是现在有四个需要显示，那么当点击第一个cell 向左滑动时会显示第四个 这个时候第四个item就是从复用队列中取出一个cell ，那么这个cell可能还保留这上一个的属性 比如说字体是红色的 其宽度可能会很大，不适合当前的string的宽度 ，左右滑动的时候cell 之间的间隔也会发生错乱 这绝不是想要的结果 。出现这个原因主要是cell的复用产生的。
</code></pre><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>在cell复用之前把cell恢复到初始化状态，那么这就要重写 - (void)prepareForReuse方法</p>
<p>具体做法如下：<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)prepareForReuse&#123;</div><div class="line">[<span class="keyword">super</span> prepareForReuse];</div><div class="line">_textLabel.frame = <span class="keyword">self</span>.contentView.frame;</div><div class="line">_textLabel.layer.borderWidth = <span class="number">1</span>;</div><div class="line">_textLabel.textColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">_textLabel.layer.borderColor = [<span class="built_in">UIColor</span> lightGrayColor].CGColor;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就解决了颜色问题</p>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><pre><code>prepareForReuse这个方法是CollectionViewCell的方法
</code></pre><p>但是错乱问题仍然没有解决：这主要是因为在定义_textLabel 时它的frame设置问题 应该在添加一句<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_textLabel.frame = <span class="built_in">CGRectMake</span>(<span class="built_in">CGRectGetMinX</span>(<span class="keyword">self</span>.contentView.frame), <span class="built_in">CGRectGetMinY</span>(<span class="keyword">self</span>.contentView.frame), <span class="keyword">self</span>.frame.size.width, <span class="keyword">self</span>.frame.size.height);</div></pre></td></tr></table></figure></p>
<h2 id="具体是这样的"><a href="#具体是这样的" class="headerlink" title="具体是这样的"></a>具体是这样的</h2><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UILabel</span> *)textLabel&#123;</div><div class="line"><span class="keyword">if</span> (!_textLabel) &#123;</div><div class="line">_textLabel = [[<span class="built_in">UILabel</span> alloc]initWithFrame:<span class="keyword">self</span>.contentView.frame];</div><div class="line">_textLabel.layer.borderWidth = <span class="number">1</span>;</div><div class="line">_textLabel.layer.borderColor = [<span class="built_in">UIColor</span> lightGrayColor].CGColor;</div><div class="line">_textLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">13</span>];</div><div class="line">_textLabel.textAlignment = <span class="built_in">NSTextAlignmentCenter</span>;</div><div class="line">_textLabel.textColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">[<span class="keyword">self</span>.contentView addSubview:_textLabel];</div><div class="line">&#125;</div><div class="line">_textLabel.frame = <span class="built_in">CGRectMake</span>(<span class="built_in">CGRectGetMinX</span>(<span class="keyword">self</span>.contentView.frame), <span class="built_in">CGRectGetMinY</span>(<span class="keyword">self</span>.contentView.frame), <span class="keyword">self</span>.frame.size.width, <span class="keyword">self</span>.frame.size.height);</div><div class="line"><span class="keyword">return</span> _textLabel;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="问题三："><a href="#问题三：" class="headerlink" title="问题三："></a>问题三：</h1><p>比如说 当点击第一个cell 后 向左滑动让第一个消失在界面中，当再滑出界面时你会发现它的选中状态消失了，而你并没有选中其他的cell ，这是为什么？？？因为上一问题的解决方法导致了这一步。那么该怎么样解决才能不至于解决上面的问题引出下面的问题呢？？方法如下：<br>1，  定义一个全局变量：<br>@property (nonatomic ,assign)NSInteger selectIndex; </p>
<p>2 这个先给它赋一个永远也不可能达到的值<br>self.selectIndex = MAXFLOAT;至于为什么赋这么大下面说<br>3，在 - (void)collectionView:(UICollectionView <em>)collectionView didSelectItemAtIndexPath:(NSIndexPath </em>)indexPath;这个代理方法中把 indexPath.row 值赋值给 self.selectIndex如下<br>self.selectIndex = indexPath.row; 这就记住了所选择的item的位置<br>4，在 - (UICollectionViewCell <em>)collectionView:(UICollectionView </em>)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath;这个方法中可能会从复用队列中去处cell 产生复用 但在复用之前会调用- (void)prepareForReuse方法 又会恢复原样使选中状态消失，这个时候要判断一下，判断这个方法中的 indexPath.row 是否等于 self.selectIndex 如果等于 使其变为选中的状态，具体代码如下：</p>
<ul>
<li>(UICollectionViewCell <em>)collectionView:(UICollectionView </em>)collectionView cellForItemAtIndexPath:(NSIndexPath <em>)indexPath {<br>JWCCollectionViewCell </em>cell = [collectionView dequeueReusableCellWithReuseIdentifier:@”cellID” forIndexPath:indexPath ];<br>if (indexPath.row == _selectIndex ) {<br>cell.textLabel.textColor = [UIColor redColor];<br>cell.textLabel.layer.borderColor = [UIColor redColor].CGColor;<br>}<br>cell.textLabel.text = [self.dataSourceArr objectAtIndex:indexPath.item];<br>NSLog(@”%@”,cell.textLabel.text);<br>return cell;<br>}<br>这样即使选中的cell 消失在界面中在出现的时候也不会改变选中状态。</li>
</ul>
<p>为什么要把self.selectIndex = MAXFLOAT<br>如果不这样赋值  假如赋的值为0 那么每次打开时第一个cell就是选中状态，但是你并没有点击第一个。这主要是在cell生成的代理方法中的这一句代码引起的<br>if (indexPath.row == _selectIndex ) {<br>cell.textLabel.textColor = [UIColor redColor];<br>cell.textLabel.layer.borderColor = [UIColor redColor].CGColor;<br>}<br>所以把self.selectIndex 赋值为 MAXFLOAT 这样就不会有当一启动APP的时候就有cell被选中的状态 </p>
<p>问题四：</p>
<p>根据string的宽度不同来生成的cell的宽度也不同的功能是在</p>
<ul>
<li>(CGSize)collectionView:(UICollectionView <em>)collectionView layout:(UICollectionViewLayout</em>)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath;<br>实在这个方法中返回不通的CGSize 来改变每一个cell的宽度。<br>在此可以计算字符串的宽度：<br>具体的方法如下：</li>
</ul>
<p>#pragma mark - UICollectionViewFlowLayoutDelegate</p>
<ul>
<li>(CGSize)collectionView:(UICollectionView <em>)collectionView layout:(UICollectionViewLayout </em>)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath <em>)indexPath{<br>NSString </em>str =  [self.dataSourceArr objectAtIndex:indexPath.item];<br>CGRect rect = [self getStringRect:str withFont:13];<br>return CGSizeMake(rect.size.width, 30);<br>}</li>
</ul>
<p>/**</p>
<ul>
<li>计算字符串的宽度的方法<br>*/</li>
</ul>
<ul>
<li>(CGRect)getStringRect:(NSString*)aString withFont :(CGFloat)font<br>{<br>CGRect rect;<br>if(aString){<br>CGRect rect = [aString boundingRectWithSize:CGSizeMake(MAXFLOAT, 30) options:NSStringDrawingUsesLineFragmentOrigin | NSStringDrawingUsesFontLeading attributes:@{NSFontAttributeName : [UIFont systemFontOfSize:font]} context:nil];<br>return  rect;<br>}<br>return rect;<br>}</li>
</ul>
<p>注意注意：!!!!<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">CGRect</span>)getStringRect:(<span class="built_in">NSString</span>*)aString withFont :(<span class="built_in">CGFloat</span>)font 在这个方法中需要传入字体的大小。</div><div class="line">这个大小一定要和 textLabel初始化时的字体大小一样 比如本例中在初始化的时候是<span class="number">13</span> 那么在计算字符串的宽度的时候一定要是<span class="number">13</span> 不然计算出的字符串的宽度比实际的要长 ：会出现的问题是当左右滑动时会出现各个cell之间的间隔会出现改变 也许会两个cell会出现重叠！！</div><div class="line">_textLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">13</span>];</div></pre></td></tr></table></figure></p>
<p>版权声明：本文为GodBlessMyParents原创文章，未经博主允许不得转载。<a href="http://blog.csdn.net/godblessmyparents/article/details/50675263" target="_blank" rel="external">原文地址</a><br>声明：本人未经博主允许转载了文章，纯粹自我学习与使用，如有侵权，请博主联系本人手机:18646926678</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;需求：&quot;&gt;&lt;a href=&quot;#需求：&quot; class=&quot;headerlink&quot; title=&quot;需求：&quot;&gt;&lt;/a&gt;需求：&lt;/h1&gt;&lt;p&gt;需要的Button 的个数不一定 Button上显示的字符串的长度不一定，Button上显示的字符串和Button的个数全部从服务器
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>RunTime1</title>
    <link href="http://yoursite.com/2016/07/19/RunTime1/"/>
    <id>http://yoursite.com/2016/07/19/RunTime1/</id>
    <published>2016-07-19T06:59:12.000Z</published>
    <updated>2016-07-19T08:15:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://cdn.cocimg.com/cms/uploads/allimg/141105/4196_141105101156_1.jpg" alt="image1"><br>Objective<br>-C中的分类允许我们通过给一个类添加方法来扩充它（但是通过category不能添加新的实例变量），并且我们不需要访问类中的代码就可以做到。</p>
<p>Objective-C中的协议是普遍存在的接口定义方式，即在一个类中通过@protocol定义接口，在另外类中实现接口，这种接口定义方式也成为“delegation”模式，@protocol声明了可以呗其他任何方法类实现的方法，协议仅仅是定义一个接口，而由其他的类去负责实现。<a id="more"></a></p>
<p>在本章中，我们来看看runtime对分类与协议的支持。</p>
<h1 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h1><h2 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h2><p>Category是表示一个指向分类的结构体的指针，其定义如下：</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_category *Category;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> objc_category &#123;</div><div class="line"><span class="keyword">char</span> *category_name                          OBJC2_UNAVAILABLE; <span class="comment">// 分类名</span></div><div class="line"><span class="keyword">char</span> *class_name                             OBJC2_UNAVAILABLE; <span class="comment">// 分类所属的类名</span></div><div class="line"><span class="keyword">struct</span> objc_method_list *instance_methods    OBJC2_UNAVAILABLE; <span class="comment">// 实例方法列表</span></div><div class="line"><span class="keyword">struct</span> objc_method_list *class_methods       OBJC2_UNAVAILABLE; <span class="comment">// 类方法列表</span></div><div class="line"><span class="keyword">struct</span> objc_protocol_list *protocols         OBJC2_UNAVAILABLE; <span class="comment">// 分类所实现的协议列表</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个结构体主要包含了分类定义的实例方法与类方法，其中instance_methods列表是objc_class中方法列表的一个子集，而class_methods列表是元类方法列表的一个子集。</p>
<h2 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h2><p>Protocol的定义如下：<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_object Protocol;</div></pre></td></tr></table></figure></p>
<p>我们可以看到，Protocol其中实就是一个对象结构体。</p>
<h1 id="操作函数"><a href="#操作函数" class="headerlink" title="操作函数"></a>操作函数</h1><p>Runtime并没有在<objc runtime.h="">头文件中提供针对分类的操作函数。因为这些分类中的信息都包含在objc_class中，我们可以通过针对objc_class的操作函数来获取分类的信息。如下例所示：<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RuntimeCategoryClass</span> : <span class="title">NSObject</span></span></div><div class="line">- (<span class="keyword">void</span>)method1;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RuntimeCategoryClass</span> (<span class="title">Category</span>)</span></div><div class="line">- (<span class="keyword">void</span>)method2;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RuntimeCategoryClass</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)method1 &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RuntimeCategoryClass</span> (<span class="title">Category</span>)</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)method2 &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"测试objc_class中的方法列表是否包含分类中的方法"</span>);</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> outCount = <span class="number">0</span>;</div><div class="line">Method *methodList = class_copyMethodList(RuntimeCategoryClass.class, &amp;outCount);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outCount; i++) &#123;</div><div class="line">Method method = methodList[i];</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *name = sel_getName(method_getName(method));</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"RuntimeCategoryClass's method: %s"</span>, name);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (strcmp(name, sel_getName(<span class="keyword">@selector</span>(method2)))) &#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"分类方法method2在objc_class的方法列表中"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></objc></p>
<h3 id="其输出是："><a href="#其输出是：" class="headerlink" title="其输出是："></a>其输出是：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">2014-11-08 10:36:39.213 [561:151847] 测试objc_class中的方法列表是否包含分类中的方法</div><div class="line">2014-11-08 10:36:39.215 [561:151847] RuntimeCategoryClass's method: method2</div><div class="line">2014-11-08 10:36:39.215 [561:151847] RuntimeCategoryClass's method: method1</div><div class="line">2014-11-08 10:36:39.215 [561:151847] 分类方法method2在objc_class的方法列表中</div></pre></td></tr></table></figure>
<h2 id="而对于Protocol，runtime提供了一系列函数来对其进行操作，这些函数包括："><a href="#而对于Protocol，runtime提供了一系列函数来对其进行操作，这些函数包括：" class="headerlink" title="而对于Protocol，runtime提供了一系列函数来对其进行操作，这些函数包括："></a>而对于Protocol，runtime提供了一系列函数来对其进行操作，这些函数包括：</h2><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 返回指定的协议</span></div><div class="line">Protocol * objc_getProtocol ( <span class="keyword">const</span> <span class="keyword">char</span> *name );</div><div class="line"></div><div class="line"><span class="comment">// 获取运行时所知道的所有协议的数组</span></div><div class="line">Protocol ** objc_copyProtocolList ( <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount );</div><div class="line"></div><div class="line"><span class="comment">// 创建新的协议实例</span></div><div class="line">Protocol * objc_allocateProtocol ( <span class="keyword">const</span> <span class="keyword">char</span> *name );</div><div class="line"></div><div class="line"><span class="comment">// 在运行时中注册新创建的协议</span></div><div class="line"><span class="keyword">void</span> objc_registerProtocol ( Protocol *proto );</div><div class="line"></div><div class="line"><span class="comment">// 为协议添加方法</span></div><div class="line"><span class="keyword">void</span> protocol_addMethodDescription ( Protocol *proto, SEL name, <span class="keyword">const</span> <span class="keyword">char</span> *types, <span class="built_in">BOOL</span> isRequiredMethod, <span class="built_in">BOOL</span> isInstanceMethod );</div><div class="line"></div><div class="line"><span class="comment">// 添加一个已注册的协议到协议中</span></div><div class="line"><span class="keyword">void</span> protocol_addProtocol ( Protocol *proto, Protocol *addition );</div><div class="line"></div><div class="line"><span class="comment">// 为协议添加属性</span></div><div class="line"><span class="keyword">void</span> protocol_addProperty ( Protocol *proto, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> objc_property_attribute_t *attributes, <span class="keyword">unsigned</span> <span class="keyword">int</span> attributeCount, <span class="built_in">BOOL</span> isRequiredProperty, <span class="built_in">BOOL</span> isInstanceProperty );</div><div class="line"></div><div class="line"><span class="comment">// 返回协议名</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> * protocol_getName ( Protocol *p );</div><div class="line"></div><div class="line"><span class="comment">// 测试两个协议是否相等</span></div><div class="line"><span class="built_in">BOOL</span> protocol_isEqual ( Protocol *proto, Protocol *other );</div><div class="line"></div><div class="line"><span class="comment">// 获取协议中指定条件的方法的方法描述数组</span></div><div class="line"><span class="keyword">struct</span> objc_method_description * protocol_copyMethodDescriptionList ( Protocol *p, <span class="built_in">BOOL</span> isRequiredMethod, <span class="built_in">BOOL</span> isInstanceMethod, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount );</div><div class="line"></div><div class="line"><span class="comment">// 获取协议中指定方法的方法描述</span></div><div class="line"><span class="keyword">struct</span> objc_method_description protocol_getMethodDescription ( Protocol *p, SEL aSel, <span class="built_in">BOOL</span> isRequiredMethod, <span class="built_in">BOOL</span> isInstanceMethod );</div><div class="line"></div><div class="line"><span class="comment">// 获取协议中的属性列表</span></div><div class="line">objc_property_t * protocol_copyPropertyList ( Protocol *proto, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount );</div><div class="line"></div><div class="line"><span class="comment">// 获取协议的指定属性</span></div><div class="line">objc_property_t protocol_getProperty ( Protocol *proto, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="built_in">BOOL</span> isRequiredProperty, <span class="built_in">BOOL</span> isInstanceProperty );</div><div class="line"></div><div class="line"><span class="comment">// 获取协议采用的协议</span></div><div class="line">Protocol ** protocol_copyProtocolList ( Protocol *proto, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount );</div><div class="line"></div><div class="line"><span class="comment">// 查看协议是否采用了另一个协议</span></div><div class="line"><span class="built_in">BOOL</span> protocol_conformsToProtocol ( Protocol *proto, Protocol *other );</div></pre></td></tr></table></figure>
<p>objc_getProtocol函数，需要注意的是如果仅仅是声明了一个协议，而未在任何类中实现这个协议，则该函数返回的是nil。</p>
<p>● objc_copyProtocolList函数，获取到的数组需要使用free来释放</p>
<p>● objc_allocateProtocol函数，如果同名的协议已经存在，则返回nil</p>
<p>● objc_registerProtocol函数，创建一个新的协议后，必须调用该函数以在运行时中注册新的协议。协议注册后便可以使用，但不能再做修改，即注册完后不能再向协议添加方法或协议</p>
<p>需要强调的是，协议一旦注册后就不可再修改，即无法再通过调用protocol_addMethodDescription、protocol_addProtocol和protocol_addProperty往协议中添加方法等。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>Runtime并没有提供过多的函数来处理分类。对于协议，我们可以动态地创建协议，并向其添加方法、属性及继承的协议，并在运行时动态地获取这些信息。</p>
<p><a href="http://www.cocoachina.com/ios/20141031/10105.html" target="_blank" rel="external">Objective-C Runtime 运行时之一：类与对象</a><br><a href="http://www.cocoachina.com/ios/20141105/10134.html" target="_blank" rel="external">Objective-C Runtime 运行时之二：成员变量与属性</a><br><a href="http://www.cocoachina.com/ios/20141106/10150.html" target="_blank" rel="external">Objective-C Runtime 运行时之三：方法与消息</a><br><a href="http://www.cocoachina.com/ios/20140225/7880.html" target="_blank" rel="external">Objective-C Runtime 运行时之四：Method Swizzling</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://cdn.cocimg.com/cms/uploads/allimg/141105/4196_141105101156_1.jpg&quot; alt=&quot;image1&quot;&gt;&lt;br&gt;Objective&lt;br&gt;-C中的分类允许我们通过给一个类添加方法来扩充它（但是通过category不能添加新的实例变量），并且我们不需要访问类中的代码就可以做到。&lt;/p&gt;
&lt;p&gt;Objective-C中的协议是普遍存在的接口定义方式，即在一个类中通过@protocol定义接口，在另外类中实现接口，这种接口定义方式也成为“delegation”模式，@protocol声明了可以呗其他任何方法类实现的方法，协议仅仅是定义一个接口，而由其他的类去负责实现。
    
    </summary>
    
    
      <category term="RunTime" scheme="http://yoursite.com/tags/RunTime/"/>
    
  </entry>
  
  <entry>
    <title>iOS-获取网卡地址和IP地址</title>
    <link href="http://yoursite.com/2016/07/13/iOS-%E8%8E%B7%E5%8F%96%E7%BD%91%E5%8D%A1%E5%9C%B0%E5%9D%80%E5%92%8CIP%E5%9C%B0%E5%9D%80/"/>
    <id>http://yoursite.com/2016/07/13/iOS-获取网卡地址和IP地址/</id>
    <published>2016-07-13T08:25:27.000Z</published>
    <updated>2017-05-08T09:50:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>直接上代码<a id="more"></a></p>
<h1 id="网卡的硬件地址"><a href="#网卡的硬件地址" class="headerlink" title="网卡的硬件地址:"></a>网卡的硬件地址:</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#include <span class="meta-string">&lt;sys/socket.h&gt;</span> // Per msqr</span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;sys/sysctl.h&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;net/if.h&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;net/if_dl.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark MAC addy</span></div><div class="line"><span class="comment">// Return the local MAC addy</span></div><div class="line"><span class="comment">// Courtesy of FreeBSD hackers email list</span></div><div class="line"><span class="comment">// Accidentally munged during previous update. Fixed thanks to mlamb.</span></div><div class="line">- (<span class="built_in">NSString</span> *) macaddress</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span>                  mib[<span class="number">6</span>];</div><div class="line">    size_t               len;</div><div class="line">    <span class="keyword">char</span>                *buf;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>       *ptr;</div><div class="line">    <span class="keyword">struct</span> if_msghdr    *ifm;</div><div class="line">    <span class="keyword">struct</span> sockaddr_dl  *sdl;</div><div class="line"></div><div class="line">    mib[<span class="number">0</span>] = <span class="built_in">CTL_NET</span>;</div><div class="line">    mib[<span class="number">1</span>] = AF_ROUTE;</div><div class="line">    mib[<span class="number">2</span>] = <span class="number">0</span>;</div><div class="line">    mib[<span class="number">3</span>] = AF_LINK;</div><div class="line">    mib[<span class="number">4</span>] = NET_RT_IFLIST;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((mib[<span class="number">5</span>] = if_nametoindex(<span class="string">"en0"</span>)) == <span class="number">0</span>) &#123;</div><div class="line">        printf(<span class="string">"Error: if_nametoindex error/n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (sysctl(mib, <span class="number">6</span>, <span class="literal">NULL</span>, &amp;len, <span class="literal">NULL</span>, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</div><div class="line">        printf(<span class="string">"Error: sysctl, take 1/n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((buf = malloc(len)) == <span class="literal">NULL</span>) &#123;</div><div class="line">        printf(<span class="string">"Could not allocate memory. error!/n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (sysctl(mib, <span class="number">6</span>, buf, &amp;len, <span class="literal">NULL</span>, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</div><div class="line">        printf(<span class="string">"Error: sysctl, take 2"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ifm = (<span class="keyword">struct</span> if_msghdr *)buf;</div><div class="line">    sdl = (<span class="keyword">struct</span> sockaddr_dl *)(ifm + <span class="number">1</span>);</div><div class="line">    ptr = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)LLADDR(sdl);</div><div class="line">    <span class="comment">// NSString *outstring = [NSString stringWithFormat:@"x:x:x:x:x:x", *ptr, *(ptr+1), *(ptr+2), *(ptr+3), *(ptr+4), *(ptr+5)];</span></div><div class="line">    <span class="built_in">NSString</span> *outstring = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"xxxxxx"</span>, *ptr, *(ptr+<span class="number">1</span>), *(ptr+<span class="number">2</span>), *(ptr+<span class="number">3</span>), *(ptr+<span class="number">4</span>), *(ptr+<span class="number">5</span>)];</div><div class="line">    free(buf);</div><div class="line">    <span class="keyword">return</span> [outstring uppercaseString];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="这写头文件是用于获取ip等系列功能的"><a href="#这写头文件是用于获取ip等系列功能的" class="headerlink" title="这写头文件是用于获取ip等系列功能的"></a>这写头文件是用于获取ip等系列功能的</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#include <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;net/if.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;ifaddrs.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;dlfcn.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"wwanconnect.h//frome apple 你可能没有哦</span></span></div><div class="line"></div><div class="line">#import &lt;SystemConfiguration/SystemConfiguration.h&gt;</div></pre></td></tr></table></figure>
<h2 id="这是外网可见的ip地址，如果你在小区的局域网中，那就是小区的，不是局域网的内网地址。"><a href="#这是外网可见的ip地址，如果你在小区的局域网中，那就是小区的，不是局域网的内网地址。" class="headerlink" title="这是外网可见的ip地址，如果你在小区的局域网中，那就是小区的，不是局域网的内网地址。"></a>这是外网可见的ip地址，如果你在小区的局域网中，那就是小区的，不是局域网的内网地址。</h2><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSString</span> *) whatismyipdotcom</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSError</span> *error;</div><div class="line">    <span class="built_in">NSURL</span> *ipURL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://www.whatismyip.com/automation/n09230945.asp"</span>];</div><div class="line">    <span class="built_in">NSString</span> *ip = [<span class="built_in">NSString</span> stringWithContentsOfURL:ipURL encoding:<span class="number">1</span> error:&amp;error];</div><div class="line">    <span class="keyword">return</span> ip ? ip : [error localizedDescription];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="这是获取本地wifi的ip地址"><a href="#这是获取本地wifi的ip地址" class="headerlink" title="这是获取本地wifi的ip地址"></a>这是获取本地wifi的ip地址</h2><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Matt Brown's get WiFi IP addy solution</span></div><div class="line"><span class="comment">// Author gave permission to use in Cookbook under cookbook license</span></div><div class="line"><span class="comment">// http://mattbsoftware.blogspot.com/2009/04/how-to-get-ip-address-of-iphone-os-v221.html</span></div><div class="line">- (<span class="built_in">NSString</span> *) localWiFiIPAddress</div><div class="line">&#123;</div><div class="line">    <span class="built_in">BOOL</span> success;</div><div class="line">    <span class="keyword">struct</span> ifaddrs * addrs;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">struct</span> ifaddrs * cursor;</div><div class="line"></div><div class="line">    success = getifaddrs(&amp;addrs) == <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (success) &#123;</div><div class="line">        cursor = addrs;</div><div class="line">        <span class="keyword">while</span> (cursor != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="comment">// the second test keeps from picking up the loopback address</span></div><div class="line">        <span class="keyword">if</span> (cursor-&gt;ifa_addr-&gt;sa_family == AF_INET &amp;&amp; (cursor-&gt;ifa_flags &amp; IFF_LOOPBACK) == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">NSString</span> *name = [<span class="built_in">NSString</span> stringWithUTF8String:cursor-&gt;ifa_name];</div><div class="line">            <span class="keyword">if</span> ([name isEqualToString:<span class="string">@"en0"</span>])  <span class="comment">// Wi-Fi adapter</span></div><div class="line">                <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithUTF8String:inet_ntoa(((<span class="keyword">struct</span> sockaddr_in *)cursor-&gt;ifa_addr)-&gt;sin_addr)];</div><div class="line">            &#125;</div><div class="line">            cursor = cursor-&gt;ifa_next;</div><div class="line">        &#125;</div><div class="line">        freeifaddrs(addrs);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="NSString和Address的转换"><a href="#NSString和Address的转换" class="headerlink" title="NSString和Address的转换"></a>NSString和Address的转换</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">NSString</span> *) stringFromAddress: (<span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *) address</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(address &amp;&amp; address-&gt;sa_family == AF_INET) &#123;</div><div class="line">        <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr_in* sin = (<span class="keyword">struct</span> sockaddr_in*) address;</div><div class="line">        <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@:%d"</span>, [<span class="built_in">NSString</span> stringWithUTF8String:inet_ntoa(sin-&gt;sin_addr)], ntohs(sin-&gt;sin_port)];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">BOOL</span>)addressFromString:(<span class="built_in">NSString</span> *)IPAddress address:(<span class="keyword">struct</span> sockaddr_in *)address</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!IPAddress || ![IPAddress length]) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    memset((<span class="keyword">char</span> *) address, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in), <span class="number">0</span>);</div><div class="line">    address-&gt;sin_family = AF_INET;</div><div class="line">    address-&gt;sin_len = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> conversionResult = inet_aton([IPAddress UTF8String], &amp;address-&gt;sin_addr);</div><div class="line">    <span class="keyword">if</span> (conversionResult == <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">NSAssert1</span>(conversionResult != <span class="number">1</span>, <span class="string">@"Failed to convert the IP address string into a sockaddr_in: %@"</span>, IPAddress);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="获取host的名称"><a href="#获取host的名称" class="headerlink" title="获取host的名称"></a>获取host的名称</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (NSString *) hostname</div><div class="line">&#123;</div><div class="line">    char baseHostName[256]; // Thanks, Gunnar Larisch</div><div class="line">    int success = gethostname(baseHostName, 255);</div><div class="line">    if (success != 0) return nil;</div><div class="line">    baseHostName[255] = '/0';</div><div class="line"></div><div class="line">    #if TARGET_IPHONE_SIMULATOR</div><div class="line">        return [NSString stringWithFormat:@"%s", baseHostName];</div><div class="line">    #else</div><div class="line">        return [NSString stringWithFormat:@"%s.local", baseHostName];</div><div class="line">    #endif</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="从host获取地址"><a href="#从host获取地址" class="headerlink" title="从host获取地址"></a>从host获取地址</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSString</span> *) getIPAddressForHost: (<span class="built_in">NSString</span> *) theHost</div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> hostent *host = gethostbyname([theHost UTF8String]);</div><div class="line">    <span class="keyword">if</span> (!host) &#123;herror(<span class="string">"resolv"</span>); <span class="keyword">return</span> <span class="literal">NULL</span>; &#125;</div><div class="line">    <span class="keyword">struct</span> in_addr **list = (<span class="keyword">struct</span> in_addr **)host-&gt;h_addr_list;</div><div class="line">    <span class="built_in">NSString</span> *addressString = [<span class="built_in">NSString</span> stringWithCString:inet_ntoa(*list[<span class="number">0</span>]) encoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">    <span class="keyword">return</span> addressString;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="这是本地host的IP地址"><a href="#这是本地host的IP地址" class="headerlink" title="这是本地host的IP地址"></a>这是本地host的IP地址</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSString</span> *) localIPAddress</div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> hostent *host = gethostbyname([[<span class="keyword">self</span> hostname] UTF8String]);</div><div class="line">    <span class="keyword">if</span> (!host) &#123;herror(<span class="string">"resolv"</span>); <span class="keyword">return</span> <span class="literal">nil</span>;&#125;</div><div class="line">    <span class="keyword">struct</span> in_addr **list = (<span class="keyword">struct</span> in_addr **)host-&gt;h_addr_list;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithCString:inet_ntoa(*list[<span class="number">0</span>]) encoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大家有什么不懂尽请留言<a href="http://www.cnblogs.com/hanjun/archive/2013/07/12/3185860.html" target="_blank" rel="external">原文地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;直接上代码
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>优化自动布局</title>
    <link href="http://yoursite.com/2016/07/03/%E4%BC%98%E5%8C%96%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2016/07/03/优化自动布局/</id>
    <published>2016-07-03T04:31:02.000Z</published>
    <updated>2017-05-08T09:48:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="优化自动布局"><a href="#优化自动布局" class="headerlink" title="优化自动布局"></a>优化自动布局</h1><p>有一个帖子由弗洛里安·库格勒最近一轮持续大约在iOS自动布局的性能。它看着它需要多少时间自动布局添加的意见，这与视图的数量增加如何。该职位，同时提供非常有用的信息，似乎没有最能代表自动布局的现实世界中的表现，而不是显示一组最坏的情况。<a id="more"></a></p>
<p>在这篇文章中，我想看到​​更多的，为什么弗洛里安了他做的结果。我的希望是要突出一些不好的做法，人们可以有自动布局，看看是什么让双方的陈述，“自动布局需要几秒钟布局几百意见”和“自动布局可以布局一些100浏览速度非常快”真，尽管他们看似矛盾的性质。</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>首先，我想捂住我究竟是如何在问题测量的数字。我相信这是弗洛里安如何衡量他们稍有不同，但更加紧密地显示了布局。我开始用原始的源项目，并进行了修改，以测试一些变化。你可以找到我的版本的项目的GitHub上。</p>
<p>为了测量时序，我跑了使用时间探查模板仪器的应用程序。我并不觉得有必要每次重新启动应用程序因为很少有到无缓存的事情。我跑了每个测试3次连续，清除每次测试之间的意见。之后，在仪器，我集中，其中每个测试运行示例的区域。为了得到一个布局花时间，我用的时候说的仪器其布局方法了。我计算了3次的平均值和使用，要为这个职位提供数据。</p>
<h1 id="重建的初步结果"><a href="#重建的初步结果" class="headerlink" title="重建的初步结果"></a>重建的初步结果</h1><p>正如我的方法是略有不同，我使用的是不同的设备弗洛里安（第3代iPad），我第一次开始测试他做同样的事情。他的项目测试铺设的3种方式：</p>
<pre><code>各种观点的平面层次结构，绝对定位在根视图
各种观点的平面层次结构，相对定位彼此
视图嵌套层次结构，相对定位彼此
</code></pre><p>他还通过简单的设置框架做了平坦和嵌套层次两者。下面是显示我得到了平面层次结构图。<br><img src="http://pilky.me/static/blogmedia/optimiseautolayout1.png" alt="img1"><br>如果你比较弗洛里安的帖子，你会看到这看起来相当不同。在弗洛里安的图中，绿线是比橙线差，但他们都相当接近。在我的图中，橙色线是差很多（作为一个例子，对于600的看法，弗洛里安了5秒，而我走近7.5秒时，尽管有一个更快的iPad），但绿线是好多了（对于600的观点我在2.5秒VS弗洛里安的6-7秒）。</p>
<p>我把这种差异下降到测量的差异。如前面提到的，我使用的方法产生的限制的定时。为了做到这一点，我调用-layoutIfNeeded在每个方法的末尾上的根查看方法。这迫使自动布局立即运行，而不是延迟，直到运行循环结束，这意味着仪器计数的方法创建的限制，而不是系统的方法的性能。</p>
<p>我怀疑是弗洛里安测量总时间的CPU是工作，但是这不一定都是因为自动布局。我相信我的方式更表明了什么自动布局正在做，但弗洛里安之更有象征的应用程序多长时间是没有响应。无论如何，实际值并不重要不亚于曲线，和任何相对的改进，我们可以找到。<br><img src="http://pilky.me/static/blogmedia/optimiseautolayout2.png" alt="img2"><br>嵌套布局图与原检验少的差别。曲线几乎是相同的。唯一的区别是，我的时间稍快，这是更快的设备上运行时，可以预期的。</p>
<h1 id="电源局部性"><a href="#电源局部性" class="headerlink" title="电源局部性"></a>电源局部性</h1><p>有一件事我注意到了有关的原代码是正在的根视图中添加所有的约束。在某些情况下，这是必需的，作为约束引用根视图。所有意见的约束引用必须在它被添加到视图的子树。因此，你可以随便扔在UI每一个约束到应用程序的根视图。</p>
<p>你不想做，虽然，有几个原因。最明显的是，这是一个很多更容易理解的代码时，它在本地添加约束。另一种是，它显着地影响性能。</p>
<p>让我们来看看我们的公寓布局。虽然位置限制必须是根视图，尺寸的限制没有。我改变了代码，这样大小的限制，正在加入到子视图来代替，并得到了以下结果：<br><img src="http://pilky.me/static/blogmedia/optimiseautolayout3.png" alt="img3"><br>紫线是相对布局，大小限制为尽可能地方，红色为绝对布局的等效线。正如你所看到的，我们得到了一些性能改进。我不是100％肯定，但我的猜测是，这是因为我们正在减少对根视图计算的大小。我们让自动布局进行布局的一部分，因为很多小的计算，而不是在一个大的blob计算整个事情。</p>
<p>这些收益都比较小，但。在更复杂的计算仍然是所有聚集在一起，并尽可能本地。让我们来看看嵌套布局的话，因为所有涉及到一个视图的约束可以放在眼前的上海华，极大地提高当地。下图显示了刚才的改进如何显著这给。<br><img src="http://pilky.me/static/blogmedia/optimiseautolayout4.png" alt="img4"><br>为了给实际的数字，200视图布局时，把根视图中的所有限制，但把他们当只有2.00秒于眼前的SuperView了22.75秒。把根认为同样的限制导致运行在11倍慢的代码。这个教训应该是显而易见的。当使用自动布局工作，把所有的约束作为本地越好。</p>
<h1 id="修改现有视图层次"><a href="#修改现有视图层次" class="headerlink" title="修改现有视图层次"></a>修改现有视图层次</h1><p>弗洛里安提到，约束满足问题有一个多项式复杂性。我们可以在上面的图的曲线看到这一点。然而，测试上述基本上不具代表性的实际使用自动布局的。了解自动布局有多快扔在1000意见纳入父视图是很有用的，就像知道NSArray的速度有多快是增加数百万个对象。然而，大多数创造NSArrays很少持有超过几百项的更多，许多持有小于10.同样，也很少为个人观点持有多40-50子视图，或者视图层次超过20-深30次（我怀疑这些值将大大偏高）。</p>
<p>更现实的情况是有，我们希望移动的一些看法，或者添加一些额外的看法视图层次。我进行基于上面的一些测试。以两个平（绝对的，不是相对）和嵌套布局，在上面使用的大小，然后我计算过了多长时间，将所有的意见，并增加10个额外的意见。</p>
<p>我们可以从下面的图中看到，即使在高达1000的意见，增加一个额外的10次到平，绝对定位的布局基本上是线性的。这是因为我们仅引用根视图，并且因此，所有的其他观点并不需要重新计算。如果我们插入的图成的相对定位视图的链的中间，它可能会不这么快。</p>
<p>同样，移动基本上是线性的，尽管它在1000的观点确实秒杀。再次，这是因为对于一个视图的约束不依赖于任何其它同级图。<br><img src="http://pilky.me/static/blogmedia/optimiseautolayout5.png" alt="img4"><br>如果我们看一下嵌套布局，我们发现，移动也看似线性的。虽然它看起来比持平层次浅了很多，它仅仅是图的一招，他们大多是在同一行。当谈到加入，我们确实看到了曲线，但我们在这里添加视图层次额外10层，每层依赖于前。<br><img src="http://pilky.me/static/blogmedia/optimiseautolayout6.png" alt="img5"><br>与所有这些需要注意的事，就是他们的速度有多快相比之前的测试。要加1000绝对定位的看法了6.6秒，但要加一个额外的10只花了0.055秒。这归结为食火鸡约束解算器多么聪明的。</p>
<p>而不是试图每次重新解决从无到有的全部问题，它有一个增量系统。它可以重新使用以前的所有计算，当您添加，编辑或删除约束仅仅是修改的结果。这就是为什么它可能需要几秒钟的时间一气呵成添加一些100的观点，但你可以迅速地调整该窗口，并拥有所有的约束进行重新计算和框架集。</p>
<p>自动布局比手动设定帧慢。它是要概括的解决跨整个UI相当复杂的布局问题。其专注于一个单一的视图专门的算法总是会更快地运行。自动布局的优势不在于布局使得在运行时速度较快，但在使其更快，更容易为我们的编码时定义布局。</p>
<p>像许多我们使用的工具，自动布局充分利用了我们有处理能力丰富的事实，为了使我们更容易编写应用程序。对于绝大多数的用例，如果正确使用，自动布局比速度不够快了。这听起来像一个借口，但它是我们使用我们的高级编程语言，而不是议会来证明书写同样的借口。</p>
<p>如果您正在寻找更多的自动布局，检出自动布局指南，未来的2014年夏季。<br>如果你想给我一个评论对这个职位，请发送电子邮件至pilky@mcubedsw.com。或者发推@pilky。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;优化自动布局&quot;&gt;&lt;a href=&quot;#优化自动布局&quot; class=&quot;headerlink&quot; title=&quot;优化自动布局&quot;&gt;&lt;/a&gt;优化自动布局&lt;/h1&gt;&lt;p&gt;有一个帖子由弗洛里安·库格勒最近一轮持续大约在iOS自动布局的性能。它看着它需要多少时间自动布局添加的意见，这与视图的数量增加如何。该职位，同时提供非常有用的信息，似乎没有最能代表自动布局的现实世界中的表现，而不是显示一组最坏的情况。
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-状态栏(UIStatusBar)颜色</title>
    <link href="http://yoursite.com/2016/04/29/iOS-%E7%8A%B6%E6%80%81%E6%A0%8F-UIStatusBar-%E9%A2%9C%E8%89%B2/"/>
    <id>http://yoursite.com/2016/04/29/iOS-状态栏-UIStatusBar-颜色/</id>
    <published>2016-04-29T08:06:19.000Z</published>
    <updated>2017-05-08T09:48:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UIStatusBar的相关设置"><a href="#UIStatusBar的相关设置" class="headerlink" title="UIStatusBar的相关设置"></a>UIStatusBar的相关设置</h1><h2 id="知识普及"><a href="#知识普及" class="headerlink" title="知识普及"></a>知识普及</h2><p>iOS上状态栏 就是指的最上面的20像素高的部分<br>状态栏分前后两部分，要分清这两个概念，后面会用到：<br>前景部分：就是指的显示电池、时间等部分；<br>背景部分：就是显示黑色或者图片的背景部分；</p>
<p>如下图：前景部分为白色，背景部分为黑色<br><img src="/image/005046_Oztm_574576.png" alt=""><br>在此输入图片描述</p>
<p>注意：这里只涉及到ios7以及更高版本，低版本下面的讲解可能无效。<a id="more"></a></p>
<h2 id="设置statusBar的【前景部分】"><a href="#设置statusBar的【前景部分】" class="headerlink" title="设置statusBar的【前景部分】"></a>设置statusBar的【前景部分】</h2><p>简单来说，就是设置显示电池电量、时间、网络部分标示的颜色，<br>这里只能设置两种颜色：<br>    默认的黑色（UIStatusBarStyleDefault）<br>    白色     （UIStatusBarStyleLightContent）<br>可以设置的地方有两个：plist设置里面 和 程序代码里</p>
<h3 id="1-plist设置statusBar"><a href="#1-plist设置statusBar" class="headerlink" title="1.plist设置statusBar"></a>1.plist设置statusBar</h3><p>在plist里增加一行 UIStatusBarStyle(或者是“Status bar style”也可以)，这里可以设置两个值，就是上面提到那两个<br>UIStatusBarStyleDefault 和 UIStatusBarStyleLightContent<br>这样在app启动的launch页显示的时候，statusBar的样式就是上面plist设置的风格。</p>
<h3 id="2-程序代码里设置statusBar"><a href="#2-程序代码里设置statusBar" class="headerlink" title="2.程序代码里设置statusBar"></a>2.程序代码里设置statusBar</h3><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setStatusBarStyle:<span class="built_in">UIStatusBarStyleLightContent</span>];</div></pre></td></tr></table></figure>
<p>或者<br>//相对于上面的接口，这个接口可以动画的改变statusBar的前景色<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setStatusBarStyle:<span class="built_in">UIStatusBarStyleLightContent</span> animated:<span class="literal">YES</span>];</div></pre></td></tr></table></figure></p>
<p>不仅如此，ios还很贴心的在UIViewController也增加了几个接口，<br>目的是让状态栏根据当前显示的UIViewController来定制statusBar的前景部分。<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle;</div><div class="line">- (<span class="built_in">UIViewController</span> *)childViewControllerForStatusBarStyle;</div><div class="line">- (<span class="keyword">void</span>)setNeedsStatusBarAppearanceUpdate</div><div class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle:</div></pre></td></tr></table></figure></p>
<p>在你自己的UIViewController里重写此方法，返回你需要的值(UIStatusBarStyleDefault 或者 UIStatusBarStyleLightContent)；</p>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>这里如果你只是简单的return一个固定的值，那么该UIViewController显示的时候，程序就会马上调用该方法，来改变statusBar的前景部分；<br>如果在该UIViewController已经在显示在当前，你可能还要在当前页面不时的更改statusBar的前景色，那么，你首先需要调用下面的setNeedsStatusBarAppearanceUpdate方法(这个方法会通知系统去调用当前UIViewController的preferredStatusBarStyle方法)， 这个和UIView的setNeedsDisplay原理差不多(调用UIView对象的setNeedsDisplay方法后，系统会在下次页面刷新时，调用重绘该view，系统最快能1秒刷新60次页面，具体要看程序设置)。<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIViewController</span> *)childViewControllerForStatusBarStyle:</div></pre></td></tr></table></figure></p>
<p>这个接口也很重要，默认返回值为nil。当我们调用setNeedsStatusBarAppearanceUpdate时，系统会调用application.window的rootViewController的preferredStatusBarStyle方法，我们的程序里一般都是用UINavigationController做root，如果是这种情况，那我们自己的UIViewController里的preferredStatusBarStyle根本不会被调用；<br>这种情况下childViewControllerForStatusBarStyle就派上用场了，<br>我们要子类化一个UINavigationController，在这个子类里面重写childViewControllerForStatusBarStyle方法，如下：<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIViewController</span> *)childViewControllerForStatusBarStyle&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">self</span>.topViewController;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码的意思就是说，不要调用我自己(就是UINavigationController)的preferredStatusBarStyle方法，而是去调用navigationController.topViewController的preferredStatusBarStyle方法，这样写的话，就能保证当前显示的UIViewController的preferredStatusBarStyle方法能影响statusBar的前景部分。</p>
<p>另外，有时我们的当前显示的UIViewController可能有多个childViewController，重写当前UIViewController的childViewControllerForStatusBarStyle方法，让childViewController的preferredStatusBarStyle生效(当前UIViewController的preferredStatusBarStyle就不会被调用了)。</p>
<p>简单来说，只要UIViewController重写的的childViewControllerForStatusBarStyle方法返回值不是nil，那么，UIViewController的preferredStatusBarStyle方法就不会被系统调用，系统会调用childViewControllerForStatusBarStyle方法返回的UIViewController的preferredStatusBarStyle方法。</p>
<ul>
<li>(void)setNeedsStatusBarAppearanceUpdate:</li>
</ul>
<p>让系统去调用application.window的rootViewController的preferredStatusBarStyle方法,如果rootViewController的childViewControllerForStatusBarStyle返回值不为nil，则参考上面的讲解。</p>
<h2 id="设置statusBar的【背景部分】"><a href="#设置statusBar的【背景部分】" class="headerlink" title="设置statusBar的【背景部分】"></a>设置statusBar的【背景部分】</h2><p>背景部分，简单来说，就是背景色；改变方法有两种：<br>系统提供的方法<br>navigationBar的setBarTintColor接口，用此接口可改变statusBar的背景色<br>注意：一旦你设置了navigationBar的- (void)setBackgroundImage:(UIImage *)backgroundImage forBarMetrics:(UIBarMetrics)barMetrics接口，那么上面的setBarTintColor接口就不能改变statusBar的背景色，statusBar的背景色就会变成纯黑色。<br>另辟蹊径<br>创建一个UIView，<br>设置该UIView的frame.size 和statusBar大小一样，<br>设置该UIView的frame.origin 为{0,-20},<br>设置该UIView的背景色为你希望的statusBar的颜色，<br>在navigationBar上addSubView该UIView即可。<br>注意：<br>1.引用来自“云天青”的评论<br>你好，<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setStatusBarStyle:<span class="built_in">UIStatusBarStyleLightContent</span>];在 AppDelegate里</div></pre></td></tr></table></figure></p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123; 执行也不会起作用。就在控制里写</div><div class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle:起到作用。请问这是什么问题？</div></pre></td></tr></table></figure>
<p>回答：<br>info.plist文件中，View controller-based status bar appearance项设为YES，则View controller对status bar的设置优先级高于application的设置。为NO则以application的设置为准，view controller的prefersStatusBarHidden方法无效，是根本不会被调用的</p>
<p>作者：shede333<br>版权声明：原创文章，版权声明：自由转载-非商用-非衍生-保持署名<br>主页：<a href="http://my.oschina.net/shede333" target="_blank" rel="external">主页1</a> &amp;&amp; <a href="http://blog.sina.com.cn/u/1509658847" target="_blank" rel="external">主页2</a></p>
<p>第三方方法<br>“CWStatusBarNotification 在状态栏显示自定义通知”,我感觉 这个第三方,挺好用的 <a href="http://www.ios122.com/2015/08/cwstatusbarnotification/" target="_blank" rel="external">地址</a></p>
<h1 id="最后说点别的"><a href="#最后说点别的" class="headerlink" title="最后说点别的"></a>最后说点别的</h1><p>IOS7最让人尿性的就是UI的改动，这几天把项目放到ios7上运行，结果让我大跌眼镜，特别是NavigationBar实在我恶心！</p>
<h2 id="NavigationBar与UIViewController-重叠的问题困扰我两天。"><a href="#NavigationBar与UIViewController-重叠的问题困扰我两天。" class="headerlink" title="NavigationBar与UIViewController 重叠的问题困扰我两天。"></a>NavigationBar与UIViewController 重叠的问题困扰我两天。</h2><p>后来发现IOS7的视图有个边缘延伸的属性：edgesForExtendedLayout，<br>其默认值是UIExtendedEdgeAll。<br>只要将其改成UIExtendedEdgeNone即可，要注意的是在IOS7以下版本会出现bug。<br>所以在UIViewController 的viewDidLoad里加上下面代码就完美解决了这个问题<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>( ([[[<span class="built_in">UIDevicecurrentDevice</span>] systemVersion] doubleValue]&gt;=<span class="number">7.0</span>)) &#123;<span class="keyword">self</span>.edgesForExtendedLayout= <span class="built_in">UIExtendedEdgeNone</span>;    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="还有一个问题是NavigationBar-setTintColor这个方法设置颜色无效！"><a href="#还有一个问题是NavigationBar-setTintColor这个方法设置颜色无效！" class="headerlink" title="还有一个问题是NavigationBar setTintColor这个方法设置颜色无效！"></a>还有一个问题是NavigationBar setTintColor这个方法设置颜色无效！</h2><p>但是我发现IOS7有个setBarTintColor 的方法，而且能达到效果。同样也要判断是否是IOS7。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UIStatusBar的相关设置&quot;&gt;&lt;a href=&quot;#UIStatusBar的相关设置&quot; class=&quot;headerlink&quot; title=&quot;UIStatusBar的相关设置&quot;&gt;&lt;/a&gt;UIStatusBar的相关设置&lt;/h1&gt;&lt;h2 id=&quot;知识普及&quot;&gt;&lt;a href=&quot;#知识普及&quot; class=&quot;headerlink&quot; title=&quot;知识普及&quot;&gt;&lt;/a&gt;知识普及&lt;/h2&gt;&lt;p&gt;iOS上状态栏 就是指的最上面的20像素高的部分&lt;br&gt;状态栏分前后两部分，要分清这两个概念，后面会用到：&lt;br&gt;前景部分：就是指的显示电池、时间等部分；&lt;br&gt;背景部分：就是显示黑色或者图片的背景部分；&lt;/p&gt;
&lt;p&gt;如下图：前景部分为白色，背景部分为黑色&lt;br&gt;&lt;img src=&quot;/image/005046_Oztm_574576.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;在此输入图片描述&lt;/p&gt;
&lt;p&gt;注意：这里只涉及到ios7以及更高版本，低版本下面的讲解可能无效。
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-Masonry使用心得</title>
    <link href="http://yoursite.com/2016/03/04/iOS-Masonry%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
    <id>http://yoursite.com/2016/03/04/iOS-Masonry使用心得/</id>
    <published>2016-03-03T16:10:32.000Z</published>
    <updated>2017-05-08T09:51:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Masonry使用心得<br>Masonry是目前最流行的AutoLayout框架.<br>使用:将Masonry文件包拖入项目,删掉自带的info.plist文件.demo中对Masonry的引用在.pch文件中.<br>使用Masonry不需要设置<br>控件的translatesAutoresizingMaskIntoConstraints属性为NO;<a id="more"></a><br>Masonry简单实现<br>(左下角正方形):<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[targetView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">make.bottom.equalTo(<span class="keyword">self</span>.view).offset(<span class="number">-20</span>);</div><div class="line">make.leading.equalTo(<span class="keyword">self</span>.view).offset(<span class="number">20</span>);</div><div class="line">make.size.mas_equalTo(<span class="built_in">CGSizeMake</span>(<span class="number">100</span>, <span class="number">100</span>));</div><div class="line">&#125;];</div></pre></td></tr></table></figure></p>
<p>内边距为50:<br>第一种实现方式<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">make.leading.top.mas_equalTo(@<span class="number">50</span>);</div><div class="line">make.trailing.bottom.mas_equalTo(@<span class="number">-50</span>);</div></pre></td></tr></table></figure></p>
<p>第二种实现方式<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make.edges.insets(<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>));</div></pre></td></tr></table></figure></p>
<p>Masonry使用技巧:<br>定义以下两个宏,在使用Masonry框架时就不需要加mas_前缀了<br>(定义宏一定要在引入Masonry.h文件之前).<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//define this constant if you want to use Masonry without the 'mas_' prefix</span></div><div class="line"><span class="meta">#define MAS_SHORTHAND</span></div><div class="line"><span class="comment">//define this constant if you want to enable auto-boxing for default syntax</span></div><div class="line"><span class="meta">#define MAS_SHORTHAND_GLOBALS</span></div></pre></td></tr></table></figure></p>
<p>使用Masonry添加兄弟控件约束不需要考虑父控件.<br>具体实现代码如下:<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[leftView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">make.leading.offset(<span class="number">20</span>);</div><div class="line">make.bottom.offset(<span class="number">-20</span>);</div><div class="line">make.trailing.equalTo(rightiew.leading).offset(<span class="number">-20</span>);</div><div class="line">make.height.equalTo(<span class="number">100</span>);</div><div class="line">make.height.equalTo(rightiew.height);</div><div class="line">&#125;];    </div><div class="line">[rightiew makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">make.trailing.equalTo(<span class="keyword">self</span>.view.trailing).offset(<span class="number">-20</span>);</div><div class="line">make.top.equalTo(leftView.top);</div><div class="line">make.width.equalTo(leftView.width);</div><div class="line">&#125;];</div></pre></td></tr></table></figure></p>
<p>Masonry中可以封装一个这样的宏， 可以用于快读构建<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define MAS_MAKE_ZERO(view) make.top.left.bottom.and.right.equalTo(view).with.insets(UIEdgeInsetsMake(0, 0, 0, 0))</span></div><div class="line"><span class="meta">#define MAS_MAKE_INSETS(view, t, l, b, r) make.top.left.bottom.and.right.equalTo(view).with.insets(UIEdgeInsetsMake(t, l, b, r))</span></div></pre></td></tr></table></figure></p>
<p>具体在代码中使用Masony的常规代码<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">self</span>.textView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    make.top.left.right.equalTo(<span class="keyword">self</span>.contentView).insets(<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">0</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">100</span>));</div><div class="line"><span class="comment">//        make.bottom.equalTo(self.content.mas_top).offset(5);</span></div><div class="line">&#125;];</div></pre></td></tr></table></figure></p>
<p>make.bottom.equalTo(self.content.mas_top).offset(5)这句话翻译过来就是<br>配置：下部，对齐到（当前类的。content控件的上部），距离为5<br>也就是说textView的下部和content的上部距离是5<br>注意：<br>1.Masony使用是要控件已经添加到了视图上的，不然会崩溃掉。<br>2.Masony使用使用对齐不要添加2次不然会有计算不准确的情况。<br>3.equalTo 和 mas_equalTo真的很容易忘记。。<br>4.在xib或者storyboard中使用masonry框架相关方法的时候要将use Auto layout选项去掉，否则会不起作用。<br>在Masonry中能够添加autolayout约束有三个函数<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSArray</span> *)mas_makeConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *make))block;</div><div class="line">- (<span class="built_in">NSArray</span> *)mas_updateConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *make))block;</div><div class="line">- (<span class="built_in">NSArray</span> *)mas_remakeConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *make))block;</div><div class="line">```z</div><div class="line">mas_makeConstraints 只负责新增约束 Autolayout不能同时存在两条针对于同一对象的约束 否则会报错</div><div class="line">mas_updateConstraints 针对上面的情况 会更新在block中出现的约束 不会导致出现两个相同约束的情况</div><div class="line">mas_remakeConstraints 则会清除之前的所有约束 仅保留最新的约束</div><div class="line">```mm</div><div class="line"><span class="built_in">UIView</span> *sv = [<span class="built_in">UIView</span> new];</div><div class="line"><span class="comment">//在做autoLayout之前 一定要先将view添加到superview上 否则会报错</span></div><div class="line">[<span class="keyword">self</span>.view addSubview:sv];</div><div class="line"><span class="comment">//mas_makeConstraints就是Masonry的autolayout添加函数 将所需的约束添加到block中行了</span></div><div class="line">[sv mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line"><span class="comment">//将sv居中(很容易理解吧?)</span></div><div class="line">make.center.equalTo(ws.view);</div><div class="line"><span class="comment">//将size设置成(300,300)</span></div><div class="line">make.size.mas_equalTo(<span class="built_in">CGSizeMake</span>(<span class="number">300</span>, <span class="number">300</span>));</div><div class="line">&#125;];</div></pre></td></tr></table></figure></p>
<p>equalTo 和 mas_equalTo的区别在哪里呢? 其实 mas_equalTo是一个MACRO,比较的是值，equalTo比较的是view<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[sv3 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">make.centerY.mas_equalTo(sv.mas_centerY);</div><div class="line">make.left.equalTo(sv2.mas_right).with.offset(padding1);</div><div class="line">make.right.equalTo(sv.mas_right).with.offset(-padding1);</div><div class="line">make.height.mas_equalTo(@<span class="number">150</span>);</div><div class="line">make.width.equalTo(sv2);</div><div class="line">&#125;];</div></pre></td></tr></table></figure></p>
<h1 id="设置或更新约束"><a href="#设置或更新约束" class="headerlink" title="设置或更新约束"></a>设置或更新约束</h1><p>对于约束的设置，Masonry提供了3种方法，分别为设置约束、更新约束、重写设置约束<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置约束    </span></div><div class="line">- (<span class="built_in">NSArray</span> *)mas_makeConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *make))block;</div><div class="line"></div><div class="line"><span class="comment">// 更新约束</span></div><div class="line">- (<span class="built_in">NSArray</span> *)mas_updateConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *make))block;</div><div class="line"></div><div class="line"><span class="comment">// 重新设置约束</span></div><div class="line">- (<span class="built_in">NSArray</span> *)mas_remakeConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *make))block;</div></pre></td></tr></table></figure></p>
<p>mas_makeConstraints: 初次设置约束使用。</p>
<p>mas_updateConstraints: 更新约束时使用。如果找不着这条约束，会新增，相当于mas_makeConstraints。</p>
<p>mas_remakeConstraints: 重新设置约束。先将view上所有约束移除，再新增约束</p>
<p>注意：mas_updateConstraints只能更新已有约束。如果第一次使用的是left, right设置的相对宽度。更新的时候想换成使用width。不能使用mas_updateConstraints，因为已有约束里面没有width的约束，新增width之后会跟原有left, right约束冲突。此时应该使用mas_remakeConstraints</p>
<h1 id="批量设置约束"><a href="#批量设置约束" class="headerlink" title="批量设置约束"></a>批量设置约束</h1><p>假设有View1，view2，view3三个View，我们想要他们的宽高都等于CGSizeMake(100, 50)。我们可以对他们进行批量设置：<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSValue</span> *sizeValue = [<span class="built_in">NSValue</span> valueWithCGSize:<span class="built_in">CGSizeMake</span>(<span class="number">100</span>, <span class="number">50</span>)];</div><div class="line">[@[view1,view2,view3] mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">make.size.equalTo(sizeValue);</div><div class="line">&#125;];</div></pre></td></tr></table></figure></p>
<p>由于我们还要设置view的top,left等位置约束。那可不可以在设置位置的mas_makeConstraints里面批量设置宽高呢？实际是可以的！<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//advance set</span></div><div class="line">[view1 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">(<span class="keyword">void</span>)make.top.left;</div><div class="line">make.size.equalTo(@[view2,view3,sizeValue]);</div><div class="line">&#125;];</div></pre></td></tr></table></figure></p>
<p>不过需要注意的是。设置约束的时候，view一定是已经被addSubview的(详情参考 Autolayout的第一次亲密接触 )，否则会抛异常。所以我们一般在最后一个view上加批量约束</p>
<ol>
<li>Masonry使用心得<br>1.1. Masonry是目前最流行的AutoLayout框架.<br>1.1.1. 使用:将Masonry文件包拖入项目,删掉自带的info.plist文件.demo中对Masonry的引用在.pch文件中.<br>1.1.2. 使用Masonry不需要设置<br>1.2. Masonry简单实现<br>1.2.1. 第一种实现方式<br>1.2.2. 第二种实现方式<br>1.3. Masonry使用技巧:<br>1.4. 使用Masonry添加兄弟控件约束不需要考虑父控件.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Masonry使用心得&lt;br&gt;Masonry是目前最流行的AutoLayout框架.&lt;br&gt;使用:将Masonry文件包拖入项目,删掉自带的info.plist文件.demo中对Masonry的引用在.pch文件中.&lt;br&gt;使用Masonry不需要设置&lt;br&gt;控件的translatesAutoresizingMaskIntoConstraints属性为NO;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
</feed>
