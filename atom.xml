<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shemmy</title>
  <subtitle>iOS, 架构， Python, AI, go，（看不到评论模块的请外网访问～）</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/LiShengmin/"/>
  <updated>2017-08-11T04:41:13.700Z</updated>
  <id>https://github.com/LiShengmin/</id>
  
  <author>
    <name>Shemmy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS-GUI为什么必须在线程中执行</title>
    <link href="https://github.com/LiShengmin/2017/08/11/iOS-GUI%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%85%E9%A1%BB%E5%9C%A8%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%89%A7%E8%A1%8C/"/>
    <id>https://github.com/LiShengmin/2017/08/11/iOS-GUI为什么必须在线程中执行/</id>
    <published>2017-08-11T04:35:30.000Z</published>
    <updated>2017-08-11T04:41:13.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试-为什么UI必须在主线程中更新"><a href="#面试-为什么UI必须在主线程中更新" class="headerlink" title="面试-为什么UI必须在主线程中更新"></a>面试-为什么UI必须在主线程中更新</h1><p>早期的GUI应用程序都是单线程的，并且GUI事件都是在主线程中执行,<br>现代的gui框架使用了一个略微不同的模型：模型创建了一个专门的线程，事件派发线程（event dispatch thread，RDT）来处理gui事件。</p>
<p>单线程化的GUI框架并不仅仅存在于Java中：Qt、NextStep、Macos Cocoa、XWindows,等等都是单线程化的。也并不缺少反面的尝试；有很多试图写出多线程的GUI框架的努力，最终都由于竞争条件和死锁导致的稳定性问题，又回到了单线程化的事件队列模型的老路上来：采用一个专门的线程从队列中抽取事件，并把它们转发给应用程序定义的事件处理器。（awt最初曾尝试在某种程度上支持多线程访问，单线程化地实现swing的决定主要基于AWT中的经验和教训。）<a id="more"></a></p>
<h2 id="多线程的GUI框架会尤其易受死锁的影响"><a href="#多线程的GUI框架会尤其易受死锁的影响" class="headerlink" title="多线程的GUI框架会尤其易受死锁的影响"></a><strong>多线程的GUI框架会尤其易受死锁的影响</strong></h2><p>部分原因在于:</p>
<ol>
<li>输入事件处理与任何GUI组件背后的对象模型之间存在偶发的交互。用户发起的动作总会冒泡似的从操作系统传递给应用程序—先是由os检测到一次鼠标点击，然后工具集把它转化为“鼠标点击”事件，最终它会作为一个高层事件（比如“buttonpressed”事件）转发给应用程序的监听器。</li>
<li>另一方面，应用程序发起的动作又会以冒泡的形式传回操作系统—应用程序发起一个动作要改变某个组件的背景颜色，这会被转发给一个特定的组件类，最终转发给os进行渲染。</li>
</ol>
<p>两种动作以完全相反的顺序访问相同的GUI对象，需要保证让每一个对象都是线程安全的，这会导致一系列的锁顺序的不一致，这会直接引发死锁。这个问题机会在每一次GUI工具集的开发中都会出现，是经验之谈。</p>
<p><strong>MVC模式的普遍流行形成了导致多线程GUI框架出现死锁的另一原因</strong>。把用户的互交分拨到模型、视图和控制器之间的写作中，极大地简化了GUI应用程序的实现，但这让不一致的锁顺序再次雪上加霜。控制器调用模型，模型通知视图已经发生了一些事情。控制器同样可以调用视图，视图可以依次回调模型来查询模型的状态。结果是，不一致的锁顺序再次伴随死锁的风险一同到来。</p>
<p>Graham hamilton，sun公司的vp，在他的weblog中详尽地概括了这些挑战，描述了多线程GUI工具集之所以会成为计算机科学史上又一次“失败的梦”。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">如果多线程GUI工具集经过非常谨慎的设计；如果工具集能使它加锁的方法鲜明地显露；如果你非常聪明，非常仔细，并且对工具集的整体框架有着全局的把握，我相信你还是可以成功地编写出多线程的GUI来。但是如果这些事情有一些轻微的偏差，程序多数时候仍然运行良好，但是你会偶尔看到程序挂起或者运行故障。那些密切参与了工具集设计的人能够很好地运用这种多线程方案。</div><div class="line">不幸的是，我认为这些特性并没有和商业流行度成正比。一个中等能力的程序员，整日构建着 被一些莫名其妙的原因困扰着而不能稳定运行的应用程序，我们很容易落入这种境界。于是应该程序的作者会倍感怨恨与失落，对无辜的工具集恶语相加。</div></pre></td></tr></table></figure></p>
<p>单线程化的GUI框架通过现场限制来达到现场安全性；<strong>所有GUI中的对象，包括可视组件和数据模型，都只是被事件线程访问</strong>。当然，这只把线程安全负担的一部分推给了应用程序的开发者，他们必须确保这些对象是被正确限制的。</p>
<p>这里着重提下iOS中ASDK<br>ASDK号称可以使用多线程来更新UI，但是其更新原理并不是异步的来更新，只不过做了一个中间的容器，把你要提交的修改，优先合并后再在每次读区缓冲区之后提交。</p>
<h1 id="借鉴"><a href="#借鉴" class="headerlink" title="借鉴"></a>借鉴</h1><p>这个题目是在2017@Swift群里Listen提示下找到的答案，来源于Java Concurrency in practice(Java 并发编程实战)9.1章</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;面试-为什么UI必须在主线程中更新&quot;&gt;&lt;a href=&quot;#面试-为什么UI必须在主线程中更新&quot; class=&quot;headerlink&quot; title=&quot;面试-为什么UI必须在主线程中更新&quot;&gt;&lt;/a&gt;面试-为什么UI必须在主线程中更新&lt;/h1&gt;&lt;p&gt;早期的GUI应用程序都是单线程的，并且GUI事件都是在主线程中执行,&lt;br&gt;现代的gui框架使用了一个略微不同的模型：模型创建了一个专门的线程，事件派发线程（event dispatch thread，RDT）来处理gui事件。&lt;/p&gt;
&lt;p&gt;单线程化的GUI框架并不仅仅存在于Java中：Qt、NextStep、Macos Cocoa、XWindows,等等都是单线程化的。也并不缺少反面的尝试；有很多试图写出多线程的GUI框架的努力，最终都由于竞争条件和死锁导致的稳定性问题，又回到了单线程化的事件队列模型的老路上来：采用一个专门的线程从队列中抽取事件，并把它们转发给应用程序定义的事件处理器。（awt最初曾尝试在某种程度上支持多线程访问，单线程化地实现swing的决定主要基于AWT中的经验和教训。）
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>架构-AppleReview</title>
    <link href="https://github.com/LiShengmin/2017/08/07/%E6%9E%B6%E6%9E%84-AppleReview/"/>
    <id>https://github.com/LiShengmin/2017/08/07/架构-AppleReview/</id>
    <published>2017-08-07T12:28:36.000Z</published>
    <updated>2017-08-09T10:56:15.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Apple-Review规则详细解释"><a href="#Apple-Review规则详细解释" class="headerlink" title="Apple Review规则详细解释"></a>Apple Review规则详细解释</h1><p>这个规则是直接翻译于App的官方文档～，里面我会做一些我自己的解释（用加粗或者斜体描述），请不要过度解读～<br>Developer App Store App Review App Store 审核指南, 版权所有 © 2017 Apple Inc. 保留所有权利。<a id="more"></a></p>
<p>##简介<br>App 正在改变世界，丰富人们的生活，并为像您一样的开发者提供前所未有的创新机会。因此，App Store 已成长为一个激动人心且充满活力的生态系统，正为数百万的开发者和超过十亿的用户提供服务。不管是开发新手，还是由经验丰富的程序员所组成的大型团队，我们都非常欢迎您为 App Store 创建 app，并希望能够帮助您了解我们的准则，以确保您的 app 能够快速通过审核流程。<br>App Store 的指导原则非常简单：我们希望为用户获取 app 时提供更安全可靠的体验，并为所有开发者提供借助 app 获得成功的契机。我们已按照这一原则更新了 App Review 指南。新版指南本身核心内容并没有任何变化，但其规划得更有条理，且包含更多背景以便理解。在后续页面中，您会发现这些准则已被清晰地划分为五个部分：安全、性能、业务、设计及法律。另外，请将以下几点谨记在心：<br>    •    很多儿童会从我们这里大量下载各种 app。尽管家长控制功能能为儿童提供有效保护，但您也必须做好自己份内的工作。您要知道，我们时刻都在关注这些儿童。<br>    •    App Store 是向全球数亿人分享 app 的好方法。如果您开发 app 只是为了分发给亲朋好友，那么 App Store 并不是最适合的途径。这时可考虑使用 Ad Hoc 分发或加入 Enterprise Program。如果您刚开始开发 app，请进一步了解 Apple Developer Program。<br>    •    如果我们认为 app 的任何内容或行为超出了可接受的范围，我们将拒绝该 app。您可能会问，这个可接受的范围是什么？套用最高法院大法官的一句话：当我看到的时候，我就知道了。而且，我们相信，当您超出这个范围时，您自己也会意识到。<br>    •    如果您试图欺骗系统 (例如，试图在审核流程中弄虚作假，窃取用户数据，抄袭其他开发者的作品，或者操纵评级)，我们会从该商店中移除您的 app，并将您从 Developer Program 中除名。<br>我们希望这些新准则能帮助您顺利通过 App Review 流程，并使批准和拒绝标准在整体上更加一致。本文是一个动态文稿；如果新的 app 引发了新的问题，我们可能会随时制定新的规则。也许，您的 app 就将促成新的规则。我们同样热爱 app 开发，并且尊重您所做的一切。我们正竭尽全力为您营造世界上最优秀的平台，既能让您展示才华，还能让您获得回报。</p>
<h2 id="提交之前"><a href="#提交之前" class="headerlink" title="提交之前"></a>提交之前</h2><p>为了帮助您尽可能顺利地通过 app 审批，请查看下方列出的常见错误行为，这些行为可能会导致审核流程延误或导致 app 被拒。这些内容不能代替准则或保证 app 获批，但确保核对这个列表中的每一项会是一个良好的开始。如果您的 app 不再能按预期方式工作，或者您不再积极地对其提供支持，那么这个 app 将从 App Store 中移除。进一步了解 <a href="https://developer.apple.com/support/app-store-improvements/" target="_blank" rel="external">App Store 的改善</a>。<br>请确保：</p>
<ol>
<li>测试 app 是否会发生崩溃、是否存在错误</li>
<li>确保所有 app 信息及元数据完整且正确</li>
<li>更新您的联系信息，以便 App Review 部门在需要时与您取得联系</li>
<li>提供有效的演示帐户和登录信息，以及审核 app 时所需的任何其他硬件或资源 (例如，示例二维码)</li>
<li>启用后台服务，以使其在审核期间处于活动和可用状态</li>
<li>在 App Review 备注中附上与非明显特性及 IAP (App 内购买项目) 相关的详细说明，包括支持文稿 (如适用)。如果由于地区锁定或其他限制而导致我们无法访问 app 的部分内容，请提供有关功能的视频链接</li>
<li>检查 app 是否遵循了其他文稿中的相关指南，如：<br>开发指南</li>
<li><a href="https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007072" target="_blank" rel="external">App Programming Guide</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/General/Conceptual/ExtensibilityPG/" target="_blank" rel="external">App Extension Programming Guide</a></li>
<li><a href="https://developer.apple.com/icloud/documentation/data-storage/index.html" target="_blank" rel="external">iOS Data Storage Guidelines</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010672" target="_blank" rel="external">macOS File System Documentation</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/Tools/Conceptual/SafariExtensionGuide/Introduction/Introduction.html" target="_blank" rel="external">Safari Extensions Development Guide</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/About.html" target="_blank" rel="external">iTunes Connect Developer Guide</a><br>设计指南</li>
<li><a href="https://developer.apple.com/ios/human-interface-guidelines/" target="_blank" rel="external">iOS Human Interface Guidelines</a></li>
<li><a href="https://developer.apple.com/macos/human-interface-guidelines/" target="_blank" rel="external">macOS Human Interface Guidelines</a></li>
<li><a href="https://developer.apple.com/tvos/human-interface-guidelines/" target="_blank" rel="external">tvOS Human Interface Guidelines</a></li>
<li><a href="https://developer.apple.com/watchos/human-interface-guidelines/" target="_blank" rel="external">watchOS Human Interface Guidelines</a><br>品牌和营销指南</li>
<li><a href="https://developer.apple.com/app-store/marketing/guidelines/" target="_blank" rel="external">App Store Marketing Guidelines</a></li>
<li><a href="https://developer.apple.com/apple-pay/Apple-Pay-Identity-Guidelines.pdf" target="_blank" rel="external">Apple Pay Identity Guidelines</a></li>
<li><a href="https://developer.apple.com/wallet/Add-to-Apple-Wallet-Guidelines.pdf" target="_blank" rel="external">Add to Apple Wallet Guidelines</a></li>
<li><a href="http://www.apple.com/legal/intellectual-property/guidelinesfor3rdparties.html" target="_blank" rel="external">Guidelines for Using Apple Trademarks and Copyrights</a><h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1>当用户通过 App Store 安装 app 时，他们希望获得安全的体验：app 不含令人不快或具有攻击性的内容，不会损坏用户的设备，不会在使用中造成人身伤害。我们在下方列出了主要的安全隐患。如果您想恐吓或攻击他人，则您的 app 不适合出现在 App Store 中。<h2 id="令人反感的内容"><a href="#令人反感的内容" class="headerlink" title="令人反感的内容"></a>令人反感的内容</h2>App 不应包含具有攻击性、不顾及他人感受、令人不安、惹人厌恶或低俗不堪的内容。此类内容的示例有：</li>
<li>诽谤或恶意内容，包括有关宗教、种族、性取向、性别或其他目标群体的引用或评论，特别是当 app 很可能对特定的个人或团体造成伤害时。专业政治讽刺和政治幽默作家通常无需遵循这一要求。（<strong>不许篡改和歧视他人，或者引导他人歧视～</strong>）</li>
<li>人类或动物遭到杀害、残害、酷刑、虐待的写实描绘，或者鼓励暴力的内容。在游戏中，“敌人”不能单单针对特定种族、文化、真实存在的政府或企业，或是任何其他真实存在的实体。（<em>过于血腥暴力场面</em>）</li>
<li>鼓励非法使用或不负责任地使用武器和危险物品的描述，或者促进军火购买的描述。（<em>促成社会不稳定因素</em>）</li>
<li>过于色情的内容 (韦氏词典对“色情”一词的定义是：对性器官或性活动的露骨描述或展示，目的在于刺激性快感，而非带来美学价值或触发情感)。（）</li>
<li>具有煽动性的宗教评论，或者对宗教文本进行错误或误导性的引用。（<strong>宗教自由</strong>）</li>
<li>虚假信息和功能，其中包括不准确的设备数据或用于恶作剧/开玩笑的功能，如虚假的位置跟踪器。即使指明 app“仅供娱乐”，也不能违背这一准则。支持匿名或恶作剧电话或短信/彩信的 app 会被拒绝。（<strong>不得干扰他人正常行使权利</strong>，<strong>即使指明 app“仅供娱乐”，也不得使用不准确的数据</strong>）</li>
<li>App Store 评论：</li>
</ol>
<ul>
<li>App Store 客户评论是 app 体验中不可或缺的一部分；因此，在回复客户的评论时，您应当对他们保持尊重。另外，您的回复应直接回应客户评论的主题，请勿在回复中包含个人信息、垃圾信息或营销广告。（<em>不许做广告</em>，<strong>不许说脏话</strong>，<strong>不许刻意引导</strong>）</li>
<li>利用我们提供的 API 提示用户评价您的 app：通过这项便利功能，客户无需离开 app，就可直接在 App Store 中留下评分和评论；不允许使用预定的评论提示。（<strong>使用苹果的API，就不必跳转到AppStore中再评论了～</strong>）<h2 id="用户生成的内容"><a href="#用户生成的内容" class="headerlink" title="用户生成的内容"></a>用户生成的内容</h2>对于包含用户生成内容的 app，有特定的难题需要解决，<strong>比如知识产权侵权、匿名欺凌</strong>等。为了避免滥用，包含用户生成内容或社交网络服务的 app 必须满足以下条件：</li>
</ul>
<ol>
<li>采用相应的方法来<strong>过滤令人反感的内容</strong>，以免这些内容在 app 中发布</li>
<li>制定一个机制，以举报攻击性内容并在出现问题时及时作出回应(<strong>内容举报机制必须存在</strong>)</li>
<li>若用户发布攻击性内容，可以取消其使用服务的资格（<strong>有实际关闭用户账户的能力</strong>）<br>公布联系信息，以便用户与您联系<br>如果 app 中所含的用户生成内容或服务最终主要用于<strong>色情内容、客观化现实生活中的某人 (如“性感与否”投票)、进行人身威胁或欺凌</strong>，则这些 app 不适合出现在 App Store 中，它们可能会在未经通知的情况下被移除。如果 app 中所含的用户生成内容来自于基于 web 的服务，则可显示意外产生的“NSFW (公众场所不宜)”内容，前提是这些内容是默认隐藏的，只有当用户通过您的网站将其打开时才会显示。<h2 id="儿童类别"><a href="#儿童类别" class="headerlink" title="儿童类别"></a>儿童类别</h2>“儿童类别”可帮助用户轻松地找到适合儿童的 app。如果您希望参与“儿童类别”，则应该致力于为年纪较小的用户量身打造卓越的使用体验。这些 app 不得提供 app 外链接、购买机会或其他会对儿童造成干扰的内容，除非其保留在受家长监控的指定区域中。请谨记，一旦客户认为您的 app 能够满足“儿童类别”要求，您的 app 就需要一直满足后续更新中的相应准则；即使您决定取消选择此类别，也是如此。进一步了解家长监控。<br><strong>“儿童类别”中的 app 不得展示行为广告</strong> (例如，广告商不得根据用户在 app 中的活动投放广告)，而且所有内容相关广告都必须适合儿童观看。您还应特别留意世界各地与<strong>在线收集儿童数据相关的隐私法</strong>。请务必查阅这些准则的“隐私”部分，以了解更多信息。<h2 id="人身伤害"><a href="#人身伤害" class="headerlink" title="人身伤害"></a>人身伤害</h2>如果 app 的行为方式可能会造成人身伤害，我们可能会拒绝该 app。例如：</li>
<li>如果医疗 app 可能会提供<strong>错误的数据或信息</strong>，或用于诊断或治疗病患，则这些 app 可能会面临更加严格的审核。</li>
<li>App 必须清楚地披露相关数据和方法，用于佐证声明的健康测量准确度，如果准确度或方法得不到验证，我们会拒绝该 app。例如，如果 app 声称仅通过设备上的传感器就能照 X 光、测血压、测体温、测血糖浓度或测血氧含量，则这个 app 会被拒绝。（<strong>医疗行业使用第三厂出品的硬件在这里应该也不会被允许，允许部分应该是拍摄医疗检查数据！</strong>）</li>
<li>App 应当提醒用户，除了使用该 app，还应咨询医生的意见，然后才能做出医疗决定。（<strong>强制的提示还是必须的！</strong>）</li>
<li>如果您的医疗 app 已经获得监管部门的批准，请随 app 提交相关文稿的链接。</li>
<li><strong>药物剂量计算器</strong>必须来自药品生产企业、医院、大学、健康保险公司，或是经过 FDA 或其相应国际部门的批准的其他实体。由于可能会对病患造成伤害，我们需要确保 app 将在长时间内获得支持，并保持更新。（<strong>应该没什么用</strong>）</li>
<li>App Store 中不允许分发任何鼓励<strong>食用烟草产品、使用违禁药物或摄入过量酒精</strong>的 app。<em>鼓励</em> <strong>未成年人</strong> 摄入任何上述物品的 app 都会被拒绝。为大麻、烟草或管制物品的销售<strong>提供便利</strong> (经授权的药店除外) 同样不被允许。（这里应该是对应美国宪法的<strong>22周岁以下不可以使用香烟、酒精制品</strong>，即使在自己家室内也不能！可以看到美国对未成年的保护还是很值得中国来借鉴和学习的！）</li>
<li>App 只能显示由相关执法部门公布的酒后驾车检查点，<strong>不得鼓励酒后驾车和包括超速在内的其他鲁莽行为</strong>。（<strong>这里包括了用户发的是视频，评论等</strong>）</li>
<li>App 不得促使客户以违背 Apple 硬件安全文稿的方式，或以可能会造成设备或人身伤害的方式来使用他们的设备。例如，app 不得鼓励在充电期间将设备置于床垫或枕头下，或对固态硬盘进行过多的写入循环操作。请查阅设备文稿。<h2 id="开发者信息"><a href="#开发者信息" class="headerlink" title="开发者信息"></a>开发者信息</h2>用户需要知道如何就疑问和支持问题与您取得联系。请确保您的支持 URL 中包含便捷的联系方式。如果未能提供准确的最新联系信息，不但会让客户有不好的感受，可能还会违反某些国家/地区的法律。另外，请确保在 Wallet 凭证中包含发卡机构的有效联系方式，以及分配给凭证的品牌或商标所有者的专用证书。（<strong>必须有反馈的功能</strong>）<h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><h2 id="App-完成度"><a href="#App-完成度" class="headerlink" title="App 完成度"></a>App 完成度</h2>提交以供审核的 app 应该是最终版本，应包含所有必要的元数据和全功能的 URL；占位符文本、空白网站以及其他临时内容应在提交前清除。在提交 app 之前，请务必在设备上对 app 错误和稳定性进行测试；如果您的 app 需要登录，请提供演示帐户信息 (并打开您的后台服务！)。如果您在 app 中提供了 App 内购买项目，请确保审核人员能够看到这些内容，并确保这些内容处于完整且最新的状态，否则请在审核备注中说明相关原因。请不要将 App Review 视作软件测试服务。我们将拒绝不完整的 app 套装以及会出现崩溃或存在明显技术问题的二进制文件。<br>（<strong>这里主要强调的是不要闪退～</strong>， 不要）<h2 id="Beta-版测试"><a href="#Beta-版测试" class="headerlink" title="Beta 版测试"></a>Beta 版测试</h2>App 的演示版、beta 版和试用版不适合出现在 App Store 中，请改用 TestFlight。所有通过 TestFlight 提交以进行测试发布的 app 都应旨在公开发布，并应遵循“App Review 准则”。请注意，使用 <strong>TestFlight 的 app 不得分发给测试者用以换取任何类型的报酬</strong>，<em>包括作为众筹资金的奖励</em>。对于 beta 版 app 的大幅更新应先提交至 TestFlight App Review 团队，然后再分发给您的测试者。欲了解更多信息，请访问“TestFlight Beta Testing”。<br>（<strong>这里的理解就是，当我们的公司开发了一款产品给用户使用的时候，如果只是测试不上线，使用测试渠道进行分发并且收费，是不被允许的</strong>）<h2 id="准确的元数据"><a href="#准确的元数据" class="headerlink" title="准确的元数据"></a>准确的元数据</h2>客户应该知道他们在下载或<strong>购买</strong>您的 app 时会<strong>得到什么</strong>，所以请确保 app 的描述、<strong>屏幕快照和预览能够准确</strong>反映 app 的核心体验，并记得<strong>不断更新</strong>，以便保持与新版本相应的最新状态。</li>
<li>请勿在 app 中包含未记录的功能或隐藏功能；不管是对于<strong>最终用户还是 App Review</strong> 团队，<strong>app 功能都应清晰可见</strong>。如果出现恶劣或屡教不改的行为，则可能会从 Apple Developer Program 中除名。我们正努力将 App Store 打造成值得信赖的生态系统，并希望我们的 app 开发者也能如此；如果您不诚实以待，我们之间就不会有任何业务往来。<br> （<strong>不得隐藏功能，包括测试！测试应该在上线之前被屏蔽掉，另外一点就是不要去试图欺骗苹果审核，所有功能必须在审核的时候全部可见，包括AD，View，评论等等</strong>）</li>
<li>如果您的 app 包含 App 内购买项目，请确保 app 的描述、屏幕快照和预览清楚地指明是否有需要另行购买的精选项目、关卡和订阅等。如果您决定在 App Store 中推广 App 内购买项目，请确保撰写适合公众阅读的 IAP 显示名称和描述，并且确保您的 app 能够正确处理 Purchase Intent API，以便在您的 app 上架后客户可以无缝完成购买。</li>
<li>屏幕快照应展示 app 的使用情况，而非仅显示标题封面、登录页面或初始屏幕。屏幕快照还可以包括文本说明，并展示设备上的扩展功能，如 Touch Bar。</li>
<li>预览是让客户了解 app 外观和功能的好方法。为了确保客户理解他们将在 app 中获得的体验，预览只可使用从 app 中捕获的视频屏幕。表情贴纸和 iMessage 扩展功能可以将用户体验展示在“信息”app 中。您也可以添加旁白和视频，或添加文本说明，以帮助说明任何无法仅通过视频进行阐明的内容。</li>
<li>请为 app 选择最适合的类别，并在需要帮助时参考“App Store 类别定义”。如果选择的类别与实际情况相差较远，我们可能会更改 app 的类别。</li>
<li>请在 <strong>iTunes Connect 中诚实地回答年龄段分级</strong>问题，以使 app 与家长控制功能的分级保持一致。如果 app 分级有误，客户在获得 app 时可能会感到诧异，或促使政府监管部门展开相应调查。 （<strong>在中国这个功能被遗弃了很久多数的App直接设置了18+，例如：小黄车的年龄分级应该是12+，而儿童使用了共享单车就应该是家长的责任，而和开发者无关。这里应当注意的是即使使用了18+，也不应该出现明显违背道德的图片和诱导性话语</strong>）</li>
<li>请选择一个独一无二的 app 名称，指定能够准确描述 app 的关键词，不要试图用商标术语、流行 app 的名称或其他不相关的短语来包装任何元数据，以此欺骗系统。App 名称必须限制在 30 个字符以内，且不得包含不属于 app 名称的价格、词语或描述。App 副标题是详细介绍 app 背景信息的绝佳之处；副标题必须遵循我们的标准元数据规则，且不得包含不当内容、提及其他 app 或做出无法证实的产品声明。Apple 可能会随时修改不合适的关键词。（<strong>这里是苹果保留对App名称的修改权利</strong>）</li>
<li>元数据应适合所有受众，所以请确保您的 app 和 App 内购买项目的相关图标、屏幕快照和预览保持在 4+ 年龄分级；即使您的 app 分级更高，也应如此。例如，如果您的 app 是包含暴力的游戏，请勿选择包含惨烈的死亡或用枪瞄准特定角色的图像。只有“儿童类别”的 app 才能在名称中使用类似“适合幼儿”和“适合儿童”等词语。请务必确保包括 app 名称和图标 (小图标、大图标、Apple Watch app 等) 在内的元数据彼此相似，以免引起困惑。</li>
<li>您应负责确保有权使用 app 图标、屏幕快照和预览中的所有材料，并应显示虚构的帐户信息，而非真实个人的数据。</li>
<li>请确保您的 app 注重 iOS、Mac、Apple TV 或 Apple Watch 体验，并且不在 app 或元数据中包含其他移动平台的名称、图标或图像，除非存在已获批的特定互动功能。<h2 id="硬件兼容性"><a href="#硬件兼容性" class="headerlink" title="硬件兼容性"></a>硬件兼容性</h2></li>
<li>为了确保用户能够充分利用您的 app，iPhone app 应尽量能在 iPad 上运行。我们鼓励您考虑开发通用 app，这样客户就可以在所有设备上加以使用。进一步了解通用 app。</li>
<li>通过设计，使 app 节省能耗。App <strong>不应快速耗尽电池电能</strong>、产生过多的热量或对设备资源造成不必要的负担。（<strong>之前有人说做个“暖手宝”App，对不起，你永远上不了线</strong>）</li>
<li>对于 Apple TV app，应确保用户无需使用除 Siri Remote 或第三方游戏控制器之外的硬件输入，但您可以随意提供增强功能供连接其他外围设备时使用。如果需要用户配备游戏控制器，请务必在元数据中加以明确说明，以便用户知晓他们需要额外的设备才能玩游戏。</li>
<li>App 不得建议或要求重新启动设备。（<strong>包括了系统优化软件</strong>）</li>
<li>对于通过 Mac App Store 分发的 app，还有几个额外要求需要您牢记在心：<blockquote>
<p>(i) 这些 app 必须妥当地沙盒化，并遵循“macOS File System Documentation”。另外，这些 app 只应使用相应的 macOS API 来修改其他 app 存储的用户数据 (如书签、“地址簿”或“日历”条目)。<br>(ii) 这些 app 必须使用 Xcode 中提供的技术来进行打包和提交；不允许使用第三方安装器。另外，这些 app 必须是单个的自包含 app 安装包，不能将代码或资源安装在共享位置。<br>(iii) 这些 app 不得自动启动或者在启动时包含其他自动运行的代码，不得在未经同意的情况下登录，也不得大量生成在用户退出 app 后仍在未经同意的情况下继续运行的进程。这些 app 不得将图标自动添加到 Dock 中，或在用户桌面上留下快捷方式。<br>(iv) 这些 app 不得下载或安装独立的 app、kext、额外代码或资源，以向我们在审核过程中看到的 app 添加功能，或进行大幅更改。<br>(v) 这些 app 不得申请升级至 root 特权或使用 setuid 属性。<br>(vi) 这些 app 不得在启动时显示许可证屏幕、需要使用许可证密匙或实施自己的拷贝保护措施。<br>(vii) 这些 app 必须使用 Mac App Store 分发更新；不允许使用其他更新机制。<br>(viii) 这些 app 应在当前发布的 OS 上运行，不得使用已停用或选装的技术 (如 Java、Rosetta)。<br>(ix) 这些 app 必须在单个 app 套装内包含所有的语言和本地化支持。</p>
<h2 id="软件要求"><a href="#软件要求" class="headerlink" title="软件要求"></a>软件要求</h2></blockquote>
</li>
<li>App 仅可使用公共 API，并且必须在当前发布的 OS 上运行。进一步了解公共 API。及时更新您的 app，确保淘汰掉在未来的 OS 版本中不再支持的任何过时功能、框架或技术。（<strong>使用苹果推荐的API</strong>, 例如应该淘汰掉ModelViewController：）</li>
<li>App 应自包含在其套装中，不得在指定容器范围外读取或写入数据，也不得下载、安装或执行代码，包括其他 app。仅在特殊情况下，用于教授、开发或测试可执行代码的 app 可以下载所提供的代码，但这类代码不得用于其他用途。这类 app 必须开放 app 提供的源代码，让客户可以完全查看和编辑这些源代码。</li>
<li>如果 app 传输的病毒、文件、计算机代码或程序会对操作系统和/或硬件功能 (包括推送通知和 Game Center) 的正常运行造成负面影响或导致其中断，则该 app 会被拒绝。屡教不改或恶劣的违规行为会导致开发者从 Apple Developer Program 中被除名。</li>
<li>多任务处理 app 只允许在实现预期用途时使用后台服务：VoIP、音频播放、地理位置、任务完成记录和本地通知等。如果 app 使用定位后台模式，请提醒用户，这么做会大幅缩短电池使用时间。</li>
<li>我们将在 IPv6 网络上进行审核。如果您的 app 无法与 IPv6 寻址功能兼容，则可能无法通过审核。</li>
<li>如果 app 会浏览网页，则必须使用相应的 WebKit 框架和 WebKit Javascript。</li>
<li>基于蜂窝移动网络且超过 10 分钟的视频流内容必须使用 HTTP Live Streaming，并包含一个基准 192 kbps HTTP Live Stream。</li>
<li>如果 app 会创建替代的桌面/主屏幕环境，或者模拟多 app 插件体验，则该 app 会遭到拒绝。</li>
<li>如果 app 会改变或停用标准开关 (如调高/调低音量和铃声/静音开关) 的功能，或者改变或停用其他的原生用户界面元素或行为，则该 app 会遭到拒绝。例如，app 不应屏蔽转向其他 app 的链接，或用户希望以某种特定方式运行的功能。进一步了解如何正确处理链接。</li>
<li>不得提交包含空白广告横幅或测试广告的 app。</li>
<li>SiriKit<blockquote>
<p>(i) 集成 SiriKit 的 app 只能登记无需其他 app 支持便可处理的意图，而且该意图应当与用户对所述功能的预期相符。例如，如果您的 app 属于膳食计划 app，则不应融入开始体能训练的意图，即使该 app 共享了与健身 app 的集成也不可以。<br>(ii) 确保 plist 中的词汇和短语与您的 app 及其所登记意图的 SiriKit 功能相符。别名必须与您的 app 或公司名称直接相关，不得使用通用术语或者包含第三方 app 名称或服务。<br>(iii) 以最直接的方式解析 Siri 请求，不要在请求与实现之间插入任何广告或其他市场营销信息。只有在完成相关任务需要时 (例如让用户指定特定类型的体能训练时)，才可以显示插页式用户界面。</p>
</blockquote>
</li>
<li>利用 CallKit 或包含 SMS Fraud Extension 的 app 应该只拦截已确认用于发送垃圾信息的电话号码。具有通话、短信或彩信拦截功能或垃圾信息识别功能的 app 必须在营销文本中清楚标识这些功能，并且说明归入拦截列表和垃圾信息列表的标准。通过这些工具获得的数据不得用于与运行或改进您的 app 或扩展功能没有直接关联的任何其他目的 (例如，不得出于跟踪或创建用户资料等目的来使用、共享或销售这些数据)。<h1 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h1>在 App Store 中，您可以通过多种方式让自己的 app 实现盈利。如果您的业务模式并不显而易见，请务必在其元数据和 App Review 备注中加以说明。如果我们无法理解 app 的工作方式，或者 App 内购买项目不是那么一目了然，则审核会有所延误，并可能会导致 app 被拒绝。尽管价格由您决定，但是我们不会分发要价明显过高的 app 和 App 内购买项目。对于试图以不合常理的高昂价格欺骗用户的 app，我们将予以拒绝。<br>如果我们发现您试图操纵评论，通过付费、提供奖励、经过筛选或伪造反馈来提高排名，或者要求第三方服务代您这样做，我们会采取相应措施以维护 App Store 的公正诚信。采取的措施可能包括将您从 Apple Developer Program 中除名。</li>
</ol>
<h2 id="付款"><a href="#付款" class="headerlink" title="付款"></a>付款</h2><ol>
<li>App 内购买项目：<br>如果您想要在 app 内解锁特性或功能 (解锁方式有：订阅、游戏内货币、游戏关卡、优质内容的访问权限或解锁完整版等)，则必须使用 App 内购买项目。App 可以提供 App 内购买货币，供客户在 app 内“打赏”数字内容提供商。App 不得包含指引客户使用非 IAP 机制进行购买的按钮、外部链接或其他行动号召用语。<br>通过 IAP 购买的所有点数和游戏货币不得过期，并且您应确保为所有可恢复的 App 内购买项目设计一套恢复机制。<br>请务必指定正确的可购买类型，否则您的 app 将被拒绝。<br>App 不得直接或间接地将 IAP 内容、功能或消耗品赠予他人。<br>通过 Mac App Store 分发的 app 可托管基于非 App Store 机制的插件或扩展功能。</li>
<li>订阅：无论属于 App Store 上哪一类别，app 都可以提供自动续订的 App 内购买订阅。在 app 内集成可自动续订的订阅时，请务必遵循下述指导原则。<blockquote>
<p>(a) 允许的用途：如果您提供自动续订订阅，则必须为客户提供持续的价值，订阅期必须持续至少七天，并且能够在用户的所有设备上访问。以下并非详尽列表，适当的订阅示例包括：新游戏关卡；连载内容；多玩家支持；持续提供实质性更新的 app；对媒体内容的大型合集或持续更新的访问权限；软件即服务 (SAAS)；以及云服务支持。此外：<br>订阅可与单点式服务一起提供。例如，您可以提供整个影片库的订阅，以及单部影片购买或租赁。<br>您可以提供在您自己的不同 app 间共享的单一订阅，但此类订阅不得扩展到第三方 app 或服务。订阅必须适用于可使用该 app 的所有用户设备。进一步了解在您的 app 之间共享订阅。<br>App 不得强制要求用户为 app 评级或点评、下载其他 app，或执行其他类似操作，然后才能访问该 app 的功能、内容或者使用该 app。<br>与所有 app 一样，此类服务订阅应当允许用户直接获得付费购买的项目而无需执行额外任务，如在社交媒体上发帖、上传通讯录，以及在 app 内签到特定次数等。<br>订阅不得包含消耗性的积分和游戏内货币等，即使与其他服务相结合也不行，但您可以提供包含消耗性商品打折权益的订阅，例如能以优惠价购买宝石包的高级会员资格。<br>如果要将现有 app 更改为基于订阅的业务模式，您不得减掉现有用户已付费购买的主要功能。例如，针对新客户引入订阅模式后，已购买“完整游戏解锁”的客户应能够继续访问完整版游戏。<br>(b) 升级和降级：用户应能获得无缝的升级/降级体验，并且不会出现无意间订阅同一内容的多个不同版本。请查阅关于管理订阅升级和降级选项的最佳做法。<br>(c) 订阅信息：在让客户订阅之前，您应当清晰描述付费后的具体权益。每月有几期？云存储容量有多大？具体能访问您的哪些服务？另外，务必要清晰地表述相关的要求，即您协议的 Schedule 2 中“Agreements, Tax, and Banking”部分所述的要求。</p>
</blockquote>
</li>
<li>“阅读器”App：App 应允许用户访问先前购买的内容或内容订阅 (具体包括：杂志、报纸、图书、音频、音乐、视频、专业数据库访问权限、VoIP、云存储以及经批准的服务，如用于管理学生成绩和课表的教育类 app) 以及多平台游戏中的消耗品，前提是您同意不会直接或间接引导 iOS 用户使用非 IAP 机制进行购买，并且在您介绍其他购买方式的普通沟通中没有刻意阻止用户使用 IAP。</li>
<li>内容代码：App 不得使用自身机制来解锁内容或功能，如许可证密钥、增强现实标记、二维码等。在为数不多的情形中，例如当功能依赖于特定的硬件功能时，app 可在不使用 App 内购买项目的情况下解锁该功能 (例如，天文 app 会在与望远镜同步后增加功能)。与经过批准的实际产品 (如玩具) 配合使用的可选 app 功能可在不使用 IAP 的情况下解锁特定功能，前提是同时也提供 IAP 选项。您不得要求用户通过购买无关产品或参与广告或市场活动来解锁 app 功能。</li>
<li>App 之外的实物商品和服务：如果 app 允许用户购买将在 app 之外使用的商品或服务，则必须使用 IAP 以外的购买方式来收取相应款项，如 Apple Pay 或传统的信用卡入口。App 可支持获批的虚拟货币的流通 (如比特币、狗币)，前提条件是，在该 app 能够正常使用的地区，前述做法必须遵守各州法律和联邦法律。</li>
<li>Apple Pay：如果 app 使用 Apple Pay，则在销售任何商品或服务之前，必须先向用户提供所有的基本购买信息，并且必须正确使用 Apple Pay 品牌和用户界面元素，具体要求可参考“Apple Pay 识别标志指南”和“人机界面准则”。使用 Apple Pay 提供重复付款服务的 app 至少需要披露以下信息：<blockquote>
<p>续订周期的时长；除非被取消，否则续订将会继续<br>每个周期中会提供哪些服务<br>将向客户收取的实际费用<br>如何取消</p>
<h2 id="其他业务模式问题"><a href="#其他业务模式问题" class="headerlink" title="其他业务模式问题"></a>其他业务模式问题</h2><p>下方列表并非详尽清单，并且您提交的 app 可能会导致我们的政策有所更改或更新，但这里有一些额外的应做事宜和勿做事宜需要您谨记在心：</p>
</blockquote>
</li>
<li>可以接受<blockquote>
<p>(i) 在您的 app 中，出于购买或促销目的而展示您的其他 app，只要您的 app 不只是简单地罗列其他 app。<br>(ii) 显示或推荐专为经批准的特定需求而设计的第三方 app (如健康管理、航空以及辅助功能等)。您的 app 应能提供持续不断的编辑内容，这样 app 才不会看起来像是个摆设。<br>(iii) 在租借期限结束后，禁止访问经批准的特定租借内容 (例如电影、电视节目、音乐、图书)；所有其他项目服务不得存在过期时间。<br>(iv) Wallet 凭证可用于付款或接收付款、传输交易或是提供身份验证 (例如电影票、优惠券和 VIP 凭据)。如将 Wallet 凭证用作其他用途，则可能会导致 app 被拒，Wallet 凭据也有可能被撤销。<br>(v) 保险类 app 必须免费提供，并且必须遵守 app 发布地区的相关法律，且不得使用 IAP。<br>(vi) 经批准的非营利组织可以在他们持有的 app 或第三方 app 内进行筹款活动，前提是这些筹款活动必须遵守所有的 App Review 准则并提供 Apple Pay 支持。这类 app 必须披露资金的计划用途，遵守所有必要的当地和联邦政府法律，并且确保向捐款人提供相应的报税收据。在被要求时，还应向 App Review 团队提供其他信息。向捐款人介绍其他非营利组织的非营利组织平台必须确保 app 中列出的每一家非营利组织都已通过非营利组织批准流程。进一步了解如何成为批准的非营利组织。</p>
</blockquote>
</li>
<li>不可接受<blockquote>
<p>(i) 创建与 App Store 类似且用于显示第三方 app、扩展功能或插件的界面，或将其作为热门 app 的合集。<br>(ii) 通过由硬件或操作系统提供的内置功能 (诸如推送通知、照相机或陀螺仪) 或 Apple 服务 (如 Apple Music 访问或 iCloud 存储) 获利。<br>(iii) 人为地刷广告展示次数或者广告点进次数的 app，以及主要设计目的在于显示广告的 app。<br>(iv) 在 app 内为慈善机构和募款方筹集资金，除非您是经批准的非营利组织或依上文 3.2.1 (vi) 规定获得了许可。出于以上目的筹集资金的 app 必须在 App Store 上免费，并只能在 app 之外筹集，例如通过 Safari 或短信。<br>(v) 强行限制 app 的用户群，例如限制特定地区或运营商。<br>(vi) App 应当允许用户直接获得付费购买的项目而无需执行额外的任务，如在社交媒体上发帖、上传通讯录，以及在 app 内签到特定次数等。App 不得要求用户必须先为 app 评分或点评、观看视频、下载其他 app、点击广告或进行其他类似操作，然后才能访问 app 的功能、内容或使用 app，或者接受现金或其他补偿。<br>(vii) 人为操纵用户在其他服务中的可见性、状态或排名，除非相关服务的条款和条件允许这样做。<br>(viii) App Store 中不允许分发协助进行二元期权交易的 app。请考虑使用网页版 app。</p>
<h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p>Apple 客户非常看重简洁、雅致、创新且易于使用的产品，这也正是我们希望在 App Store 上看到的。您可尽情提供各种优秀设计，但在 App Store 上被获准发布的 app 至少需要满足以下标准。另请记住，即使在 app 获得批准之后，您也应当对其进行更新，确保 app 能正常工作并持续吸引新客户和现有客户。停止服务或体验下降的 app 随时可能会从 App Store 中被移除。</p>
<h2 id="抄袭者"><a href="#抄袭者" class="headerlink" title="抄袭者"></a>抄袭者</h2><p>请拿出您自己的想法。我们知道您有自己的奇思妙想，那么请将它们付诸实际。请不要简单照搬 App Store 上的热门 app，或只是细微修改其他 app 的名称或 UI，就将其挪为己用。这么做不但有引发知识产权侵权索赔的风险，更会加大在 App Store 中浏览的难度，而且对您的开发者同仁来说也不公平。</p>
<h2 id="最低功能要求"><a href="#最低功能要求" class="headerlink" title="最低功能要求"></a>最低功能要求</h2><p>App 应包含功能、内容和 UI，而不仅仅是一个经过重新包装的网站。如果 app 没有什么实用价值、毫无新意或者不太像是一个 app，那它就不适合出现在 App Store 中。如果 app 不能带来持久的娱乐价值，或只是让人感到毛骨悚然，则无法获得批准。如果 app 只是一首歌曲或一部影片，则应提交到 iTunes Store。如果 app 只是一本书籍或游戏指南，则应提交到 iBooks Store。</p>
</blockquote>
</li>
<li>App 应该为实现预期用途而使用 API 和框架，并在 app 描述中说明集成详情。例如，HomeKit 框架应提供家居自动化服务，HealthKit 则应该用于保持健康和健身目的，并集成在“健康”app 中。</li>
<li>除了目录类 app 之外，app 不应只用于市场营销材料、广告、网络剪报、内容聚合或链接集合。</li>
<li>App 应能独立工作，无需安装其他 app。</li>
<li>与表盘类似的 Apple Watch app 可能会令人感到困惑，因为用户会认为这些 app 能与各种设备功能 (如轻扫、通知和第三方功能栏) 配合使用。将创意性的时间表现方式用作 app 界面是个好点子 (例如，供冲浪者使用的潮汐时钟)，但是如果您的 app 与表盘过于相像，则可能会被我们拒绝。</li>
<li>主要用作 iCloud 和 iCloud Drive 文件管理器的 app 需要包含更多的 app 功能，才能获得批准。</li>
<li>利用商业化模板或 app 生成服务创建的 app 会被拒绝。<h2 id="重复-App"><a href="#重复-App" class="headerlink" title="重复 App"></a>重复 App</h2>请不要为同一个 app 创建多个套装 ID。如果您的 app 针对特定位置、运动队、大学等存在不同版本，请考虑提交单个 app，并提供 App 内购买项目以提供不同的功能。同时，请避免继续在已有大量类似 app 的类别下进行开发；App Store 上已经有太多模拟放屁、打嗝声音的 app，以及手电筒和爱经 app。上传大量相似版本 app 的开发者会遭到 Apple Developer Program 的除名。<h2 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h2>托管或包含扩展功能的 app 必须遵循“App Extension Programming Guide”或“Safari Extensions Development Guide”，如果可行，还应包含诸如帮助屏幕和设置界面在内的一系列功能。您应当在 app 的市场营销文本中清晰且准确地披露提供了哪些扩展功能。</li>
<li>键盘扩展功能还需要遵循一些额外的规则。<br>它们必须：<br>提供键盘输入功能 (如可输入字符)；<br>如果键盘中含有图像或表情符号，请遵循贴纸准则；<br>提供切换到下一个键盘的方法；<br>在没有网络连接和不要求完全访问权限的情况下仍能使用；<br>按照“App Extension Programming Guide”所述提供数字和十进制键盘类型；<br>收集用户活动数据只是为了改进其键盘扩展功能在 iOS 设备上的性能。<br>它们不得：<br>包含市场营销、广告或 App 内购买项目；<br>启动“设置”之外的其他 app；或者<br>将键盘按键用于其他行为，例如按住 Return 键来启动相机等。</li>
<li>Safari Extension 必须在 macOS 上的最新版 Safari 上运行。它们不得干扰系统和 Safari UI 元素，并绝不能包含恶意或误导性的内容或代码。违背此规则会遭到 Apple Developer Program 除名。除了正常工作所必需的网站，Safari Extension 不得要求访问更多网站。</li>
<li>表情贴纸<br>表情贴纸是让“信息”变得更动态、更有趣的绝佳方式，让人们能够以更巧妙、有趣、有意义的方式表达自我。无论您的 app 含有表情贴纸扩展功能，还是您要创建单独的表情贴纸包，其内容均不得冒犯用户、造成负面体验或违反相关法律。<blockquote>
<p>(i) 通常，不适合在 App Store 上发布的内容也不适合放入表情贴纸内。<br>(ii) 考虑地区敏感性，不要在难以接受或者会违反当地法律的国家/地区提供您的表情贴纸包。<br>(iii) 如果您的表情贴纸含义不易理解，请在审核备注中附上清晰的说明，从而避免导致审核流程的延误。<br>(iv) 确保您的表情贴纸在您的朋友与家人之外具有相关性；它们不应特定于个人活动、群体或关系。<br>(v) 您必须对表情贴纸中的内容，持有所有必要的著作权、商标权和形象权及授权许可，不得提交任何未经授权的内容。请记住，您必须能够在要求时提供可核实的文件。若 app 内含有您无权使用的表情贴纸内容，该 app 将从 App Store 中去除，屡次侵权者将从 Developer Program 中除名。如果您认为自己的内容遭到其他提供商侵权，请在此处提交权利主张。</p>
<h2 id="Apple-站点和服务"><a href="#Apple-站点和服务" class="headerlink" title="Apple 站点和服务"></a>Apple 站点和服务</h2></blockquote>
</li>
<li>App 可以使用获批的 Apple RSS Feed (如 iTunes Store RSS Feed)，但不能抹除 Apple 站点 (如 apple.com、iTunes Store、App Store、iTunes Connect、开发者门户等) 的任何信息，也不能使用这类信息进行排名。</li>
<li>Apple Music<blockquote>
<p>(i) MusicKit API 可以让客户在使用您的 app 时访问自己的订阅。它们旨在为 Apple Music 订阅用户提供轻松简便的音乐播放体验。用户必须能够发起 Apple Music 流媒体播放，并且能够使用“播放”、“暂停”和“跳过”等标准媒体控件来浏览音乐内容。此外，您的 app 不得要求用户通过付款或间接的货币化方式来获取 Apple Music 服务的访问权限 (如 App 内购买项目、广告、要求使用用户信息等)。请勿下载、上传或分享源自 MusicKit API 的音乐文件，除非 MusicKit 文稿中已明确允许。<br>(ii) 使用 MusicKit API 并不能取代为获得更深入或更复杂的音乐集成而可能需要的授权许可。例如，如果您希望您的 app 在特定时刻播放特定的歌曲，或者创建可以在社交媒体上分享的音频或视频文件，您需要直接联系版权持有人来获得许可 (如同步或改编权利) 和资源。封面插图和其他元数据仅可用于与音乐播放或播放列表相关的用途 (包括展示 app 功能的 App Store 屏幕快照)，未经版权持有人明确授权，不得用于任何市场营销或广告目的。在 app 中集成 Apple Music 服务时，请务必遵循“Apple Music Identity Guidelines”。<br>(iii) 访问 Apple Music 用户数据 (如播放列表和个人收藏) 的 app 必须在用途字符串中清楚披露这类访问行为。收集的任何数据均不得与第三方分享，也不得用于除支持或改进 app 体验之外的任何其他用途。这类数据不得用于识别用户身份或设备，也不得用于广告定向宣传目的。</p>
</blockquote>
</li>
<li>不得使用 Apple 服务 (包括 Game Center 或推送通知等) 发送垃圾邮件、进行网络钓鱼，或者向客户发送未经请求的信息。不得尝试进行查找、跟踪、关联、挖掘、获得或利用玩家 ID、别名以及通过 Game Center 获得的其他信息。否则将会遭到 Apple Developer Program 的除名。</li>
<li>App 不能将推送通知列为必需条件，并不能将该功能用于广告、推广或直接行销用途，或者用来发送敏感的个人或保密信息。</li>
<li>仅以 Game Center 团队批准的方式使用 Game Center 玩家 ID，并不得在 app 中显示或向任何第三方显示。<h2 id="备选-App-图标"><a href="#备选-App-图标" class="headerlink" title="备选 App 图标"></a>备选 App 图标</h2>App 可以使用自定图标以传达特定信息 (例如表达对某个运动团队的喜爱)，前提是每次更改都由用户发起，并且 app 中应包含恢复至原始图标的设置。所有图标变体必须与 app 的内容相关，并且更改内容在所有系统资源之间应保持一致，以便“设置”和“通知”等位置中显示的图标与新的 Springboard 图标相吻合。这项功能不可用于动态、自动或连续性更改，例如用于反映最新天气信息和日历通知等。<h2 id="第三方软件"><a href="#第三方软件" class="headerlink" title="第三方软件"></a>第三方软件</h2>App 可以包含或运行由第三方开发者提供的代码 (如基于 HTML5 的游戏)，前提是这类代码没有在商店界面或类似商店的界面中提供，而且相关软件 (1) 是免费软件或需通过 App 内购买项目进行购买；(2) 仅使用标准 WebKit 视图中提供的功能；您的 app 必须使用 WebKit 和 JavaScript Core 来运行第三方软件，且不得试图扩展或披露原生平台 API 给第三方软件；(3) 由已加入 Apple Developer Program 且签署“Apple Developer Program 许可协议”的开发者提供；并且 (4) 遵守各个 App Review 指南中的条款 (例如，不含令人反感的内容；使用 IAP 解锁特性和功能)。您必须在被要求时提供您的 app 中包含的第三方软件和元数据的索引信息。<h1 id="法律"><a href="#法律" class="headerlink" title="法律"></a>法律</h1>只要 app 向某个地区的用户提供，那么就必须遵守该地区的所有法律要求 (如果您不太确定，请与律师联系)。我们知道这些东西非常复杂，但理解所有本地法律，并确保您的 app 能满足所有法律要求，而不仅仅是下方列出的准则，是您必须承担的责任。当然，如果 app 存在唆使、宣传或鼓励犯罪的行为或明显不负责任的行为，则会被拒绝。<h2 id="隐私"><a href="#隐私" class="headerlink" title="隐私"></a>隐私</h2>在 Apple 生态体系中，保护用户隐私总是第一要务。您要在处理个人数据时小心谨慎，以确保遵守了适用的法律和“Apple Developer Program 许可协议”中的条款，并满足客户的期待。尤其是：</li>
<li>数据收集和存储<blockquote>
<p>(i) 如果 app 会收集用户信息或使用数据，其内必须制定隐私政策，并征得用户的同意才能收集。这包括 (但不限于) 以下 app：实施 HealthKit 或其他健康/医疗技术、HomeKit、键盘扩展功能、Apple Pay、表情贴纸和 iMessage 扩展功能的 app；包含登录信息的 app；或访问设备上用户数据的 app。App 描述中应当注明 app 会要求访问哪些内容类型 (例如，位置、通讯录和日历等)，并说明当用户不授予许可时，app 的哪些功能会无法正常工作。<br>(ii) 如果 app 不包含基于帐户的重要功能，请允许用户在不登录的情况下使用。App 不得要求用户提供个人信息才能正常使用，除非个人信息与 app 的核心功能直接相关，或是法律要求时。如果您的核心 app 功能与特定的社交网络 (如 Facebook、微信、微博或 Twitter 等) 不相关，您必须提供无需登录或其他类似机制的访问权限。调取基本档案信息、分享到社交网络或邀请朋友使用 app 等不视为核心 app 功能。<br>(iii) 如果开发者开发的 app 试图暗中收集用户密码或其他用户私人数据，那么该开发者会遭到 Apple Developer Program 的除名。<br>(iv) 必须使用 SafariViewController 在显著位置向用户显示信息；不得隐藏该控制器，也不能被其他视图或图层遮挡。此外，未经用户的知情和同意，app 不得私下利用 SafariViewController 来追踪用户。</p>
</blockquote>
</li>
<li>数据使用和共享<blockquote>
<p>(i) 您不得尝试、协助或鼓励他人，根据您所谓以“匿名”、“汇总”或其他不可识别的方式收集的数据来识别用户身份或重建用户资料。除非先获得用户的许可并提供有关数据使用方式和使用位置的相关信息，否则不得使用或传输用户的个人数据。<br>(ii) App 收集的数据只有在为了改进与 app 功能相关的用户体验或软/硬件表现时，或在遵循“Apple Developer Program 许可协议”的前提下用于广告投放用途时，才能使用或与第三方分享。<br>(iii) 从 HomeKit API 收集的数据不得用于投放广告或是基于使用情况进行其他数据挖掘。<br>(iv) 使用 Apple Pay 的 app 只能与第三方共享通过 Apple Pay 获得的用户数据，以帮助或改进商品或服务的交付。</p>
</blockquote>
</li>
<li>健康和健康研究<br>健康、健身和医疗数据特别敏感，涵盖这些领域的 app 必须满足额外的规则，并确保客户隐私受到保护：<blockquote>
<p>(i) App 仅能在获得批准的情况下，出于改进健康管理或健康研究的目的，使用在健康、健身和医疗研究背景下收集的数据 (包括从 HealthKit API、“运动与健身”或健康领域人体研究中收集的数据) 或将其披露给第三方，不得用于广告投放或基于使用情况进行其他数据挖掘。<br>(ii) App 不得将虚假或错误数据写入 HealthKit 或其他任何医疗研究/健康管理 app，不得在 iCloud 中存储个人健康信息。<br>(iii) 开展健康领域人体研究的 app 必须获得参与人员提供的知情同意书，如果涉及未成年人，则必须获得由其家长或监护人提供的知情同意书。上述知情同意书必须涵盖以下内容：(a) 研究的性质、目的和时长；(b) 具体规程，给参与人员带来的风险和益处；(c) 关于保密和数据处理 (包括与第三方共享信息的情况) 的信息；(d) 用于回答参与人员问题的联系人；以及 (e) 退出流程。<br>(iv) 用于开展健康领域人体研究的 app 必须获得一家独立伦理审查委员会的批准。一经要求，必须提供此类批准的证明。</p>
</blockquote>
</li>
<li>儿童<br>出于多种原因，您在处理儿童的个人数据时必须小心谨慎。我们建议您仔细阅读所有要求，以遵循相关法律，如《儿童在线隐私保护法》(“COPPA”) 和其他国际上适用的同等法律。<br>App 只能出于遵守适用儿童隐私法规的目的要求用户提供出生日期或家长联系信息，但必须提供一些适用于各年龄层用户的实用功能或娱乐价值。<br>此外，“儿童类别”中的 app，以及向未成年人收集个人信息 (例如姓名、地址、电子邮件、位置、照片、视频、图画、能否聊天、其他个人数据，或是将永久标识符与以上任何信息组合使用)、传输此类信息或能够共享此类信息的 app，则必须遵守适用的儿童隐私保护法规，且必须拥有隐私政策。为了清楚起见，“儿童类别”的家长监控要求，通常并不完全等同于在这些隐私法规下征得家长的同意后收集个人数据。</li>
<li>定位服务<br>只有在定位服务与 app 提供的功能和服务直接相关时，才能在 app 中使用定位服务。基于位置的 API 不得用于提供紧急服务，不得对汽车、飞机和其他设备进行自主控制 (小型设备，如轻量无人机和玩具除外)，不得遥控汽车防盗系统等。在收集、传输或使用位置数据之前，务必进行通知并获得用户同意。如果 app 会使用后台定位服务，请务必在 app 中说明相应的原因；请参考“Human Interface Guidelines”，了解相应的最佳做法。<h2 id="知识产权"><a href="#知识产权" class="headerlink" title="知识产权"></a>知识产权</h2>请确保 app 只包含由您创建或拥有使用许可的内容。如果您已越线并在未经许可的情况下使用了内容，您的 app 可能会被移除。当然，这也意味着如果他人抄袭了您的作品，则他们的 app 也可能会被移除。如果您认为自己的知识产权在 App Store 上受到了其他开发者的侵犯，请通过网络表单提交权利主张。各个国家/地区的法律互不相同，但请务必避免以下常见错误：</li>
<li>一般性：不得在未经授权的情况下，在 app 中使用受保护的第三方材料 (例如商标、版权作品、专利设计)；也不得在 app 套装或开发者名称中包含虚假、抄袭或误导性的演示、名称或元数据。App 提交方应当是拥有或获授权使用知识产权和其他相关权利的个人或法律实体，并且应对提供 app 中的任何服务负责。</li>
<li>第三方站点/服务：如果您的 app 会使用、访问第三方服务、通过访问第三方服务盈利或是显示第三方服务的内容，请确保您获得在该服务的使用条款下进行此类操作的特别许可。如有相应要求，则必须提供相关授权。</li>
<li>音频/视频下载：app 不得促进非法文件共享，或在没有获得这些资源的明确授权的情况下，提供从第三方来源 (如 Apple Music、YouTube、SoundCloud、Vimeo) 保存、转换或下载媒体资源的能力。视频/音频内容流也有可能触犯使用条款，所以请务必在 app 访问这些服务前，进行检查。如有相应要求，则必须提供相关文稿。</li>
<li>Apple 认可：不得误导或暗示 Apple 是 app 的来源或提供商，或者 Apple 以任何形式表示认可其质量或功能。如果您的 app 被选为“编辑选荐”，Apple 将自动显示相应徽章。</li>
<li>Apple 产品：不得创建与现有 Apple 产品、界面 (如 Finder)、app (如 App Store、iTunes Store 或“信息”) 或广告主题外观相似或容易混淆的 app，请勿拼错 Apple 产品的名称 (如 Iphone 版 GPS、iTunz)。App 和扩展功能 (包括第三方键盘和贴纸包) 不得含有 Apple 表情符号。iTunes 音乐预览内容不得用于其娱乐价值 (如用作照片拼贴画的背景音乐或游戏配音) 或其他未获授权的方式。如果 app 显示健身记录圆环，请不要修改圆环本身的观感，以及其代表的数据。“人机界面准则”中含有关于如何使用健身记录圆环的更多信息。<h2 id="游戏、赌博和彩票"><a href="#游戏、赌博和彩票" class="headerlink" title="游戏、赌博和彩票"></a>游戏、赌博和彩票</h2>赌博、游戏和彩票的管理难度大，是 App Store 上受到最多管制的 app 类别之一。只有全面核实了即将发布您的 app 的所有国家/地区的相关法律要求后，才能包含此功能，并且要做好准备此功能的审核流程需要更长的时间。您需要谨记以下事项：</li>
<li>抽奖和比赛必须由 app 的开发者赞助。</li>
<li>抽奖、比赛和抽彩的正式规则必须在 app 中注明，并且必须明确表示 Apple 不是赞助者，也没有以任何形式参与活动。</li>
<li>App 不得通过 IAP 购买点数或货币，以用于任何种类的真实货币游戏；不得向用户出售彩票或抽彩券；不得在 app 内进行资金转账。</li>
<li>提供真实货币游戏 (例如体育下注、扑克、赌场游戏、赛马) 或彩票的 app 必须在使用该 app 的地区获得必要的许可和批准，且只能在这些地区发布，此类 app 在 App Store 中必须免费提供。App Store 上不允许发布非法的赌博辅助工具，包括记牌器。彩票 app 必须有报酬、几率及奖品。<br>提交之后<br>在 iTunes Connect 中提交 app 和元数据之后，您随即就会进入审核流程。请谨记以下几点：<br>时间安排：App Review 团队将尽快检查您的 app，而且我们一直在力求缩短审核时间。进一步了解 App Review。<br>状态更新：App 的当前状态会反映在 iTunes Connect 中，所以请多留意此处。<br>加急请求：如果您遇到了严重的时间问题，可以申请加快审核。请仅在您真的需要加快审核时才提出申请，以便其他开发者的加急请求不受影响。如果我们发现您滥用此系统，从此以后我们可能都会拒绝您的申请。<br>发布日期：如果您设定在未来某个日期发布 app，在此日期到来之前，即使这个 app 已获得 App Review 团队的批准，也不会显示在 App Store 上。请注意，您的 app 可能需要长达 24 小时才能显示在所有选定的商店中。<br>拒绝：我们的目标是公平、持续地遵循这些准则，但是人无完人。如果您的 app 被拒绝，但您存在疑问，或希望提供其他信息，请使用解决方案中心，以与 App Review 团队直接沟通。这样可以帮助您的 app 出现在商店中，也可帮助我们改进 App Review 流程，并在我们的政策中发现需要阐明的部分。如果您仍对结果不满意，请提交申诉。<br>我们期待看到您开发出更多优秀作品！</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Apple-Review规则详细解释&quot;&gt;&lt;a href=&quot;#Apple-Review规则详细解释&quot; class=&quot;headerlink&quot; title=&quot;Apple Review规则详细解释&quot;&gt;&lt;/a&gt;Apple Review规则详细解释&lt;/h1&gt;&lt;p&gt;这个规则是直接翻译于App的官方文档～，里面我会做一些我自己的解释（用加粗或者斜体描述），请不要过度解读～&lt;br&gt;Developer App Store App Review App Store 审核指南, 版权所有 © 2017 Apple Inc. 保留所有权利。
    
    </summary>
    
    
      <category term="架构" scheme="https://github.com/LiShengmin/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>架构-重构-SRP</title>
    <link href="https://github.com/LiShengmin/2017/08/04/%E6%9E%B6%E6%9E%84-%E9%87%8D%E6%9E%84-SRP/"/>
    <id>https://github.com/LiShengmin/2017/08/04/架构-重构-SRP/</id>
    <published>2017-08-04T15:26:14.000Z</published>
    <updated>2017-08-11T04:40:55.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重构-SRP"><a href="#重构-SRP" class="headerlink" title="重构- SRP"></a>重构- SRP</h1><p>今天看了一篇朋友推荐文章，如何重构“箭头型”代码，看了这篇文章，不得不感叹历史是何其相似。一个再优秀的产品，最终都是死在这些技术（卧底）手里～<br>&lt;!— more —&gt;<br>我们先来看下这段代码：<br><img src="http://coolshell.cn//wp-content/uploads/2017/04/IMG_7411.jpg" alt="image"><br>其实看到这段代码的时候我心中是一万头草泥马飞过的，因为眼熟啊，是在我们安卓转去写前端的时候，全体技术Review他的代码的时候，我不敢想象这段代码放在公司的代码库中历经5年之后的样子。（我们那个比这个长多了，差不多3倍长度缩进）</p>
<p>话不多说，我们先来分析这种代码里面有可能有什么鬼～</p>
<ol>
<li>状态机  最有可能的就是上来一串Switch-Case ，最为状态码</li>
<li>多元素状态机， 哈哈哈就是Switch-Case ，case里面还需要判断。。</li>
<li>元素容错，就是这个元素不可能出现的值全部过滤掉</li>
<li>for循环，对其中元素进行遍历</li>
<li>多线程，</li>
<li>Block嵌套/ 函数嵌套</li>
</ol>
<p><strong>本文全部使用伪代码，便于理解～</strong><a id="more"></a></p>
<h2 id="状态机-多层级状态机"><a href="#状态机-多层级状态机" class="headerlink" title="状态机/多层级状态机"></a>状态机/多层级状态机</h2><p>首先，我草这种东西根本就没法抽取好么。。但是这里还是要谈下去的，就是输入值，我们可以对这些来自不同值的源状态在一个方法里进行统一返回，<br>举个🌰：</p>
<p>我们对第一个值判断后可以得出3个状态，对第二个值判断后可以得到另外1个状态，并且其中有一个和第一个相重合<br><img src="/image/28915069-9AA5-4569-8112-29FABBEE7398.png" alt="image2"></p>
<p>伟大的谁说过来着没有什么是不能通过增加一个中间层来解决的，如果有就加2层～如下～<br><img src="/image/1E0E7807-086A-4B14-9983-91BF5DECE378.png" alt="image3"></p>
<p>不得不说这是一个可以解决的方案，但是不可忽视的是中间层的增加的心智成本～<br>如果多状态机，最后输出的状态只有有限的几个，建议使用中间层解决～这样就可以将状态维护部分的代码抽出，这样如果你发现如果状态维护困难，可以将中间层，抽象成为一个专门的状态机，来维护，这样也不会改变你代码的层册和逻辑，变相降低了项目的维护的成本。</p>
<p>这里面其实还有一个Tip，就是将所有的case都抽成一个函数，就是将每个case进行一个包装～这样可以显著降低层次。</p>
<h2 id="元素容错"><a href="#元素容错" class="headerlink" title="元素容错"></a>元素容错</h2><p>如果要对元素容错，如果需要容错非常多，那么尽可能抽象成为函数，在函数内的通用判断，例如是不是为空，是否越界什么的都可以抽象出来，单独包装，以便其他类来复用，最后通过一个返回值来判断是否合乎逻辑。<br>🌰：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isEligibility</span><span class="params">(value: String, value2: Int)</span></span> -&gt; text?  &#123;</div><div class="line">	value <span class="keyword">is</span> not nill  <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> “value <span class="keyword">is</span> null”</div><div class="line">	&#125;</div><div class="line">	…</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">if</span>  <span class="keyword">let</span> errorStr = isEligibility(“name”, “<span class="number">1</span>”)  != <span class="literal">nil</span> &#123;</div><div class="line">		accessError(errorStr)</div><div class="line">	&#125;</div><div class="line">	…</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>尽可能梳理for循环中做的事～然后分别抽象为函数，并将值给予你抽象的函数，进行运算～<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="title">func</span> for_imp() &#123;</div><div class="line">	for index <span class="keyword">in</span> indexs &#123;</div><div class="line">		<span class="keyword">let</span> <span class="class"><span class="keyword">data</span> = getData()</span></div><div class="line">		reloadView(<span class="class"><span class="keyword">data</span>)</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>没想好先留着，需要小伙伴们的支援～<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="title">func</span> dispath() &#123;</div><div class="line">	dispath_async(queen) &#123;</div><div class="line">		for index <span class="keyword">in</span> indexs &#123;</div><div class="line">			<span class="keyword">let</span> <span class="class"><span class="keyword">data</span> = getData()</span></div><div class="line">			dispath_main() &#123;</div><div class="line">				reloadView(<span class="class"><span class="keyword">data</span>)</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我自己的做法都是封装成逃逸闭包，然后调用的时候直接写一套大括号～将内部东西抽象成为一个或者多个函数～。层级增加2～<br>问题是这部分根本就不是逻辑的一部分，只是必须要的手段，你抽象为函数也没有道理～<br>我认为比较好的做法是写一些语法糖，例如：<br>func.().main 或者 func().async的玩应，回去写写看吧～</p>
<h2 id="函数嵌套"><a href="#函数嵌套" class="headerlink" title="函数嵌套"></a>函数嵌套</h2><p>iOS开发者中，只有Swfit中才会出现的痛了！<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> 01 <span class="params">()</span> &#123;</span></div><div class="line">	<span class="function"><span class="keyword">func</span> 11<span class="params">()</span> &#123;</span></div><div class="line">		<span class="function"><span class="keyword">func</span> 21<span class="params">()</span> &#123;</span></div><div class="line">			block^() = ^&#123;</div><div class="line">				func11()</div><div class="line">			&#125;</div><div class="line">			block()</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>给个中肯的建议就是不要这么写函数，函数嵌套最多3层好吧～<br>同时希望小伙伴给出解决方案～</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://coolshell.cn/articles/17757.html" target="_blank" rel="external">如何重构“箭头型”代码 | | 酷 壳 - CoolShell</a></p>
<p>#架构</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;重构-SRP&quot;&gt;&lt;a href=&quot;#重构-SRP&quot; class=&quot;headerlink&quot; title=&quot;重构- SRP&quot;&gt;&lt;/a&gt;重构- SRP&lt;/h1&gt;&lt;p&gt;今天看了一篇朋友推荐文章，如何重构“箭头型”代码，看了这篇文章，不得不感叹历史是何其相似。一个再优秀的产品，最终都是死在这些技术（卧底）手里～&lt;br&gt;&amp;lt;!— more —&amp;gt;&lt;br&gt;我们先来看下这段代码：&lt;br&gt;&lt;img src=&quot;http://coolshell.cn//wp-content/uploads/2017/04/IMG_7411.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;其实看到这段代码的时候我心中是一万头草泥马飞过的，因为眼熟啊，是在我们安卓转去写前端的时候，全体技术Review他的代码的时候，我不敢想象这段代码放在公司的代码库中历经5年之后的样子。（我们那个比这个长多了，差不多3倍长度缩进）&lt;/p&gt;
&lt;p&gt;话不多说，我们先来分析这种代码里面有可能有什么鬼～&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;状态机  最有可能的就是上来一串Switch-Case ，最为状态码&lt;/li&gt;
&lt;li&gt;多元素状态机， 哈哈哈就是Switch-Case ，case里面还需要判断。。&lt;/li&gt;
&lt;li&gt;元素容错，就是这个元素不可能出现的值全部过滤掉&lt;/li&gt;
&lt;li&gt;for循环，对其中元素进行遍历&lt;/li&gt;
&lt;li&gt;多线程，&lt;/li&gt;
&lt;li&gt;Block嵌套/ 函数嵌套&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;本文全部使用伪代码，便于理解～&lt;/strong&gt;
    
    </summary>
    
    
      <category term="架构" scheme="https://github.com/LiShengmin/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>架构-CodeReview</title>
    <link href="https://github.com/LiShengmin/2017/08/04/%E6%9E%B6%E6%9E%84-CodeReview/"/>
    <id>https://github.com/LiShengmin/2017/08/04/架构-CodeReview/</id>
    <published>2017-08-04T15:23:53.000Z</published>
    <updated>2017-08-11T04:39:45.052Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要是规范iOSer们对于代码整体风格的选择，明确梳理了大家在写Program时候需要注意的点。<br>我会从命名、注释、对象调用、数据结构、Test、错误处理为大家整理，欢迎私信讨论～<br>希望我的博客可以为大家提供帮助～</p>
<p>这是一篇没有完工的文章我会逐步补充进来的<a id="more"></a></p>
<h1 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h1><p>先来阐述下我的观点：好的名字可以让你代码抛去无谓的注释，带给你好的编程体验，在别人接手你的代码时候不需要更多的学习成本，也限制了你去制造的混乱！！<br>我遇见过很多程序员，他们有的非常不在意名字起的是否准确，好坏，多数都是拍脑袋，另外一派非常在意名字的书写，例如SQL的语句系统名称都要大写，成员变量和局部变量必须分开写，使用String的时候必须使用copy关键字，array属性必须使用Array结尾等等，我的建议是我们该明确的时候，<strong>一定要明确，不能有歧义</strong>，但是要满足2个原则，1、<strong>在明确的前提下，保证简洁</strong>。2.<strong>在明确的前提下，保证可以被检索。</strong><br>下面我们分别来说下～</p>
<h2 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h2><p>Array类型的 ，全部使用s结尾，names<br>除非在极简算法中使用，否则不允许出现极简变量名！！！！！<br>在OC中不允许出现成员变量，必须全部属性化。<br>在变量设计的时候应更多考虑使用者的使用场景，如果出现场景就名字中不必使用带有场景。<br>变量声明必须放在类的开始部分</p>
<h3 id="成员变量和局部变量的命名？"><a href="#成员变量和局部变量的命名？" class="headerlink" title="成员变量和局部变量的命名？"></a><strong>成员变量和局部变量</strong>的命名？</h3><p>之前在面试中有人问我，你在做CodeReview的时候对成员变量和局部变量是怎么区分的？<br>这本是个充分必要的问题，因为我们总是要区分成员变量和局部变量，但是我这里建议大家不要去区分：</p>
<ol>
<li>我们不能去使用一个带有副作用的函数（更改了函数体以外的值）</li>
<li>我们使用了一个非局部的变量，我们就一定会考虑其是否为非法值的可能性～</li>
<li>我们可能更需要一款编辑器来为我们做这个事，因为过于长的变量名称会不利于我们搜索和读取代码。<br>以上参考于CodeClearn2.7.2章内容<h2 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h2></li>
<li>应该是名词/名词短语，首字母大写。<br> Person? MainView? 建议使用PersonEntity. loadView, HomePageController.等～</li>
<li>不允许使用前缀！（不能搜索）<br> 公司统一使用什么<code>JDB***ViewController</code>，<code>JDB**View</code>等等，想想每次打类名，JD之后出现的是所有的VC，View，Model，岂不是自己给自己添麻烦？<br> 使用自己名字前缀也是一样的！这里有个例外，就是第三方类库，必须使用前缀，OC命名为<code>[*Class sd_***]</code>,Swift命名为<code>*Class.sd.***</code></li>
<li>不允许出现类名为复数的形式！<br> 例如有些类叫什么Users？Passwords？请求你们别这么干！在引用的时候再去套数组！<code>let users: [UserEntity]</code> 希望是这种方式声明～(记得实现copyDelegate方法～)<h2 id="方法名"><a href="#方法名" class="headerlink" title="方法名"></a>方法名</h2>应该是动词/动词短语，并加上get，set，is等短语<br>更多的使用get和set方法来代替更多的关键字。<h2 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h2><h3 id="常规结构规范"><a href="#常规结构规范" class="headerlink" title="常规结构规范"></a>常规结构规范</h3>明确优于简洁<br>不准使用没有语境的废话<br>必须是可以自解释<br>不准使用双关语、引申意义用语等<br>尽可能的使名称可以被搜索出来<br>不允许使用的函数坚决不能暴露实现细节，我们给外部使用的就是一个方法名，他们看到了我们的名称，就知道要干什么事情，干了什么事情！<h3 id="protocol接口设计"><a href="#protocol接口设计" class="headerlink" title="protocol接口设计"></a>protocol接口设计</h3></li>
<li>遵循必须返回本身所属对象原则设计</li>
<li>必须遵循DataSorce，delegate，able分离的原则～</li>
</ol>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ol>
<li>小，短小，短小的函数才能让人一眼看清里面写了什么，并且不需要注释</li>
<li>缩进层次不得多于2层，（使用多线程除外），if  Switch for 等只可以使用一行，多数为一个函数调用。</li>
<li><p>做好一件事，只做一件事！SRP原则，这里意味着只包含一个函数的抽象。</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isCanReturnPage</span><span class="params">()</span> -&gt; <span class="title">Bool</span> &#123;</span></div><div class="line">	getData()</div><div class="line">	toDo()</div><div class="line">  <span class="keyword">return</span> page(data)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>不允许修改函数体以外的值。</p>
</li>
<li>起一个能自解释的函数名称</li>
<li>除非有必要，<strong>不允许参数返回</strong>的形式。（Swift中以inout进行描述）<br> 就是传入的参数，可以被在函数内修改后通过改变原有数据指针指向数据，来达到目的，这样做有几个好处，就是你永远不必操心值是否安全，你用到的时候就应该是你要的值，而不是其他被篡改的值，<br> 这里有个🌰例子：拿map函数举例，我们可以通过改变数组原来的值来达到目的，也可以通过返回一个新构建的数组，我们应该使用第二种方式，因为第一种函数会隐式的修改值，但我们并不总是可以知道他这么做了～</li>
<li>参数名称必须可以自解释～<br> 这里应该不用我多说，值得强调的是，自解释是在你不写注释的情况可以自解释～（省掉的注释可以去买零食了～）</li>
<li>多参数时要考虑参数设置和函数抽象的合理性（超过3个）<br> 这里需要考虑的是，当你的入参超过3个的时候，你可能觉得如参多没啥不好啊，简洁明了，还不用写文档，但是你有没有想过，你的测试代码该如何去写？<br> 你的函数真的不能再去抽象了么？真的做到了一个函数做一种类型的事了么？<br> 不能使用参数更少的函数顺序执行来代替么？<br> 多参的使用一定要慎之又慎，不要想当然，我见过20个入参的函数，你想你不会想体验的！</li>
<li>不允许标识参数～<code>func a(bool)</code>，必须使用<code>func aIsTrue()、func aIsFaild()形式</code></li>
<li>使用异常指令，代替错误代码<br>我们使用发送到统一的异常中心来处理代码错误的部分。</li>
<li>重复的代码不会被总是允许通过～<br>当你写的代码重复了，包括（UI），就应该考虑是否存在抽象，需要包装方法，大家应该都知道，重复的代码写了3遍，我们就应该封装为另外一个方法了？但是你真的会封装么？举个例子，UITableViewDataSource中有个一代理，是返回Cell，Cell根据Section和Row分别返回不同的Cell。<br>在这个方法里，我们要做的可能是Switch一下，然后再Switch一下，然后每个里面都去获取Model，然后各种转，然后创建控件，然后 addSubTO：Cell。这样组织起来真的太冗余了，<br>我们来梳理下流程。<br> a. getModelWithIndexPath:<br> b. getDataWithModel: removet://2个参数代表要执行2个事～<br> c. getCellWithData:<br> d. cell.view = view //cell内自己做这件事<br>这样我们就抽出dataSource方法， removet方法， cellWithData方法，可以分别抽成类，也可以直接在方法里写。<br>我们更可以抽TableViewDataSource 为一个单独的类，**ClassTabData。<br>这样我们就做了一个变相的扩展～</li>
<li><p>不必在写函数最开始就遵循这些规则，没有人可以在一开始就遵循这些规则，好的代码需要不断的打磨！</p>
</li>
<li><p>方法调用必须统一风格！</p>
<pre><code>所有方法都是`[***Class alloc] initWith*:*]`格式，突然有个`[tableView dequeueReusableCellWithIdentifier:identifier]`这种格式的东西你不觉得奇怪么？
我们可以通过对TableView的扩展来为达到，`[[UITableViewCell alloc] initWithTableView:tableView indexPath:path];`
这里有个Tip, 就是identifier使用自己类的类名～不明白的小伙伴去评论区留言哦～～
</code></pre></li>
</ol>
<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>使用SQL必须使用多层结构！SQL-&gt;DAO-&gt;Model-&gt;Class<br>SQL语句中每个动词都必须另起一行！不允许单行SQL！<br>SQL的关键单词必须统一，大写都大些，小写全小写，空格间隔1，可引入缩进<br>SQL使用时需要防止注入攻击～</p>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>在很多公司面试都会被问及，你是否写注释，注释写的多么？<br>我的回答是不希望页不建议写注释的！我建议大家也不写注释要这么做。</p>
<ol>
<li>“别给糟糕的代码加注释-重写吧”-BrainW.Kernighan，注释不能美化糟糕的代码，与其写好的注释，不如没话下我们的代码。</li>
<li>什么也没有正确的注释来的有用，什么也没有错误的注释带来的破坏性更大。</li>
<li>注释并不是存天然的友好，因为注释会撒谎，不是谁都会去维护一个注释并保证准确性的～</li>
<li>注释其实就是我们在用代码表达意图失败的产物～</li>
<li>有些注释是必须的，也是有利的，你要注意的是真正好的注释是你想办法不去写的注释。</li>
<li>Todo 是个好东西，但是要定期清理，但愿你的代码不会因为todo的存在而变成一坨垃圾</li>
<li>不允许出现 //code.. 这种，无用的代码尽早删除，不要留着～</li>
</ol>
<p>之前一直不理解CTO说的，我们的代码就是注释～之前一直不理解，一直认为再好的代码也需要注释，好吧，是我肤浅，必要的注释是需要的，那些没有必要，自认为的小聪明都收起来吧，没有用～</p>
<h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><p>在格式方面我认为全公司统一，使用某种语言标准的格式就好了。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="type">Class</span> <span class="type">Person</span>: <span class="type">NSObject</span> &#123;</div><div class="line">	<span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">	<span class="keyword">var</span> age: <span class="type">Int</span> = <span class="number">0</span></div><div class="line">  	<span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">(name: string, age: Int = <span class="number">0</span>)</span></span> &#123;</div><div class="line">		<span class="keyword">self</span>.name = name</div><div class="line">		<span class="keyword">self</span>.age = age</div><div class="line">	&#125;</div><div class="line"></div><div class="line">  	<span class="function"><span class="keyword">func</span> <span class="title">des</span><span class="params">()</span></span> -&gt;<span class="type">Void</span> &#123;</div><div class="line">		printf(<span class="string">"name:<span class="subst">\(name)</span>, age:<span class="subst">\(age)</span>"</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中包括空格，冒号在左右，名称使用什么关键字, 空行等等<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define MAX_AGE 400</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span>: <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> * name;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, assigan) Int * age;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></div><div class="line"></div><div class="line"><span class="meta">#pram mark- lifeCycle</span></div><div class="line"><span class="meta">#parm mark- setter &amp;&amp; getter</span></div><div class="line"><span class="meta">#parm mark- protocol_01</span></div><div class="line"><span class="meta">#parm mark- protocol_02</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>OC部分参照禅语Object-C～<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewWillDisappear:(<span class="built_in">BOOL</span>)animated &#123;<span class="comment">//可以</span></div><div class="line">	<span class="keyword">if</span> a != <span class="number">0</span> &#123;</div><div class="line">		AccessError(msg);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//更推荐使用单行表达式～</span></div><div class="line">	<span class="keyword">if</span> a!=<span class="number">0</span> AccessError(msg);</div><div class="line">	<span class="comment">//再来一个例子🌰</span></div><div class="line">	<span class="keyword">if</span> b isB();</div><div class="line">	<span class="keyword">else</span> noB();</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//这里必须要有空行</span></div><div class="line">- (<span class="keyword">void</span>)viewWillDisappear:(<span class="built_in">BOOL</span>)animated </div><div class="line">&#123;<span class="comment">//多参数时可以，单一参数不可以</span></div><div class="line">	<span class="keyword">if</span> a == <span class="number">0</span> </div><div class="line">	&#123; </div><div class="line">		<span class="comment">//...</span></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		AccessError（msg）</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用运算符优先级格式<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>*<span class="number">1</span> + <span class="number">2</span>*<span class="number">2</span> <span class="comment">//推荐使用</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> a = <span class="number">1</span> * <span class="number">1</span> + <span class="number">2</span> * <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>对齐<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这样的对齐还有其意义</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">(paramer_01: String,</span></span></div><div class="line">	  paramer_02_02: Array) -&gt; <span class="type">Bool</span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line">	<span class="comment">//	这其实没必要</span></div><div class="line"><span class="keyword">var</span> asrggg4.   : <span class="type">String</span></div><div class="line"><span class="keyword">var</span> d		     : <span class="type">Array</span></div><div class="line"><span class="keyword">var</span> dataSource : <span class="type">Array</span></div></pre></td></tr></table></figure></p>
<p>if、while等 单行语法没有括号！！！只有一个”;”<br><figure class="highlight swift"><figcaption><span>//不允许使用！！！！</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>	 a &lt;<span class="number">0</span> </div><div class="line">	;</div></pre></td></tr></table></figure></p>
<h1 id="对象、数据结构"><a href="#对象、数据结构" class="headerlink" title="对象、数据结构"></a>对象、数据结构</h1><p>我们应该知道 连串的调用对是一种隐藏了过程的方式，他不能使我们的代码变得明了！！但是可以大规模的节约我们开发的时间！说白了就是用的爽。<br>OC中著名的类库Masony就是一种链式调用，但是其控制了复杂度，就是其内部链子只能做一件事。<br>现在我发现许多人在使用Swfit的时候非常轻易使用链式语法，在不同类型中接连转换，可以你在写的时候你会在某一天，某一年回头看自己的代码，那一串一串的逻辑，根本就不能再看好吧～（除非使同一种类型的逻辑，那我也建议使用另外一种封装）<br>如论是否是写成了一串逻辑，还是写成了连续调用方法，我管这种写法叫做火车事件，无论如何我们都应该避免火车事件的发生，更好的做法就是给这个火车方法另外起一个名字～</p>
<h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><p>全部对象方法不允许返回“null”！！ 需要返回null 的时候创建一个空元素返回，也不允许返回null ！</p>
<h1 id="第三方代码"><a href="#第三方代码" class="headerlink" title="第三方代码"></a>第三方代码</h1><p>使用第三方库的时候，所有API都要进行一次封装！隐藏屏蔽掉所有第三方实现细节！</p>
<h1 id="测试代码！"><a href="#测试代码！" class="headerlink" title="测试代码！"></a>测试代码！</h1><p>测试是一种满足现有需要而不去管其他事情的思考问题风格，典型的奥姆剃刀定律践行者～在测试良好的公司，根本不会出现各种库的吧。先说说：测试先行3要素</p>
<pre><code>1. 先编写测试代码，否则不能开始写业务代码。
2. 测试代码刚好覆盖需求
3. 编写刚好可以通过测试的生产代码
我更偏向于更加精美的封装～而不是仅仅满足需求～
</code></pre><p>个人认为测试代码的可维护性比生产代码更不易维护，所以写单元测试的朋友们，希望你们还安好～<br>（越大型的项目约需要测试～小项目反而测试的重要性没有大型项目大）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要是规范iOSer们对于代码整体风格的选择，明确梳理了大家在写Program时候需要注意的点。&lt;br&gt;我会从命名、注释、对象调用、数据结构、Test、错误处理为大家整理，欢迎私信讨论～&lt;br&gt;希望我的博客可以为大家提供帮助～&lt;/p&gt;
&lt;p&gt;这是一篇没有完工的文章我会逐步补充进来的
    
    </summary>
    
    
      <category term="架构" scheme="https://github.com/LiShengmin/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>架构-架构漫谈</title>
    <link href="https://github.com/LiShengmin/2017/06/20/%E6%9E%B6%E6%9E%84-%E6%9E%B6%E6%9E%84%E6%BC%AB%E8%B0%88/"/>
    <id>https://github.com/LiShengmin/2017/06/20/架构-架构漫谈/</id>
    <published>2017-06-19T17:15:49.000Z</published>
    <updated>2017-08-11T04:39:10.705Z</updated>
    
    <content type="html"><![CDATA[<p>非常感谢Casa的分享！这篇文章主要参考了Casa的分享和博客。还有个人的一些理解，希望通过这些阶段性的总结和思考，来让大家成为更好架构师，和理解架构师在做什么。<a id="more"></a></p>
<h2 id="什么是架构"><a href="#什么是架构" class="headerlink" title="什么是架构"></a>什么是架构</h2><ul>
<li>提供完整具备唯一性的解决方案</li>
<li>通过设计能力减少工程的开发成本</li>
<li>规避工程实施中可能存在的技术问题&amp;&amp;非技术问题规避：<blockquote>
<p>避免腐蚀架构<br>避免团队脱节</p>
</blockquote>
</li>
</ul>
<hr>
<h1 id="架构是审美与权衡"><a href="#架构是审美与权衡" class="headerlink" title="架构是审美与权衡"></a>架构是审美与权衡</h1><p>在我的认知种架构就是在做如下3件事：</p>
<ol>
<li>权衡（大一统&amp;&amp;去中心化）</li>
<li>决策</li>
<li>追求简约和极致<br>在下面我会详细的解释上面3点都表达了什么。<h2 id="权衡"><a href="#权衡" class="headerlink" title="权衡"></a>权衡</h2>说到权衡</li>
</ol>
<ul>
<li>不要因小失大（架构师总是在过渡设计和满足需求之间徘徊）<br>当架构师不能控制代码的走向，架构就失败了。 继承？</li>
<li>不必循规蹈矩（不必为了使用技术而使用技术，一切都是自然而然的）<br>在项目做某个模块的时候，选型为：MVC，MVVM，VIPER？其实都是可以的，没有什么高下，要看业务具体需求。</li>
<li>要用发展的眼光看待架构。<br>如一开始我们使用了继承基础类的方式来做，感觉非常棒，直接调用，函数什么的用着也方便，但是当工程越来越大，基础类中的东西越来越庞杂，越来越无法分离，慢慢的就会产生很多问题。<br>还有就是有人说我们可以制定一个规范，但是从以往的经验来看，规范一般都是落实在纸上（规范的可行性不会很好）。</li>
<li>别人事情归别人做，自己的事情就自己做，（你不要去做别人的事）<br>当我们规定了VC做的只是做调度（摆放控件），控件之间通讯由被下发的下一个层级来做，或者由专门的ViewModel来做，就避免了VC做了太多的事情。</li>
</ul>
<h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><p>说到逻辑，就不得不说大家在处理逻辑上的一些误区，在这里我就只为大家提供了一些常见的误区。并附赠了一个小例子作为参考。</p>
<ul>
<li>画蛇添足：设计了一个并没有解决任何问题的机制<br>这个就是典型的过渡设计的范畴，我见过一个iOS开发工程师，使用连续集成VC来达到扩展VC的目的，然后大概的就是:<br>Base1VC&lt;-Base2VC&lt;-Base3VC&lt;-VC,其中Base1VC还没有想好写的什么就先空着。</li>
<li>隔靴搔痒：解决了周边问题，并没有解决核心问题<br>因为App的crash率很高，项目组决定从OC迁移到Swift，而不是解决为什么慢。<br>因为界面加载慢，就拍脑袋降低了View的层次；而不是具体分析下为什么加载缓慢的原因。</li>
<li>顾此失彼：解决主要问题，引入了更多问题；<br>本来要解决照片怎么存储的问题，引入了FMDB，又对其进行了封装，还对其做了状态机，最后其实引入了FileManager就可以实现目的。</li>
<li>南辕北辙：条件和结果不匹配<br>用一个本来就和结论不相匹配的条件，来作为依据。／条件推倒不出来结果。</li>
<li>本末倒置：因为作为后果，后果最为前因<br>比如别人通常问我能不能看看你的文件目录，想通过文件结构推到出我的架构模式。其实这是不对的，是先有了架构，才有文件结构。而不是，新建了3个文件夹Model、VIew、Contorller就是MVC了。其实一切都是要按照业务去拆分，不是用文件夹来拆分为架构。</li>
</ul>
<h2 id="追求简约和极致"><a href="#追求简约和极致" class="headerlink" title="追求简约和极致"></a>追求简约和极致</h2><p>在这里，首先送给大家的一句话：勤快没有用，需要思考；<br>因为勤快这里指的可不是起的早，而是没有思考下的动手能力。<br>可能大家对这点都是深有感悟，但是这里依然有很多人注意的点是偏离或者只在我以下的所说的某一点上有建树，希望大家有所收获和批评指正。</p>
<blockquote>
<p>对业务工程师要做最少的假设；</p>
<pre><code>* 和你配合的业务工程师，可能对你的架构没有任何的了解，
* 对你的架构没有任何了解，（直接Crash）；coreData
</code></pre><p>使用流程不简化Eg；<br>API：设备信息，IP，坐标等，没有必要</p>
<ul>
<li>尽可能利用原生框架提供的手段，不要重复发明轮子<br>好的工程就应该1句注释都没有</li>
</ul>
</blockquote>
<hr>
<h1 id="架构是会演化的"><a href="#架构是会演化的" class="headerlink" title="架构是会演化的"></a>架构是会演化的</h1><p>极致和扩展性不矛盾<br>会随着业务发展，模块会发生演进／引入层的概念。<br>Demo-&gt;VC+模块-&gt;VC+触摸层／应用层等</p>
<h2 id="如何给大模块做架构"><a href="#如何给大模块做架构" class="headerlink" title="如何给大模块做架构"></a>如何给大模块做架构</h2><p>不是一上来就很精细的，一开始也就是做一个小模块，多个小模块拼接起来，就成了大模块的架构。</p>
<ul>
<li>是否要套用现有的方法论？</li>
<li>具体要怎么做<br>熟悉: 做好的东西组装起来。<br>不熟悉：从Demo开始做<h2 id="接手新项目时，如何做架构调整"><a href="#接手新项目时，如何做架构调整" class="headerlink" title="接手新项目时，如何做架构调整"></a>接手新项目时，如何做架构调整</h2></li>
<li>先找问题，再动手<br>不要直接改，可能团队不会很好接受，找有问题的点切入</li>
<li>揣测现有架构的设计思路，新方案尽量不要动的很大<br>如果2种方案，都可以，改动的话会很大<br>如果之前没问题，尽量就不要动，顺着思路做就可以了</li>
<li>找到过度方案<br>先2种方案并存，后一点一点改进<br>如果没有好的过渡方案就尽量不要动</li>
<li>提供自动化工具<br>创建APIManager的脚本等，以降低业务工程师成本为目的。<br>方便工程师工作<h2 id="架构中的对称性"><a href="#架构中的对称性" class="headerlink" title="架构中的对称性"></a>架构中的对称性</h2>就是思维考虑的对称。</li>
<li>有if 就要有else<br>（思考问题的方式）</li>
<li>有大有小，有集约有离散<br>整体架构是胖Model，那要思考瘦Model是否有好处，意义。</li>
<li>能删就能增，有来有去<br>哪里能增的哪里就应该能删。<h2 id="辩证的对待架构的灵活和限制"><a href="#辩证的对待架构的灵活和限制" class="headerlink" title="辩证的对待架构的灵活和限制"></a>辩证的对待架构的灵活和限制</h2>灵活：是引入混乱的根源。(不是越灵活越好)<br>限制：使用的时候不要把不应该这么使用的时候不让其这么使用<br>  限制也有时候会限制业务的发展（不应该）<br>  在某种方案下只有1种解决的方法。</li>
</ul>
<p>在架构改变的场景下保持灵活，在方案实现的场景下保持限制，（架构是会演化的）</p>
<h2 id="辨证对待多和少"><a href="#辨证对待多和少" class="headerlink" title="辨证对待多和少"></a>辨证对待多和少</h2><p>复杂的问题，对应复杂的方案。<br>简单的问题，对应简单的方案。</p>
<p>多不怕，怕的是乱，因为多会导致管理跟不上。<br>组件话只是把不同的代码放在不同的文件里。</p>
<p>类爆炸，可能会导致功能维护上问题。关键还是因为多了后不能很好管理。<br>组件化，不是为了减少编译时间，目的是分治。解决的问是事隔离和便于维护。<br>尽可能少的传递数据，<br>一股脑的把数据都丢改你，然后你需要什么就自己挑。非常不好维护，非常容易的做拆分。<br>传递最少的参数：<br>e.g.：搜索列表：只传递个searchStr；numPage等交给APIManager处理。</p>
<p>一开始给的少，不要紧，以后想要的话可以加。（以后需要的话的话，可以以后加，（➕的方式不一定就是现在这个样子了））</p>
<h2 id="几个问题"><a href="#几个问题" class="headerlink" title="几个问题"></a>几个问题</h2><ul>
<li>如何看待设计模式<br>只是方便架构师之间做交流的。<br>不是百宝箱，你的方案正好是这个设计模式，而方便交流。</li>
<li>所有的方案都是自然<br>你有一套统一的价值观的话，或者进一步细化后，方案应该是唯一的。<br>反对大一统（我要用MVVM，reecticCocoa），不同的问题，就应该给其最适合的方案。</li>
<li>架构师是如何看待技术的<br>新的技术是一种证明，是一种可行的方案而已。不是新的就是好的。<br>例如：响应式能给所有的问题给了很好的方案，但是不是你提供的解决方案就是最优的解决方案。<br>不存在一种技术能完美解决所有问题，挑选合适的技术解决合适的问题。<br>没必要去追风，重要的是要知道其是怎么回事。<br>没有最全面的技术，只有最适合的技术。<br>响应式和命令式，<br>命令：必须找到响应者然后另其做事，delegate可做更精细的控制<br>响应式:一声吼，监听的人就去做事。不需要知道响应着。可以非常方便的完成问题。但也没办法对监听的人做更精细的控制。<br>IO和动画应该才会影响效率，而不是对象的交互方式。<h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1>架构师是唯物，讲究点证据。<br>只要看到API，看到类名，等就能知道这个东西是啥，怎么用<br>第三方适用于你的项目？不是看第三方代码量多少，而是看是否适应你的需求<br>API可以是一个单独工程来管理。Coil。。<br>Q：review；<ol>
<li>避免单点问题。</li>
<li>Review Code是否符合规范</li>
<li>避免你搞乱七八糟的东西<br>Q：Delegate,Block更喜欢哪个；</li>
<li>看需求吧<br>Q：继承缺点</li>
<li>可能会引入跟你无关的代码。<br>Q：架构师角色</li>
<li>不是老大的角色，而是backup帮助大家解决问题。<br>Q：组件都是很大的么？</li>
<li>不是看东西很大，而是看是不是需要被复用。<br>Q：单元测试怎么推行？</li>
<li>少写代码，多做测试。</li>
<li>单独抽出成为工程，方便调试。</li>
<li>单元测试会很少。<br>Q：平时面试问的什么？</li>
<li>比简历问的深些。<br>Q：如何帮助初级开发者提高？</li>
<li>帮助其CodeReview，给其写commit<br>Q：不加班领导同意么？工作能完成么？</li>
<li>不同意，工作能完成，离职了了。。。<br>Q：如何提高逻辑思维能力</li>
<li>读：批判性思维</li>
<li>做：GRE作文第二题</li>
<li>讨论：跟逻辑能力强的人讨论问题</li>
</ol>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;非常感谢Casa的分享！这篇文章主要参考了Casa的分享和博客。还有个人的一些理解，希望通过这些阶段性的总结和思考，来让大家成为更好架构师，和理解架构师在做什么。
    
    </summary>
    
    
      <category term="架构" scheme="https://github.com/LiShengmin/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>iOS-CoreML</title>
    <link href="https://github.com/LiShengmin/2017/06/20/iOS-CoreML/"/>
    <id>https://github.com/LiShengmin/2017/06/20/iOS-CoreML/</id>
    <published>2017-06-19T16:34:32.000Z</published>
    <updated>2017-08-02T09:54:57.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>CoreML 是 Apple 今年 WWDC 新推出面向开发者的机器学习框架。。</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>“典型的苹果用户，将在不知不觉中得到机器学习带来的用户体验的提升，并因此更加爱上苹果产品”。Schiller 说。“最让人兴奋的是，你甚至都感觉不到它的存在，直到有一天你突然意识到，并发出由衷的感叹：“这一切是怎么发生的？”<br><a id="more"></a></p>
<h1 id="苹果在机器学习领域到底强到什么程度？"><a href="#苹果在机器学习领域到底强到什么程度？" class="headerlink" title="苹果在机器学习领域到底强到什么程度？"></a>苹果在机器学习领域到底强到什么程度？</h1><blockquote>
<p>News</p>
</blockquote>
<p>雷锋网AI科技评论按：7月份，在经历了长达几个月外界对苹果AI技术落后的质疑后，苹果又有了一些新动作，首先是在7月20日上线了苹果机器学习官方博客<a href="https://developer.apple.com/machine-learning/" target="_blank" rel="external">Apple Machine Learning Journal</a>，并发表了第一篇博文；其次提交的论文被CVPR 2017收录，获最佳论文。<br>其实作为一个果粉，和对苹果创新力的毫不怀疑，我可以看到苹果在AI技术上进展。<br>无人驾驶领域中，<img src="https://p0.ifengimg.com/pmop/2017/0801/E70162A462A1DBCB2056F5FB61926BBB902FC0E1_size51_w640_h397.jpeg" alt="image"><br>根据参会者的描绘：<br>会上一张幻灯片上有两张非常有特色的汽车图片，该幻灯片汇总了苹果公司的研究，说明了“LiDAR的体积检测”和“结构化输出预测”。<br>对于现如今的无人驾驶技术而言，LiDAR或光感测距（和雷达类似，但借助激光）以及物理事件预测都是非常重要的组成部分。</p>
<blockquote>
<p>专有芯片？</p>
</blockquote>
<p>在各个大厂都在研制自己的AI专用芯片的时候(谷歌的TPU（张量处理单元）和微软的FPGA（现场可编程逻辑闸阵列）)， 苹果好似已经放弃了专用芯片这条路，但是在造芯片这件事上，我只能说苹果还是非常有经验的。</p>
<blockquote>
<p>算法！</p>
</blockquote>
<p>Google大厂开源了TF框架和Apple比较（同时使用标准服务器），谷歌1500page/sec对比苹果的3000page/sec，在算法上虽然google一直是比较厉害的，但是苹果上总会走出一条独特风格的路线的～</p>
<blockquote>
<p>训练库！</p>
</blockquote>
<p>据说，苹果训练其神经网络识别图像的库似乎是专有的，其规模是imageNet库的两倍之多。</p>
<blockquote>
<p>效率</p>
</blockquote>
<p>在使用效率上CoreML构建的神经网络比原始网络小4.5倍，精度却没有损失，速度快2倍。<br>在移动设备中使用了精简神经网的方法，使其在本地预测的方式变得更加可能～</p>
<blockquote>
<p>起步时间</p>
</blockquote>
<p>另外值得一说的其实苹果在ML这个领域中时间已经非常之久了，最明显的是Siri。早在2014.06月末新版本Siri已经美国区开始推广使用，前一个版本的Siri使用的隐马尔可夫模型，被替换为现有的DNN、CNN、长短期记忆单位、封闭复发性单位（gated recurrent units）、以及n-grams等技术～而这些技术有些在国内现在还无法被成熟利用～</p>
<blockquote>
<p>转化为产品</p>
</blockquote>
<p>Siri转变的故事最令人深省的不是因为神经网络对系统的提升，而是因为苹果对技术如此熟练又如此低调。<br>其实更多苹果中的应用中已经更多的集成机器学习，但是我们并不能看到像google那种紧紧将其简单产品化的做法，苹果的人工智能在多大程度上重塑了苹果的生态系统。苹果研发人工智能的初衷是，弥补缺乏搜索引擎带来的用户体验缺失。（搜索引擎能够训练神经网络，使其快速成熟）<br>更多的产品例如,News， AppStore， 常用App推荐， 输入法预测等等领域～</p>
<blockquote>
<p>隐私</p>
</blockquote>
<p>使用了ML技术，避免不了使用大量的用户数据来分析用户行为，但是我们非常担心苹果所掌握这么大规模的数据会用来做什么，但是苹果的高管们再次强调了苹果对于保证用户隐私的决心。（即使这样将限制用户数据的使用，从而阻碍机器学习的效果）高管们强调，这些障碍并非不可逾越。<br><strong>更多关于隐私方面的可以看我在补充里面的QA～</strong></p>
<h1 id="为什么是CoreML而不是TF、Theano"><a href="#为什么是CoreML而不是TF、Theano" class="headerlink" title="为什么是CoreML而不是TF、Theano"></a>为什么是CoreML而不是TF、Theano</h1><p>在没有出CoreML的时候，为了在iOS中实现ML，许多大神们自己搞了很多，包括使用Tensorflow、Theano提供的引擎，来做出预测，其中主要困难点:</p>
<ol>
<li>资源所限，我们只能把训练部分放在服务器上跑，把训练好的数据再在iOS中使用。</li>
<li>模型导入繁琐，在代码中构建模型这部分真的非常痛苦</li>
<li>库兼容不是很好搞定，</li>
<li>训练包大多都很大（其实TF在我们采样率调低的时候，我们会发现训练包可以下降至5M以内）</li>
<li>iPhone系统只允许使用CPU来计算，不能使用GPU（这点上和安卓根本就没法比好么），更别提专有芯片什么的了。</li>
<li>效率低、运算缓慢，以至于只能在7上勉强能跑动。<br>种种困难，在CoreML出来后迎刃而解～你会发现CoreML真的简单到没朋友好吧～<br>（说实话，TF，和Theano真正厉害的根本就不在这里好吧，人家的复杂神经网络预测根本没法比好么。。）</li>
</ol>
<h1 id="CoreML-使用流程"><a href="#CoreML-使用流程" class="headerlink" title="CoreML 使用流程"></a>CoreML 使用流程</h1><p><img src="http://imgcdn.atyun.com/2017/06/6BABC06F-373A-4217-B64E-5035FA66E71F-1024x285.jpg" alt="image"></p>
<ol>
<li>其他软件的训练包～通过自家Core ML Tools来生成.mlmodel</li>
<li>将.mlmodel导入xcode，系统会自动生成模型文件，并提供接口</li>
<li>在代码中使用let model = MarsHabitatPricer()来创建模型。非常直观。</li>
<li>使用MarsHabitatPricerInput将将要预测因变量的输入（使程序获得输入用于计算的值）</li>
<li>在这之中我们不需要关心里面到底做了什么，（因为相当于是黑盒）</li>
<li>通过MarsHabitatPricerOutput得到预测后的信号（获得输出最后的结果）<br>这是苹果对CoreML的描述：<br>在大多数情况下，您仅与模型的动态生成界面进行交互，当您将Xcode项目添加到模型时，Xcode将自动创建。在需要支持自定义工作流或高级用例的情况下，您可以直接使用Core ML API。例如，如果需要在将输入数据异步收集到自定义结构中时进行预测，则可以使用该结构(MLFeatureProvider)通过采用协议为模型提供输入特征。<br>官方文档中的描述：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Xcode还使用有关模型输入和输出的信息来自动生成模型的自定义编程接口，您可以在代码中与模型进行交互。</div><div class="line">对于，Xcode生成接口来表示model（），model的inputs（）和model的output（）。MarsHabitatPricer.mlmodel</div><div class="line">MarsHabitatPricer</div><div class="line">MarsHabitatPricerInput</div><div class="line">MarsHabitatPricerOutput</div><div class="line">使用生成的类的初始化器来创建模型：MarsHabitatPricer</div><div class="line">let model = MarsHabitatPricer()</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="可能涉及到的名词"><a href="#可能涉及到的名词" class="headerlink" title="可能涉及到的名词"></a>可能涉及到的名词</h1><p>可能你看到这里一脸懵逼，.mlmodel是什么？ 训练模型又是什么鬼，在这里我统一解释，不了解的可以下方评论里留言我会一一解答～</p>
<ol>
<li>模型：代表着内部的所含有的信息，如一个模型包含学费，姓名，分数。集合起来就是模型。（先简单的这么理解）</li>
<li>训练模型：要做机器学习必然是要先做一个模型，然后使用一个机器，让这个模型不断进步，这个就是训练。训练好的模型理论上就可以直接使用了CoreML使用的是“*.Mlmodel”文件作为训练后的模型。</li>
<li>苹果简化大部分工作后的人工智能，就是我们暂时不关心内部操作（黑盒），只关心输入数据和输出数据。预测过程完全黑盒。（至于什么rnn、cnn、gans，暂时和CoreML没有什么关系。）</li>
<li>rnn、cnn、gans可以理解成为模型训练时侯执行的算法，训练模型的方法～，rnn：循环神经网络，cnn：卷积神经网络，gans对抗网络。</li>
<li>*.mlmodel是苹果推出的训练后模型包的文件格式～</li>
<li>Caffe：由加州大学伯克利分校开发的一款用于构建和训练神经网络的开源软件</li>
<li>Keras：一个可以非常简单的构建训练神经网络的开源python库, 安装方法<code>pip install keras</code></li>
</ol>
<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><h2 id="官方Demo中自动生成的模型代码详细解释"><a href="#官方Demo中自动生成的模型代码详细解释" class="headerlink" title="官方Demo中自动生成的模型代码详细解释"></a>官方Demo中自动生成的模型代码详细解释</h2><p>废话不多说，我们看下苹果自家的Demo<br><a href="https://docs-assets.developer.apple.com/published/51ff0c1668/IntegratingaCoreMLModelintoYourApp.zip" target="_blank" rel="external">官方Demo下载</a><br>下面文件是我在苹果的示例代码中找到的，解释全部标注在代码后面<br>以下都是自动生成的代码，所以不用关心也可，但是其他的框架使用的模型声明逻辑大体也是如此～</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> CoreML <span class="comment">//引入头文件</span></div><div class="line"><span class="comment">/*</span></div><div class="line">	MarsHabitatPricerInput： 这里应该是自己声明的类，不是系统提供的类</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MarsHabitatPricerInput</span> : <span class="title">MLFeatureProvider</span> </span>&#123;<span class="comment">//这里就是MarsHabitatPricerInput</span></div><div class="line">    <span class="keyword">var</span> solarPanels: <span class="type">Double</span> 	<span class="comment">//模型中的属性</span></div><div class="line">    <span class="keyword">var</span> greenhouses: <span class="type">Double</span>	<span class="comment">//模型中的属性</span></div><div class="line">    <span class="keyword">var</span> size: <span class="type">Double</span>			<span class="comment">//模型中的属性</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> featureNames: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="keyword">return</span> [<span class="string">"solarPanels"</span>, <span class="string">"greenhouses"</span>, <span class="string">"size"</span>]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">    	featureName：一组有效的功能名称</div><div class="line">    	MLFeatureValue： 访问命名要素的值</div><div class="line">    	</div><div class="line">    	其实也可以使用</div><div class="line">    	MLDictionaryFeatureProvider：使用字典来包装</div><div class="line">    	MLFeatureValue：表示特征类型和值的不可变实例</div><div class="line">    	MLFeatureDescription：描述</div><div class="line">    	MLMultiArray：用作模型的输入或输出的多维数组</div><div class="line">    	</div><div class="line">var inputDescriptionsByName: [String : MLFeatureDescription]</div><div class="line">		通过功能名称描述模型中的各种输入。</div><div class="line">var outputDescriptionsByName: [String : MLFeatureDescription]</div><div class="line">		通过功能名称描述模型的各种输出。</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">featureValue</span><span class="params">(<span class="keyword">for</span> featureName: String)</span></span> -&gt; <span class="type">MLFeatureValue</span>? &#123;</div><div class="line">        <span class="keyword">if</span> (featureName == <span class="string">"solarPanels"</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="type">MLFeatureValue</span>(double: solarPanels)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (featureName == <span class="string">"greenhouses"</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="type">MLFeatureValue</span>(double: greenhouses)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (featureName == <span class="string">"size"</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="type">MLFeatureValue</span>(double: size)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//构建方法</span></div><div class="line">    <span class="keyword">init</span>(solarPanels: <span class="type">Double</span>, greenhouses: <span class="type">Double</span>, size: <span class="type">Double</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.solarPanels = solarPanels</div><div class="line">        <span class="keyword">self</span>.greenhouses = greenhouses</div><div class="line">        <span class="keyword">self</span>.size = size</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">	MarsHabitatPricerOutput：和上面同样无法推测出这个是系统提供的还是自己推测出来的。</div><div class="line">	但是可以推测出来</div><div class="line">		MLFeatureProvider：是特征值，用来表示某种特征，如输入的某种特征，输出的某种特征。</div><div class="line">	这样我们就以推测出来MarsHabitatPricerOutput，MarsHabitatPricerInput，就是将特征值在进行一个分类的抽象，抽象成为输入和输出两个部分，方便查找和调用。</div><div class="line">	同样我们可以认为苹果希望我们把输入和输出分开进行书写。但是我同样可以认为可以写在一起（没试过）</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MarsHabitatPricerOutput</span> : <span class="title">MLFeatureProvider</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> price: <span class="type">Double</span> <span class="comment">//声明一个价格属性</span></div><div class="line"> </div><div class="line">    <span class="keyword">var</span> featureNames: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="keyword">return</span> [<span class="string">"price"</span>]</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="comment">//这个是一个MLFeatureProvider中提供的属性。</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">featureValue</span><span class="params">(<span class="keyword">for</span> featureName: String)</span></span> -&gt; <span class="type">MLFeatureValue</span>? &#123;</div><div class="line">        <span class="keyword">if</span> (featureName == <span class="string">"price"</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="type">MLFeatureValue</span>(double: price)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;<span class="comment">//同样与之配套的函数，用来给特征起个名字，并且确定被命名要素的值</span></div><div class="line">    </div><div class="line">    <span class="comment">//构造方法不多说了</span></div><div class="line">    <span class="keyword">init</span>(price: <span class="type">Double</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.price = price</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//下面这个我认为应该是自己写的。不是系统的。。</span></div><div class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">class</span> <span class="title">MarsHabitatPricer</span>:<span class="title">NSObject</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> model: <span class="type">MLModel</span></div><div class="line">    <span class="comment">// 有关MLModel</span></div><div class="line">    <span class="comment">/*</span></div><div class="line">    当使用MLModel的时候，可以使用prediction(from:)方法来预测值</div><div class="line">    func prediction(from input: MLFeatureProvider) throws -&gt; MLFeatureProvider</div><div class="line">		参数：input-模型需要进行预测的所有特征值。</div><div class="line"></div><div class="line">	init(contentsOf: URL)</div><div class="line">			创建一个核心ML模型，仅在不使用Xcode自动生成界面时使用。</div><div class="line">		convenience init(contentsOf url: URL) throws</div><div class="line">		contentsOf:填写你的.mlmodelc文件地址</div><div class="line">		建议您使用Xcode处理您的Core ML（.mlmodelc）文件并使用动态创建的对象。如果您需要动态创建具体的MLModel,可通过名为model的属性来暴露底层，而不应该直接创建MLModel对象。</div><div class="line"></div><div class="line">    */</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(contentsOf url: <span class="type">URL</span>) <span class="keyword">throws</span> &#123;</div><div class="line">        <span class="keyword">self</span>.model = <span class="keyword">try</span> <span class="type">MLModel</span>(contentsOf: url)</div><div class="line">    &#125;<span class="comment">//创建一个CoreML模型，仅在没有使用Xcode自动生成界面时使用。</span></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">convenience</span> <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line">        <span class="keyword">let</span> bundle = <span class="type">Bundle</span>(<span class="keyword">for</span>: <span class="type">MarsHabitatPricer</span>.<span class="keyword">self</span>)</div><div class="line">        <span class="keyword">let</span> assetPath = bundle.url(forResource: <span class="string">"MarsHabitatPricer"</span>, withExtension:<span class="string">"mlmodelc"</span>)</div><div class="line">        <span class="keyword">try</span>! <span class="keyword">self</span>.<span class="keyword">init</span>(contentsOf: assetPath!)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">    使用给定的特征值，对输出值进行预测。</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">prediction</span><span class="params">(input: MarsHabitatPricerInput)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">MarsHabitatPricerOutput</span> &#123;</div><div class="line">        <span class="keyword">let</span> outFeatures = <span class="keyword">try</span> model.prediction(from: input)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> result = <span class="type">MarsHabitatPricerOutput</span>(price: outFeatures.featureValue(<span class="keyword">for</span>: <span class="string">"price"</span>)!.doubleValue)</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">    这是一个便捷方法，输入3个因变量，然后通过MarsHabitatPricerOutput来返回其中的Price</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">prediction</span><span class="params">(solarPanels: Double, greenhouses: Double, size: Double)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">MarsHabitatPricerOutput</span> &#123;</div><div class="line">        <span class="keyword">let</span> input_ = <span class="type">MarsHabitatPricerInput</span>(solarPanels: solarPanels, greenhouses: greenhouses, size: size)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">try</span> <span class="keyword">self</span>.prediction(input: input_)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实就是给了一个构建的接口，一个输入的接口，一个输出的接口而已～</p>
<p><img src="/image/81fd7dbd28ec88e37422e01ff7ea8bb8.png" alt="运行后的图"></p>
<p>Domo非常简单就是控制输入的信号来控制输出，（非线形的输出～）</p>
<h2 id="Demo-通过图片预测猫狗的品种"><a href="#Demo-通过图片预测猫狗的品种" class="headerlink" title="Demo-通过图片预测猫狗的品种"></a>Demo-通过图片预测猫狗的品种</h2><p><a href="https://developer.apple.com/machine-learning/" target="_blank" rel="external">动物识别模型</a><br>首先我们要有一个模型，然后将其拖入项目中。<br><img src="http://imgcdn.atyun.com/2017/06/D180935C-47FF-46F8-8FAA-26FE7A0E62F7-1024x532.jpg" alt="image2"><br>我们先看这个Model的Des，从描述里面能看出来，这是一个神经网络的分类器，输入是一张像素为 (224 * 224) 的图片，输出为分类结果。自动生成上述接口文件（Model Class）<br>ok， 这个是模型就是要一个照片，CVPixelBuffer类型的，做一个剪裁，再转换为CVPixelBuffer。<br><img src="http://imgcdn.atyun.com/2017/06/8903F66D-EA84-459D-836B-501815C7851B-1024x460.jpg" alt="cat"><br><img src="http://imgcdn.atyun.com/2017/06/1C8FC431-CC04-474D-8FD7-23A6A990FA41-1024x327.jpg" alt="dog"><br>结果虽然准确度不够，但是依然可以分辨猫狗～</p>
<h2 id="Demo-通过图片预测拍摄物体名称"><a href="#Demo-通过图片预测拍摄物体名称" class="headerlink" title="Demo-通过图片预测拍摄物体名称"></a>Demo-通过图片预测拍摄物体名称</h2><p>第二个例子需要我们准备的东西大体上相同，Resnet50模型，导入工程后，<br>在我们有模型之后我们就可以通过建立一个 ResnetOutput 类实例。在此之后，我们即可获取每项预测结论的最高概率，并确定拥有最高概率之预测结论的类标签。<br>为了立即对新的输入内容进行测试，这里我快速创建了一款应用以分析图像与视频。首先，我们允许用户从相册当中选择图像或者直接进行拍照以获取待分析图像。正如之前所看到，这里我们可以使用两个来自 Resnet50 类的 API：<br>    •    func prediction(input: Resnet50Input) throws -&gt; Resnet50Output<br>    •    func prediction(image: CVPixelBuffer) throws -&gt; Resnet50Output</p>
<p>我利用前者以处理图像素材，后者则用于处理视频素材。（本质上也是分割成帧，单页处理问题）<br><img src="/image/62a506d39bd14e0ac3433cd1a59243a2.png" alt="photo"><br>这种无需任何等待即可看到预测结果的体验让我非常兴奋——而更让我激动的是，视频分析也基本具备同样的感受！因此我创建了一个 AVCaptureSession 实例以捕捉实时相机镜头，并将其作为子视图中的一个层。<br>在此之后，利用以下<br><strong>AVCaptureVideoDataOutputSampleBufferDelegate </strong><br>作为代表方法：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">captureOutput</span><span class="params">(<span class="number">_</span> output: AVCaptureOutput, didOutput sampleBuffer: </span></span></div><div class="line">CMSampleBuffer, from connection: AVCaptureConnection)</div></pre></td></tr></table></figure></p>
<p>我得以获得连续缓冲区。与之前的图像处理一样，我以同样的方式对该缓冲区进行处理，并将其设置为这套模型的输入内容。可以看到：<br><img src="http://ugcyd.qq.com/flv/187/68/l05115ghtlm.m701.mp4?vkey=8026F1298F18C7720B378350FC74904B316E80042DCB8C9F872B49809BA642FFD062A61D28CA2BD9233A4EED68A694699231385215F73C1892EFDB7D00EEEC27369667D14C5DAB92B40951BA1C60FB14F229056A6E72A384&amp;br=25&amp;platform=2&amp;fmt=auto&amp;level=0&amp;sdtfrom=v1010&amp;guid=0ceb1f7c20f0eeb5173e112e5e49c8bb" alt="video,加载不出来的点击我，去另外的界面观看视频～"><br><a href="https://github.com/s/CoreMLDemo/tree/master">Demo代码地址</a></p>
<h1 id="CoreML的模型构建～"><a href="#CoreML的模型构建～" class="headerlink" title="CoreML的模型构建～"></a>CoreML的模型构建～</h1><p>相较于其他移动端深度学习框架，Core ML看起来更方便使用。苹果很聪明的定义了一个标准的模型格式（.mlmodel）<br>如果你使用了Keras、Cafee、scikit-learn、libsvm 以及 XGBoost 等工具创建的模型，可以使用Core ML Tools（挂载在 Python Package Index (PyPI) ）来转换到.mlmodel文件上。</p>
<p>要了解关于 Python 包的更多信息，请参阅 <a href="https://packaging.python.org/" target="_blank" rel="external">Python Packaging User Guide</a>。<br>CoreML不支持GoogleAI框架TF，不过我们可以自己制作扩展包～</p>
<p>例子：<br>作为演示使用Scikit-learn构建模型<br>我们需要将其转换为.mlmodel 格式。出于演示的目的，这里我们选择使用 SVC 数字数据集。另当然，大家也可以利用基于 Keras 的数据集生成神经网络模型，并将其转换为.mlmodel 格式。简而言之，大家只需要编写以下代码即可顺利将模型转换为.mlmodel 格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Now it's time to convert it to .mlmodel format</span></div><div class="line">coreml_model = coremltools.converters.sklearn.convert(classifier, ferture_names, <span class="string">"digit"</span>)</div><div class="line">coreml_model.save(<span class="string">"disgits.mlmodel"</span>)</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>模型类型</th>
<th>支持的模型</th>
<th>支持的工具</th>
</tr>
</thead>
<tbody>
<tr>
<td>神经网络 (Neural network)</td>
<td>前馈 (Feedforward)、卷积</td>
<td>(Convolutional)、循环 (Recurrent)</td>
<td>Caffe / Keras 1.2.2</td>
</tr>
<tr>
<td>组合树 (Neural networks)</td>
<td>随机森林 (Random Forests)、提升树 (Boosted Trees)、决策树 (Decision Trees)</td>
<td>scikit-learn 0.18 / XGBoost 0.6</td>
</tr>
<tr>
<td>支持向量机 (Support vector machines)</td>
<td>标量回归 (Scalar Regression)、多级分类 (Multiclass classification)</td>
<td>scikit-learn 0.18 / LIBSVM 3.2</td>
</tr>
<tr>
<td>广义线性模型 (Support vector machines)</td>
<td>线性回归 (Linear Regression)、逻辑回归 (Logistic Regression)</td>
<td>scikit-learn 0.18</td>
</tr>
<tr>
<td>特征工程 (Feature engineering)</td>
<td>稀疏向量矢量化 (Sparse Vectorization)、稠密向量矢量化 (Dense Vectorization)、分类处理 (Categorical Processing)</td>
<td>scikit-learn 0.18</td>
</tr>
<tr>
<td>管道模型 (Pipeline models)</td>
<td>顺序链模型 (Sequentially Chained Models)</td>
<td>scikit-learn 0.18</td>
</tr>
</tbody>
</table>
<p><a href="https://pan.baidu.com/s/1hsacwfi" target="_blank" rel="external">代码</a></p>
<h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><h2 id="使用ML的更多产品"><a href="#使用ML的更多产品" class="headerlink" title="使用ML的更多产品"></a>使用ML的更多产品</h2><p>iPad Pro的Apple Pencil就是一个例子。为了发明出一支高科技的触控笔，苹果不得不面临这样一个问题，即当人们在设备上写字的时候，他们的手掌底部难免会擦到屏幕，造成各种触控失灵。这时，使用“防手掌误触”这样一个机器学习模式，就能很好的解决这一问题。因为该模式能够使屏幕传感器感受到刮擦，触摸和笔触之间的区别，大大提升了触控笔操控的精确度。“如果触控笔无法在iPad上进行完美操作，那么iPad就不能被看作是一张很好的可供我继续写字的纸，Pencil也就不会是一个好的产品。<br><strong>更多产品：</strong><br>发生在手机上的每个动作都会被记录，然后由操作系统的一系列机器学习算法进行分析，判断是否预示着用户希望要做一个日历预约、拨打一个电话，或者制作更好的动态照片。<br>像Apple music的听歌推荐，<br>iphone的电池续航，<br>Siri发出的声音<br>News的新闻个性化推荐<br>pages～<br>。。。</p>
<h2 id="iPhone上有多少用户数据缓存可供机器学习调用？"><a href="#iPhone上有多少用户数据缓存可供机器学习调用？" class="headerlink" title="iPhone上有多少用户数据缓存可供机器学习调用？"></a>iPhone上有多少用户数据缓存可供机器学习调用？</h2><p>苹果工程师们的回答非常令我惊讶：“平均200Mb，具体多少取决于用户信息的多寡。”（为节约存储空间，缓存会时不时被清理出去）。这些信息包括了应用的使用习惯，与他人的交互，神经网络处理，还有“自然语言模型”。还有对象识别，人脸识别，场景识别等供神经网络学习。<br>我觉得收集这些训练数据对于单一用户来说真的已经非常多了，我假设模型已经被清洗和压缩过，那么一个这么大的模型真的已经可以算是涉及到所有苹果能渗入的地方了，要知道，一个有关“着色”的简易模型压缩后最小可以做到3m。</p>
<h2 id="隐私"><a href="#隐私" class="headerlink" title="隐私"></a>隐私</h2><p>或许，苹果使用机器学习技术中遇到的最大问题，是如何坚持保护用户隐私的原则。苹果会加密用户信息，包括公司律师在内的任何人都无法读取。FBI也不能，即便获得了批准。它还表示，不会收集用户信息用于广告目的。</p>
<p>从用户的角度上看，这种行为值得尊敬，但这对吸引顶尖AI人才并无帮助。一位苹果前员工表示，“机器学习专家想要的就是数据。但出于保护隐私的立场，苹果总会有所干预。这种做法是否正确暂不讨论，但外界会认为苹果不是铁杆AI粉。”</p>
<p>苹果高管并不认同这种观点。他们认为无需将用户信息放在云端，或存储训练神经网络所用的数据，也能得到提升机器学习表现的数据。Federighi认为，“外界一直存在错误的观点，做出了错误的妥协，我们想让他们走上正轨。”</p>
<p>这里有两个问题。第一个涉及到在机器学习系统中处理个人信息，当个人详细信息是由神经网络收集到的时，这些信息会怎么样？第二个涉及到收集训练神经网络识别行为所需的数据，不收集个人信息，又将如何做到训练呢？</p>
<p>苹果对两者都有答案。Cue表示，“有人认为，我们用AI做不了这些事，因为没有数据。但我们找到了获取所需的数据，同时保护隐私的方式。这是我们的底线。”</p>
<p>对于第一个问题，苹果的解决方式是利用其独特的对软硬件的控制。简单来说，多数个人信息仍保留在Apple Brain中。Federighi表示，“我们会将部分最敏感的信息保留在设备上，这时机器学习完全在本地运行。”他给出的例子是应用推荐，即在主屏上右滑时会出现的图标。在理解状态下，这些应用就是你意图想用的。这种预测基于许多因素，基本都与用户的行为有关。这一功能确实有用，Federighi表示，预测用户想用图标的概率有90%。</p>
<p>苹果存在设备上的其它信息可能包括了最个人的信息：用户使用iPhone键盘输入的文字。使用经过神经网络训练的系统，苹果能识别出关键事件和项目，如航班信息，联系人及约会。不过这些信息都存在手机上。即使是备份在苹果云上的信息，也会经过处理后不能仅由备份信息进行还原。“我们不想把信息存在苹果服务器上，公司没必要知道你的爱好或你在哪。”</p>
<p>苹果也在尽量减少整体上保存的信息。一个例子是，在交谈中有人可能提到一个词，这或许需要搜索。其它公司很可能在云端分析整段对话，从而识别出那些词语，但苹果设备无需这些数据远离用户就能识别出来。这是因为系统会不断与手机中的知识库进行搜索匹配。</p>
<p>Federight表示，“知识库很精练，但也相当完善，储存了成千上万的地点和实体。”苹果所有的应用都能用知识库，包括Spotlight搜索应用，地图和浏览器。它也能帮助自动纠错，一直在后台运行。</p>
<p>机器学习圈的一个疑问是，苹果的隐私限制是否会阻碍神经网络算法，这也是上文中提到的第二个问题。经过大量数据训练，神经网络才能准确。如果苹果不采集用户行为数据，又从哪里得到数据呢？与其它公司一样，苹果用公开数据集训练神经网络，但总有需要更新更准确的数据的时候，而这又只能从用户中来。苹果的做法是在不知道用户是谁的情况下收集信息。它会对数据匿名处理，随机打上识别信息。</p>
<p>从iOS 10开始，苹果会开始使用一种名为差分隐私（Differential Privacy）的新技术，它会对信息进行众包处理，让个人身份无法识别。这种技术可能用在出现新流行词，而它又不在苹果知识库中时；也会用在某个链接突然变得与相关查询的答案相关时，或某个表情被大量使用时。“传统的方式会将用户每次输入都传到服务器上，然后遍历数据来找到感兴趣的东西。但我们有端到端加密，不会这样行事。”虽然差分隐私是一个较为学术的词，但苹果想让它变得更加普及。</p>
<p>Federighi表示，“我们数年前就开发研究，做出了能大范围使用的有趣的成果。它的隐私程度令人惊叹。”简单来说，差分隐私就是对数据的若干片段加入数学噪音，这样苹果能识别用使用模式，又不会辨别出个人身份。苹果还授权研究相关技术的科技家发表论文，公布他们的工作。</p>
<p>#参考<br><a href="https://share.iclient.ifeng.com/shareNews?fromType=vampire&amp;forward=1&amp;aid=sub_24368797&amp;token=__QZmFzYyATYzIzYykTMjJDZ&amp;aman=e9f1cG20ax32cn291Fc2d&amp;from=timeline&amp;isappinstalled=1#backhead#backhead" target="_blank" rel="external">细拆苹果AI战略蓝图，看离领跑全球还有多远？</a><br><a href="https://developer.apple.com/machine-learning/" target="_blank" rel="external">Apple Develop With ML</a><br><a href="http://tech.ifeng.com/a/20160828/44443391_0.shtml" target="_blank" rel="external">苹果在iPhone里藏了个“人工智能大脑”</a><br><a href="http://www.atyun.com/1083_十分钟使用苹果机器学习框架coreml进行图片识别（swift版.html" target="_blank" rel="external">十分钟使用苹果机器学习框架CoreML进行图片识别（Swift版）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;CoreML 是 Apple 今年 WWDC 新推出面向开发者的机器学习框架。。&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;“典型的苹果用户，将在不知不觉中得到机器学习带来的用户体验的提升，并因此更加爱上苹果产品”。Schiller 说。“最让人兴奋的是，你甚至都感觉不到它的存在，直到有一天你突然意识到，并发出由衷的感叹：“这一切是怎么发生的？”&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS, 机器学习" scheme="https://github.com/LiShengmin/tags/iOS-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>iOS-IdtentifyLookUp身份查询</title>
    <link href="https://github.com/LiShengmin/2017/06/17/iOS-IdtentifyLookUp%E8%BA%AB%E4%BB%BD%E6%9F%A5%E8%AF%A2/"/>
    <id>https://github.com/LiShengmin/2017/06/17/iOS-IdtentifyLookUp身份查询/</id>
    <published>2017-06-17T13:03:30.000Z</published>
    <updated>2017-08-01T08:14:30.761Z</updated>
    
    <content type="html"><![CDATA[<p>文章翻译于<a href="https://developer.apple.com/documentation/identitylookup" target="_blank" rel="external">苹果官方文档</a></p>
<p>SDK：iOS 11.0+ Beta</p>
<h2 id="IdtentifyLookUp-是创建可以识别和过滤不需要的短信和彩信的应用程序扩展，并保留用户隐私。"><a href="#IdtentifyLookUp-是创建可以识别和过滤不需要的短信和彩信的应用程序扩展，并保留用户隐私。" class="headerlink" title="IdtentifyLookUp 是创建可以识别和过滤不需要的短信和彩信的应用程序扩展，并保留用户隐私。"></a>IdtentifyLookUp 是创建可以识别和<strong>过滤不需要的短信和彩信的应用程序扩展</strong>，并保留用户隐私。</h2><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>当收到来自未知发件人的SMS或MMS消息时，您的应用程序扩展可以通过使用自己的内置数据、逻辑或通过延迟关联的服务器进行的分析，使Messages应用程序，询问您的应用程序扩展确定消息是否需要过滤。<br>。<a id="more"></a><br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">**注意**</div><div class="line">身份查询仅适用于来自未知发件人的短信和彩信<span class="comment">; </span></div><div class="line">不适用于用户的联系人中的发件人的消息或来自任何来源的iMessage消息。</div></pre></td></tr></table></figure></p>
<p>要查看来自未知发件人的邮件是否需要过滤，“信息APP” 将启动邮件过滤器(你的扩展)进行查询，如图1所示。<br><img src="https://docs-assets.developer.apple.com/published/896e483792/bffa422c-8e24-4c8b-a294-3838471d2049.png" alt="图1"><br>将查询传递给消息过滤器应用程序扩展以获取消息的状态</p>
<h1 id="大致流程是："><a href="#大致流程是：" class="headerlink" title="大致流程是："></a>大致流程是：</h1><ol>
<li>“信息APP”将通过ILMessageFilterQueryRequest对象，将有关该消息的信息传递到你的消息过滤器（应用程序扩展）。</li>
<li>如果您应用能确定消息无效，返回使用ILMessageFilterQueryResponse类型的对象到Massage。<br>2.1     如果您的应用在本地无法做出这一决定，则告知“信息App”，它将有关的信息发送到您的服务器。您的服务器会检查邮件信息，并发送回对信息的描述，该描述将通过”信息App”传递给您的应用。应用程序扩展解析服务器的响应，并给出对象中消息的最终决定，如图2所示。<br>ILMessageFilterQueryResponse<br><img src="https://docs-assets.developer.apple.com/published/896e483792/5b45eea5-fb97-427d-93e7-a5624cd384bd.png" alt="图2"><br>将查询传递给应用程序的关联服务器以获取消息的状态</li>
</ol>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>出于隐私的原因，系统将会处理与您服务器的所有通信; 您应用无法直接访问网络。（不能与自己的服务器通信）<br>出于隐私的原因，您的应用扩展程序无法将数据写入与包含的应用程序共享的容器。（不能其他应用通信）</p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><table>
<thead>
<tr>
<th>Topics</th>
<th>^</th>
</tr>
</thead>
<tbody>
<tr>
<td>First Steps</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/creating_a_message_filter_app_extension" target="_blank" rel="external">Creating a Message Filter App Extension</a>,创建一个可以识别不需要的邮件的应用程序扩展</td>
</tr>
<tr>
<td>App Extension</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/ilmessagefilterextensioncontext" target="_blank" rel="external">class ILMessageFilterExtensionContext</a>,消息过滤应用程序扩展的扩展上下文</td>
</tr>
<tr>
<td>App Extension</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/ilmessagefilterextension" target="_blank" rel="external">class ILMessageFilterExtension</a>,消息过滤器应用程序扩展的主要类的抽象基类。</td>
</tr>
<tr>
<td>Queries</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/ilmessagefilterqueryrequest" target="_blank" rel="external">class ILMessageFilterQueryRequest</a>,请求消息过滤应用程序扩展，以确定从未知发件人接收的消息的状态。</td>
</tr>
<tr>
<td>Queries</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/ilmessagefilterqueryhandling" target="_blank" rel="external">protocol ILMessageFilterQueryHandling</a>,一组通过消息过滤应用程序扩展来处理查询请求的方法。</td>
</tr>
<tr>
<td>Responses</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/ilmessagefilterqueryresponse" target="_blank" rel="external">class ILMessageFilterQueryResponse</a> 对消息过滤器查询请求的响应。</td>
</tr>
<tr>
<td>class Responses</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/ilnetworkresponse" target="_blank" rel="external">ILNetworkResponse</a> 响应HTTPS代理消息过滤器应用程序扩展执行的HTTPS网络请求。</td>
</tr>
<tr>
<td>Responses</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/ilmessagefilteraction" target="_blank" rel="external">enum ILMessageFilterAction</a> 采取响应收到的消息的动作。</td>
</tr>
<tr>
<td>error</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/ilmessagefiltererror" target="_blank" rel="external">struct ILMessageFilterError</a></td>
</tr>
<tr>
<td>error</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/ilmessagefiltererrordomain" target="_blank" rel="external">let ILMessageFilterErrorDomain: String</a></td>
</tr>
<tr>
<td>error</td>
<td><a href="https://developer.apple.com/documentation/identitylookup/ilmessagefiltererror.code" target="_blank" rel="external">enum ILMessageFilterError.Code</a></td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章翻译于&lt;a href=&quot;https://developer.apple.com/documentation/identitylookup&quot;&gt;苹果官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SDK：iOS 11.0+ Beta&lt;/p&gt;
&lt;h2 id=&quot;IdtentifyLookUp-是创建可以识别和过滤不需要的短信和彩信的应用程序扩展，并保留用户隐私。&quot;&gt;&lt;a href=&quot;#IdtentifyLookUp-是创建可以识别和过滤不需要的短信和彩信的应用程序扩展，并保留用户隐私。&quot; class=&quot;headerlink&quot; title=&quot;IdtentifyLookUp 是创建可以识别和过滤不需要的短信和彩信的应用程序扩展，并保留用户隐私。&quot;&gt;&lt;/a&gt;IdtentifyLookUp 是创建可以识别和&lt;strong&gt;过滤不需要的短信和彩信的应用程序扩展&lt;/strong&gt;，并保留用户隐私。&lt;/h2&gt;&lt;h2 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h2&gt;&lt;p&gt;当收到来自未知发件人的SMS或MMS消息时，您的应用程序扩展可以通过使用自己的内置数据、逻辑或通过延迟关联的服务器进行的分析，使Messages应用程序，询问您的应用程序扩展确定消息是否需要过滤。&lt;br&gt;。
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-Block内存管理</title>
    <link href="https://github.com/LiShengmin/2017/06/17/iOS-Block%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>https://github.com/LiShengmin/2017/06/17/iOS-Block内存管理/</id>
    <published>2017-06-17T07:19:12.000Z</published>
    <updated>2017-06-19T15:03:10.622Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到了一篇有关于Block内存管理的文章，这里做一个标记。<br><a href="http://blog.csdn.net/hherima/article/details/38620175" target="_blank" rel="external">Block内存管理三</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看到了一篇有关于Block内存管理的文章，这里做一个标记。&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/hherima/article/details/38620175&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Block内存
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS-iOS11无线调试</title>
    <link href="https://github.com/LiShengmin/2017/06/12/iOS-iOS11%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95/"/>
    <id>https://github.com/LiShengmin/2017/06/12/iOS-iOS11无线调试/</id>
    <published>2017-06-12T09:17:04.000Z</published>
    <updated>2017-06-12T15:59:45.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用XCode进行iOS无线调试"><a href="#使用XCode进行iOS无线调试" class="headerlink" title="使用XCode进行iOS无线调试"></a>使用XCode进行iOS无线调试</h1><p>首先这种方法是对你的系统，Xcode版本，对iOS版本有要求的！<br>MacOS：10.13<br>XCode：9<br>iOS：11<br><a id="more"></a></p>
<h1 id="下面是操作步骤"><a href="#下面是操作步骤" class="headerlink" title="下面是操作步骤"></a>下面是操作步骤</h1><ul>
<li>手机连接Xcode中，选择菜单上的<code>Window</code>,-&gt;<code>Device and Simulators</code>。<br><img src="\image\Window-Device.png" alt=""></li>
<li>找到连接设备，把Connect viaNetWork选项勾选。<br><img src="\image\d6058bdd9f50010037191a0ed1f1111f.png" alt=""></li>
<li>等待。。</li>
<li>断开和iPad/iPhone的有线连接。</li>
<li>左侧选择刚才的设备，右键，选择<code>Connect via IP Address...</code><br><img src="\image\200ee9e43bc886462d3928a72193d58d.png" alt=""><br><img src="\image\0505eb003339651a107b33fa8477836d.png" alt=""></li>
<li>添加设备局域网IP<br><img src="\image\c3eee091de2599f5c38ff0a6ce0f37b5.png" alt=""></li>
<li>直接运行就好了<br><img src="\image\1402206e1bbcc33f16f442b62ea0d6fd.png" alt=""></li>
</ul>
<h1 id="Operation-procedure"><a href="#Operation-procedure" class="headerlink" title="Operation procedure"></a>Operation procedure</h1><ul>
<li>iPhone/iPad Client Mac, In Xcode menu bar select Window re select Device and Simulators.</li>
<li>In left menu find your Device, Check Connect viaNetWork</li>
<li>Wait for success.</li>
<li>Disconnect your iPad/iPhone to Mac. </li>
<li>Re select your Device, right Click, select <code>Connect via IP Address</code>..And you can’t find it, you must disconnect with iPad to Mac Client</li>
<li>Please write you iPad/iPhone’s IP address.</li>
<li>you can run your app to iPad with wireless, is very cool.</li>
<li>successful.</li>
</ul>
<h1 id="thanks-to-read"><a href="#thanks-to-read" class="headerlink" title="thanks to read"></a>thanks to read</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用XCode进行iOS无线调试&quot;&gt;&lt;a href=&quot;#使用XCode进行iOS无线调试&quot; class=&quot;headerlink&quot; title=&quot;使用XCode进行iOS无线调试&quot;&gt;&lt;/a&gt;使用XCode进行iOS无线调试&lt;/h1&gt;&lt;p&gt;首先这种方法是对你的系统，Xcode版本，对iOS版本有要求的！&lt;br&gt;MacOS：10.13&lt;br&gt;XCode：9&lt;br&gt;iOS：11&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-WKWebView简介</title>
    <link href="https://github.com/LiShengmin/2017/05/01/iOS-WKWebView%E7%AE%80%E4%BB%8B/"/>
    <id>https://github.com/LiShengmin/2017/05/01/iOS-WKWebView简介/</id>
    <published>2017-05-01T07:37:43.000Z</published>
    <updated>2017-08-01T08:29:06.405Z</updated>
    
    <content type="html"><![CDATA[<p>#笔记# </p>
<ul>
<li>与UIWebView相比速度更快， 内存更省。</li>
<li>iOS8苹果推出的框架Wekkit，提供了替换UIWebView的组件WKWebView。</li>
<li>在性能、稳定性、功能方面有很大提升（最直观的体现就是加载网页是占用的内存，模拟器加载百度与开源中国网站时，WKWebView占用23M，而UIWebView占用85M）；</li>
<li>允许JavaScript的Nitro库加载并使用（UIWebView中限制）；</li>
<li>支持了更多的HTML5特性；</li>
<li>高达60fps的滚动刷新率以及内置手势；</li>
<li>将UIWebViewDelegate与UIWebView重构成了14类与3个协议<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/WebKit/ObjC_classic/index.html" target="_blank" rel="external">（查看苹果官方文档）</a><a id="more"></a></li>
</ul>
<h1 id="初始化（init）"><a href="#初始化（init）" class="headerlink" title="初始化（init）"></a>初始化（init）</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">WKWebView</span> * webView = [[<span class="built_in">WKWebView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds];</div><div class="line">[webView loadRequest:[<span class="built_in">NSRULRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithStingL:<span class="string">@"https://www.baidu.com"</span>]]];</div><div class="line">[<span class="keyword">self</span>.view addSubview:webView];</div></pre></td></tr></table></figure>
<h1 id="回调-delegate"><a href="#回调-delegate" class="headerlink" title="回调 (delegate)"></a>回调 (delegate)</h1><h2 id="生命周期-lifeCycle"><a href="#生命周期-lifeCycle" class="headerlink" title="生命周期(lifeCycle)"></a>生命周期(lifeCycle)</h2><ul>
<li><p>页面开始加载时调用</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didStartProvisionalNavigation:(<span class="built_in">WKNavigation</span> *)navigation;</div></pre></td></tr></table></figure>
</li>
<li><p>当内容开始返回时调用</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didCommitNavigation:(<span class="built_in">WKNavigation</span> *)navigation;</div></pre></td></tr></table></figure>
</li>
<li><p>页面加载完成之后调用</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didFinishNavigation:(<span class="built_in">WKNavigation</span> *)navigation;</div></pre></td></tr></table></figure>
</li>
<li><p>页面加载失败时调用</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didFailProvisionalNavigation:(<span class="built_in">WKNavigation</span> *)navigation</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="页面跳转-load-new-Page-life-cycle"><a href="#页面跳转-load-new-Page-life-cycle" class="headerlink" title="页面跳转(load new Page life cycle)"></a>页面跳转(load new Page life cycle)</h2><ul>
<li><p>接收到服务器跳转请求之后调用</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didReceiveServerRedirectForProvisionalNavigation:(<span class="built_in">WKNavigation</span> *)navigation;</div></pre></td></tr></table></figure>
</li>
<li><p>在收到响应后，决定是否跳转</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView decidePolicyForNavigationResponse:(<span class="built_in">WKNavigationResponse</span> *)navigationResponse decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKNavigationResponsePolicy</span>))decisionHandler;</div></pre></td></tr></table></figure>
</li>
<li><p>在发送请求之前，决定是否跳转*</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView decidePolicyForNavigationAction:(<span class="built_in">WKNavigationAction</span> *)navigationAction decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKNavigationActionPolicy</span>))decisionHandler;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="提示框（PromptAlert）"><a href="#提示框（PromptAlert）" class="headerlink" title="提示框（PromptAlert）"></a>提示框（PromptAlert）</h2><p>遵守WKUIDelegate,可以执行JS上的3中提示框，（<br>runJavaScriptAlertPanelWithMessage，       // 警告框<br>runJavaScriptConfirmPanelWithMessage， //确认框<br>runJavaScriptTextInputPanelWithPrompt， // 输入框<br>）<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** web界面中有弹出警告框时调用</span></div><div class="line"> *  @param webView           实现该代理的webview</div><div class="line"> *  @param message           警告框中的内容</div><div class="line"> *  @param frame             主窗口</div><div class="line"> *  @param completionHandler 警告框消失调用</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView runJavaScriptAlertPanelWithMessage:(<span class="built_in">NSString</span> *)message initiatedByFrame:(<span class="keyword">void</span> (^)())completionHandler;<span class="comment">//警告框</span></div></pre></td></tr></table></figure></p>
<h2 id="多种触摸手势（Peek-and-Pop）-iOS10"><a href="#多种触摸手势（Peek-and-Pop）-iOS10" class="headerlink" title="多种触摸手势（Peek and Pop）(iOS10,*)"></a>多种触摸手势（Peek and Pop）(iOS10,*)</h2><ul>
<li>使用iOS 10 SDK开发的App默认开启了Peek and Pop链接预览，但这并不是一个新特性；从iOS 9开始，在支持3D Touch的设备中使用WKWebView的allowLinkPreview属性，WKWebView客户端就可以选择基于Peek的链接预览。</li>
<li>当allowLinkPreview属性设为true时，使用者可以<em>轻轻的按下链接</em>来查看，然后在app上的另一个视图里加载链接，同时app在背景中模糊显示。如果使用者<em>用力按下链接</em>，链接会在Safari中弹出。</li>
<li>如果你有像WKPedia这样的应用程序，并寻求能提供更好的用户体验，你可以开始使用我们在iOS 10里面添加的新的API！在新的API中，只要用户在WKWebView中使用3D Touch查看和弹出链接就可以显示自定义视图控制器。这个API是由WKUIDelegate协议中的三个委托方法组成。<h3 id="手势选择"><a href="#手势选择" class="headerlink" title="手势选择"></a>手势选择</h3><blockquote>
<p>webView: shouldPreviewElement: … -&gt; Bool<br>webView: commitPreviewingViewController -&gt; Bool</p>
</blockquote>
</li>
<li>第一个方法，当用户触摸元素时webView(_:shouldPreviewElement:)立即被调用。返回false将完全禁用该元素的预览，并且阻止其他方法的调用。返回true将提供一个自定义视图控制的机会，前提是用户触摸时有足够的力度来启动查看。</li>
<li>第二个方法，如果用户用足够的力触摸来弹出视图控制器， 此时，你可以选择在app中展示／弹出的视图控制器（参见下面的方法 ）。<h3 id="视图重按后弹出视图"><a href="#视图重按后弹出视图" class="headerlink" title="视图重按后弹出视图"></a>视图重按后弹出视图</h3><blockquote>
<p>webView: previewingViewControllerForElement -&gt; UIViewController</p>
</blockquote>
</li>
<li>为其提供了一个定制视图控制器的机会。返回任何非空视图控制器都会导致视图控制器显示为Peek预览。defaultActions参数是一个活动数组，WebKit Webkit默认使用它作为previewActionItems。如果想要使用这些活动中的任何一个，你只需从视图控制器的previewActionItems执行结果中返回即可。这里是WKPedia中这个委托方法的实现情况：</li>
</ul>
<h1 id="JS与WKWebView交互-JavaScript-interacts-With-WKWebView"><a href="#JS与WKWebView交互-JavaScript-interacts-With-WKWebView" class="headerlink" title="JS与WKWebView交互(JavaScript interacts With WKWebView)"></a>JS与WKWebView交互(JavaScript interacts With WKWebView)</h1><h2 id="在WebView加入JS代码"><a href="#在WebView加入JS代码" class="headerlink" title="在WebView加入JS代码"></a>在WebView加入JS代码</h2><ol>
<li><p>图片缩放的js代码</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *js = <span class="string">@"var count = document.images.length;for (var i = 0; i &lt; count; i++) &#123;var image = document.images[i];image.style.width=320;&#125;;window.alert('找到' + count + '张图');"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>根据JS字符串初始化WKUserScript对象</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// WKUserScript *script = [[WKUserScript alloc] initWithSource:js injectionTime:WKUserScriptInjectionTimeAtDocumentEnd forMainFrameOnly:YES];</span></div></pre></td></tr></table></figure>
</li>
<li><p>根据生成的WKUserScript对象，初始化WKWebViewConfiguration </p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">WKWebViewConfiguration</span> *config = [[<span class="built_in">WKWebViewConfiguration</span> alloc] init];</div><div class="line">[config.userContentController addUserScript:script];</div><div class="line">_webView = [[<span class="built_in">WKWebView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds configuration:config];</div><div class="line">[_webView loadHTMLString:<span class="string">@"&lt;head&gt;&lt;/head&gt;&lt;imgea src='http://www.nsu.edu.cn/v/2014v3/img/background/3.jpg' /&gt;"</span>baseURL:<span class="literal">nil</span>];</div><div class="line">[<span class="keyword">self</span>.view addSubview:_webView];</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="WKWebView-执行JSMethod-WebView-running-JS-method"><a href="#WKWebView-执行JSMethod-WebView-running-JS-method" class="headerlink" title="WKWebView 执行JSMethod (WebView running JS method)"></a>WKWebView 执行JSMethod (WebView running JS method)</h2><p>用户调用用JS写过的代码<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">self</span>.webView evaluateJavaScript:jsMethodNameStr completionHandler:completionHandler];</div></pre></td></tr></table></figure></p>
<ul>
<li>jsMethodNameStr:     JS方法名</li>
<li>completionHandler:     异步回调(@escaping)block<h2 id="JS调用App注册的方法"><a href="#JS调用App注册的方法" class="headerlink" title="JS调用App注册的方法"></a>JS调用App注册的方法</h2>在WKWebView里面注册供JS调用的方法，是通过WKUserContentController类下面的方法<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)addScriptMessageHandler:(<span class="keyword">id</span> &lt;<span class="built_in">WKScriptMessageHandler</span>&gt;)scriptMessageHandler name:(<span class="built_in">NSString</span> *)name;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>scriptMessageHandler是代理回调, JS调用name方法后，OC会调用scriptMessageHandler指定的对象。</p>
<hr>
<ul>
<li>JS在调用OC注册方法的时候要用下面的方式<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">window.webkit.messageHandlers.&lt;name&gt;.postMessage(&lt;messageBody&gt;)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注意，name(方法名)是放在中间的，messageBody只能是一个对象，如果要传多个值，需要封装成数组，或者字典。整个示例如下：<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//OC注册供JS调用的方法</span></div><div class="line">[[_webView configuration].userContentController addScriptMessageHandler:<span class="keyword">self</span> name:<span class="string">@"closeMe"</span>];</div><div class="line"></div><div class="line"><span class="comment">//OC在JS调用方法做的处理</span></div><div class="line">- (<span class="keyword">void</span>)userContentController:(<span class="built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="built_in">WKScriptMessage</span> *)message</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"JS 调用了 %@ 方法，传回参数 %@"</span>,message.name,message.body);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//JS调用</span></div><div class="line">    window.webkit.messageHandlers.closeMe.postMessage(null);</div></pre></td></tr></table></figure></p>
<h1 id="控制器不释放！！！"><a href="#控制器不释放！！！" class="headerlink" title="控制器不释放！！！"></a>控制器不释放！！！</h1><h2 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h2><p>如果你在self的dealloc打个断点，会发现self没有释放！这显然是不行的！(StackoverFlow)看到<a href="http://stackoverflow.com/questions/26383031/wkwebview-causes-my-view-controller-to-leak" target="_blank" rel="external">一种解决方法</a>，如下：<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">WeakScriptMessageDelegate</span> : <span class="title">NSObject</span>&lt;<span class="title">WKScriptMessageHandler</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;<span class="built_in">WKScriptMessageHandler</span>&gt; scriptDelegate;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithDelegate:(<span class="keyword">id</span>&lt;<span class="built_in">WKScriptMessageHandler</span>&gt;)scriptDelegate;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">WeakScriptMessageDelegate</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithDelegate:(<span class="keyword">id</span>&lt;<span class="built_in">WKScriptMessageHandler</span>&gt;)scriptDelegate</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        _scriptDelegate = scriptDelegate;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)userContentController:(<span class="built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="built_in">WKScriptMessage</span> *)message</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span>.scriptDelegate userContentController:userContentController didReceiveScriptMessage:message];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<h2 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h2><p>思路：创建一个代理对象， 然后通过代理对象回调指定的self。<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">WKUserContentController</span> *userContentController = [[<span class="built_in">WKUserContentController</span> alloc] init];    </div><div class="line">[userContentController addScriptMessageHandler:[[WeakScriptMessageDelegate alloc] initWithDelegate:<span class="keyword">self</span>] name:<span class="string">@"closeMe"</span>];</div></pre></td></tr></table></figure></p>
<p>运行后，发现self被释放了，WeakSciptMessageDelegate没有释放<br>还需要在self的delloc中释放delegatElement<br><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[WebView configuration].userContrntContoller removeSctiptMessageHandlerForName:<span class="string">@"closeMe"</span>];</div></pre></td></tr></table></figure></p>
<h1 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h1><p> 目前，大多数App需要支持iOS7以上的版本，而WKWebView只在iOS8后才能用，所以需要一个兼容性方案，既iOS7下用UIWebView，iOS8后用WKWebView。<a href="https://github.com/wangyangcc/IMYWebView">这个库</a>提供了这种兼容性方案。</p>
<h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- goBack -&gt; <span class="built_in">WKNavigation</span></div><div class="line">- goForward -&gt; <span class="built_in">WKNavigation</span></div><div class="line">- reload -&gt; <span class="built_in">WKNavigation</span></div><div class="line">- reloadFromOrigin -&gt; <span class="built_in">WKNavigation</span> <span class="comment">//新增函数，比较网络数据是否有变化，没有变化则使用缓存，否则从新请求。</span></div><div class="line">- goToBackForwardListIterm: -&gt; <span class="built_in">WKNavigation</span> <span class="comment">//新增函数，跳转到某个指定历史页面</span></div><div class="line">- stopLoading</div><div class="line"></div><div class="line">.allowsBackForwardNavigationGestures -&gt; Bool <span class="comment">//是否允许左右划手势导航，默认不允许</span></div><div class="line">.estimatedProgress <span class="comment">//加载进度 0-1</span></div><div class="line">.title -&gt; String <span class="comment">//页面Title</span></div><div class="line">.scrollerView.scrollEnabled -&gt; Bool <span class="comment">//是否允许上下滚动</span></div><div class="line">.backForwardList -&gt; <span class="built_in">WKBackForwardList</span> <span class="comment">//访问历史表</span></div></pre></td></tr></table></figure>
<h1 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h1><p>我们关心的H5加载的性能，主要是</p>
<blockquote>
<p>加载链接的性能数据（DNS解析时间、TCP链接时间、Request请求时间、response响应时间、Dom节点解析时间、page渲染时间、获取资源的时序）<br>白屏时间<br>页面渲染耗时</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#笔记# &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与UIWebView相比速度更快， 内存更省。&lt;/li&gt;
&lt;li&gt;iOS8苹果推出的框架Wekkit，提供了替换UIWebView的组件WKWebView。&lt;/li&gt;
&lt;li&gt;在性能、稳定性、功能方面有很大提升（最直观的体现就是加载网页是占用的内存，模拟器加载百度与开源中国网站时，WKWebView占用23M，而UIWebView占用85M）；&lt;/li&gt;
&lt;li&gt;允许JavaScript的Nitro库加载并使用（UIWebView中限制）；&lt;/li&gt;
&lt;li&gt;支持了更多的HTML5特性；&lt;/li&gt;
&lt;li&gt;高达60fps的滚动刷新率以及内置手势；&lt;/li&gt;
&lt;li&gt;将UIWebViewDelegate与UIWebView重构成了14类与3个协议&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/WebKit/ObjC_classic/index.html&quot;&gt;（查看苹果官方文档）&lt;/a&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>架构-Carthage使用</title>
    <link href="https://github.com/LiShengmin/2017/04/28/%E6%9E%B6%E6%9E%84-Carthage%E4%BD%BF%E7%94%A8/"/>
    <id>https://github.com/LiShengmin/2017/04/28/架构-Carthage使用/</id>
    <published>2017-04-28T10:49:43.000Z</published>
    <updated>2017-06-19T17:13:17.483Z</updated>
    
    <content type="html"><![CDATA[<p> 今天有朋友在群里问“怎么使用Swift第三方库？”，对象是SwiftyJSON，正巧这段时间也要用，干脆折腾了下。在SwiftyJSON的GitHub上说，需要先安装Carthage这个包管理。 <a id="more"></a></p>
<p>github地址：<a href="https://github.com/Carthage/Carthage">https://github.com/Carthage/Carthage</a></p>
<ol>
<li>安装Carthage<br>首先到github上Download或者Clone Git 或者使用HomeBrew（我是用这个），安装好。<br><code>brew update</code>(先更新).<code>brew install carthage</code> (安装Carthage).  </li>
<li>安装好以后在carthage的根目录<strong>创建一个Cartfile</strong>文件：<br><code>vim Cartfile</code>输入你想要编译成Framework的Swift第三方库，比如说SwiftyJSON和Alamofire，如下所示:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">github &quot;Alamofire/Alamofire&quot; &amp;gt;= 1.1</div><div class="line">github &quot;SwiftyJSON/SwiftyJSON&quot; &amp;gt;= 2.1.2</div></pre></td></tr></table></figure>
<p>github代表源，而后面的就是用户名和版本库的名字，而”&gt;=” 后面是Tag（本质上就是版本号）</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">carthage update</span></div></pre></td></tr></table></figure>
<p>之后会发现在跟目录下多出了“Carthage”文件夹和“Cartfile.resolved”文件。<br>进入“Carthage/Checkouts”下可以看到刚刚得到的Alamofire和SwiftyJSON。</p>
<h1 id="使用第三方库"><a href="#使用第三方库" class="headerlink" title="使用第三方库"></a>使用第三方库</h1><p>在你的应用程序target的“General”设置标签中的“Embedded Binaries”区域，将“Carthage/Build”目录下你想使用的第三方库文件夹拖进去即可，比如“Carthage/Build/SwiftyJSON”。</p>
<h1 id="失败了不可怕"><a href="#失败了不可怕" class="headerlink" title="失败了不可怕"></a>失败了不可怕</h1><p>如果Build文件夹里是空的，说明刚刚在update的时候一定出现了错误。可以查看下刚刚执行的日志文件里说了什么，按部就班的解决就行。</p>
<p>像我遇到的问题就是因为我没有为SwiftyJSON项目配置我的apple 开发者账号ID，99刀就可以解决问题！<br>解决完问题之后，因为之前执行update时，已经将github的内容抓取到了Checkout目录中，就不用再update抓取了，执行bootstrap就可以开始编译，节省时间。<br><a href="http://blog.crazyphper.com/?p=3661" target="_blank" rel="external">本文链接地址: 使用Carthage安装第三方Swift库</a><br><a href="http://www.isaced.com/post-265.html" target="_blank" rel="external">更加全面的文章在这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 今天有朋友在群里问“怎么使用Swift第三方库？”，对象是SwiftyJSON，正巧这段时间也要用，干脆折腾了下。在SwiftyJSON的GitHub上说，需要先安装Carthage这个包管理。
    
    </summary>
    
    
      <category term="架构" scheme="https://github.com/LiShengmin/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>iOS中 请求主线程刷新UI</title>
    <link href="https://github.com/LiShengmin/2016/11/18/iOS-%E8%AF%B7%E6%B1%82%E4%B8%BB%E7%BA%BF%E7%A8%8B%E5%88%B7%E6%96%B0UI/"/>
    <id>https://github.com/LiShengmin/2016/11/18/iOS-请求主线程刷新UI/</id>
    <published>2016-11-18T08:07:57.000Z</published>
    <updated>2017-05-08T09:45:25.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ([<span class="built_in">NSThread</span> isMainThread])  </div><div class="line">&#123;  </div><div class="line">[<span class="keyword">self</span>.downloadMapBtn setImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"download_map.png"</span>] forState:<span class="built_in">UIControlStateNormal</span>];  </div><div class="line">[<span class="keyword">self</span>.downloadMapBtn setNeedsDisplay];  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">else</span>  </div><div class="line">&#123;  </div><div class="line"><span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;  </div><div class="line"><span class="comment">//Update UI in UI thread here  </span></div><div class="line">[<span class="keyword">self</span>.downloadMapBtn setImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"download_map.png"</span>] forState:<span class="built_in">UIControlStateNormal</span>];  </div><div class="line">[<span class="keyword">self</span>.downloadMapBtn setNeedsDisplay];  </div><div class="line"></div><div class="line"></div><div class="line">&#125;);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div cla
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>架构-网络- 客户端HTTP请求的Header信息</title>
    <link href="https://github.com/LiShengmin/2016/11/11/%E6%9E%B6%E6%9E%84-%E7%BD%91%E7%BB%9C-HTTP%E8%AF%B7%E6%B1%82%E7%9A%84Header%E4%BF%A1%E6%81%AF/"/>
    <id>https://github.com/LiShengmin/2016/11/11/架构-网络-HTTP请求的Header信息/</id>
    <published>2016-11-11T02:58:09.000Z</published>
    <updated>2017-06-19T16:38:35.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="客户端HTTP请求的Header信息"><a href="#客户端HTTP请求的Header信息" class="headerlink" title="客户端HTTP请求的Header信息"></a>客户端HTTP请求的Header信息</h1><p>HTTP（HyperTextTransferProtocol）即超文本传输协议，目前网页传输的的通用协议。HTTP协议采用了请求/响应模型，浏览器或其他客户端发出请求，服务器给与响应。就整个网络资源传输而言，包括message-header和message-body两部分。首先传递message- header，即http header消息 。http header 消息通常被分为4个部分：general  header, request header, response header, entity header。但是这种分法就理解而言，感觉界限不太明确。根据维基百科对http header内容的组织形式，大体分为Request和Response两部分。<br><a id="more"></a></p>
<h2 id="1、HTTP请求方式"><a href="#1、HTTP请求方式" class="headerlink" title="1、HTTP请求方式"></a>1、HTTP请求方式</h2><h3 id="如下表："><a href="#如下表：" class="headerlink" title="如下表："></a>如下表：</h3><table>
<thead>
<tr>
<th>方 法</th>
<th>描 述</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>向Web服务器请求一个文件</td>
</tr>
<tr>
<td>POST</td>
<td>向Web服务器发送数据让Web服务器进行处理</td>
</tr>
<tr>
<td>PUT</td>
<td>向Web服务器发送数据并存储在Web服务器内部</td>
</tr>
<tr>
<td>HEAD</td>
<td>检查一个对象是否存在</td>
</tr>
<tr>
<td>DELETE</td>
<td>从Web服务器上删除一个文件</td>
</tr>
<tr>
<td>CONNECT</td>
<td>对通道提供支持</td>
</tr>
<tr>
<td>TRACE</td>
<td>跟踪到服务器的路径</td>
</tr>
<tr>
<td>OPTIONS</td>
<td>查询Web服务器的性能</td>
</tr>
</tbody>
</table>
<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><p>主要使用到“GET”和“POST”。</p>
<h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><p>POST /test/tupian/cm HTTP/1.1<br>分成三部分：<br>（1）POST：HTTP请求方式<br>（2）/test/tupian/cm：请求Web服务器的目录地址（或者指令）<br>（3）HTTP/1.1: URI（Uniform Resource Identifier，统一资源标识符）及其版本<br>备注：在Ajax中，对应method属性设置。</p>
<h2 id="2、Host"><a href="#2、Host" class="headerlink" title="2、Host"></a>2、Host</h2><p>说明：<br>请求的web服务器域名地址<br>实例：<br>    例如web请求URL：<a href="http://zjm-forum-test10.zjm.baidu.com:8088/test/tupian/cm" target="_blank" rel="external">http://zjm-forum-test10.zjm.baidu.com:8088/test/tupian/cm</a><br>    Host就为zjm-forum-test10.zjm.baidu.com:8088</p>
<h2 id="3、User-Agent"><a href="#3、User-Agent" class="headerlink" title="3、User-Agent"></a>3、User-Agent</h2><p>说明：<br>HTTP客户端运行的浏览器类型的详细信息。通过该头部信息，web服务器可以判断到当前HTTP请求的客户端浏览器类别。<br>实例：<br>    User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11</p>
<h2 id="4、Accept"><a href="#4、Accept" class="headerlink" title="4、Accept"></a>4、Accept</h2><p>说明：<br>指定客户端能够接收的内容类型，内容类型中的先后次序表示客户端接收的先后次序。<br>实例：<br>    例如：Accept:text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,<em>/</em>;<br>q=0.5<br>备注：在Prototyp（1.5）的Ajax代码封装中，将Accept默认设置为“text/javascript, text/html, application/xml, text/xml, <em>/</em>”。<br>这是因为Ajax默认获取服务器返回的Json数据模式。<br>在Ajax代码中，可以使用XMLHttpRequest 对象中setRequestHeader函数方法来动态设置这些Header信息。</p>
<h2 id="5、Accept-Language"><a href="#5、Accept-Language" class="headerlink" title="5、Accept-Language"></a>5、Accept-Language</h2><p>说明：指定HTTP客户端浏览器用来展示返回信息所优先选择的语言。<br>实例：Accept-Language: zh-cn,zh;q=0.5<br>         这里默认为中文。</p>
<h2 id="6、Accept-Encoding"><a href="#6、Accept-Encoding" class="headerlink" title="6、Accept-Encoding"></a>6、Accept-Encoding</h2><p>说明：<br>指定客户端浏览器可以支持的web服务器返回内容压缩编码类型。表示允许服务器在将输出内容发送到客户端以前进行压缩，以节约带宽。而这里设置的就是客户端浏览器所能够支持的返回压缩格式。<br>实例：Accept-Encoding: gzip,deflate<br>备注：其实在百度很多产品线中，apache在给客户端返回页面数据之前，将数据以gzip格式进行压缩。<br><a href="http://man.chinaunix.net/newsoft/ApacheMenual_CN_2.2new/mod/mod_deflate.html" target="_blank" rel="external">另外有关deflate压缩介绍</a></p>
<h2 id="7、Accept-Charset"><a href="#7、Accept-Charset" class="headerlink" title="7、Accept-Charset"></a>7、Accept-Charset</h2><p>说明：浏览器可以接受的字符编码集。<br>实例：Accept-Charset: gb2312,utf-8;q=0.7,*;q=0.7</p>
<h2 id="8、Content-Type"><a href="#8、Content-Type" class="headerlink" title="8、Content-Type"></a>8、Content-Type</h2><p>说明：显示此HTTP请求提交的内容类型。一般只有post提交时才需要设置该属性。<br>实例：Content-type: application/x-www-form-urlencoded;charset:UTF-8<br>有关Content-Type属性值可以如下两种编码类型：<br>（1）“application/x-www-form-urlencoded”： 表单数据向服务器提交时所采用的编码类型，默认的缺省值就是“application/x-www-form-urlencoded”。 然而，在向服务器发送大量的文本、包含非ASCII字符的文本或二进制数据时这种编码方式效率很低。<br>（2）“multipart/form-data”： 在文件上载时，所使用的编码类型应当是“multipart/form-data”，它既可以发送文本数据，也支持二进制数据上载。<br>当提交为单单数据时，可以使用“application/x-www-form-urlencoded”；当提交的是文件时，就需要使用“multipart/form-data”编码类型。<br>在Content-Type属性当中还是指定提交内容的charset字符编码。一般不进行设置，它只是告诉web服务器post提交的数据采用的何种字符编码。<br>         一般在开发过程，是由前端工程与后端UI工程师商量好使用什么字符编码格式来post提交的，然后后端ui工程师按照固定的字符编码来解析提交的数据。所以这里设置的charset没有多大作用。</p>
<h2 id="9、Connection"><a href="#9、Connection" class="headerlink" title="9、Connection"></a>9、Connection</h2><p>说明：<br>表示是否需要持久连接。如果web服务器端看到这里的值为“Keep-Alive”，或者看到请求使用的是HTTP 1.1（HTTP 1.1默认进行持久连接），它就可以利用持久连接的优点，当页面包含多个元素时（例如Applet，图片），显著地减少下载所需要的时间。要实现这一点， web服务器需要在返回给客户端HTTP头信息中发送一个Content-Length（返回信息正文的长度）头，最简单的实现方法是：先把内容写入ByteArrayOutputStream，然 后在正式写出内容之前计算它的大小。</p>
<p>实例：<br>Connection: keep-alive</p>
<h2 id="10、Keep-Alive"><a href="#10、Keep-Alive" class="headerlink" title="10、Keep-Alive"></a>10、Keep-Alive</h2><p>说明：<br>         显示此HTTP连接的Keep-Alive时间。使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。<br>         以前HTTP请求是一站式连接，从HTTP/1.1协议之后，就有了长连接，即在规定的Keep-Alive时间内，连接是不会断开的。</p>
<p>实例：<br>Keep-Alive: 300</p>
<h2 id="11、cookie"><a href="#11、cookie" class="headerlink" title="11、cookie"></a>11、cookie</h2><p>说明：<br>         HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。</p>
<h2 id="12、Referer"><a href="#12、Referer" class="headerlink" title="12、Referer"></a>12、Referer</h2><p>说明：<br>包含一个URL，用户从该URL代表的页面出发访问当前请求的页面</p>
<h1 id="服务器端返回HTTP头部信息"><a href="#服务器端返回HTTP头部信息" class="headerlink" title="服务器端返回HTTP头部信息"></a>服务器端返回HTTP头部信息</h1><p>1、Content-Length<br>说明：表示web服务器返回消息正文的长度</p>
<p>2、Content-Type:<br>说明：返回数据的类型（例如text/html文本类型）和字符编码格式。<br>实例：Content-Type: text/html;charset=utf-8</p>
<p>3、Date<br>说明：显示当前的时间</p>
<p>4、Server<br>说明： 服务器类型</p>
<h1 id="Requests部分"><a href="#Requests部分" class="headerlink" title="Requests部分"></a>Requests部分</h1><table>
<thead>
<tr>
<th style="text-align:left">Header</th>
<th>解释</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Accept</td>
<td>指定客户端能够接收的内容类型</td>
<td>Accept:text/plain, text/html</td>
</tr>
<tr>
<td style="text-align:left">Accept-Charset</td>
<td>浏览器可以接受的字符编码集。</td>
<td>Accept-Charset: iso-8859-5</td>
</tr>
<tr>
<td style="text-align:left">Accept-Encoding</td>
<td>指定浏览器可以支持的web服务器返回内容压缩编码类型。</td>
<td>Accept-Encoding: compress, gzip</td>
</tr>
<tr>
<td style="text-align:left">Accept-Language</td>
<td>浏览器可接受的语言</td>
<td>Accept-Language: en,zh</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">Accept-Ranges</td>
<td>可以请求网页实体的一个或者多个子范围字段</td>
<td>Accept-Ranges: bytes</td>
</tr>
<tr>
<td style="text-align:left">Authorization</td>
<td>HTTP授权的授权证书</td>
<td>Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td>
</tr>
<tr>
<td style="text-align:left">Cache-Control</td>
<td>指定请求和响应遵循的缓存机制</td>
<td>Cache-Control: no-cache</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">Connection</td>
<td>表示是否需要持久连接。（HTTP 1.1默认进行持久连接）</td>
<td>Connection: close</td>
</tr>
<tr>
<td style="text-align:left">Cookie</td>
<td>HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。</td>
<td>Cookie: $Version=1; Skin=new;</td>
</tr>
<tr>
<td style="text-align:left">Content-Length</td>
<td>请求的内容长度</td>
<td>Content-Length: 348</td>
</tr>
<tr>
<td style="text-align:left">Content-Type</td>
<td>请求的与实体对应的MIME信息</td>
<td>Content-Type: application/x-www-form-urlencoded</td>
</tr>
<tr>
<td style="text-align:left">Date</td>
<td>请求发送的日期和时间</td>
<td>Date: Tue, 15 Nov 2010 08:12:31 GMT</td>
</tr>
<tr>
<td style="text-align:left">Expect</td>
<td>请求的特定的服务器行为</td>
<td>Expect: 100-continue</td>
</tr>
<tr>
<td style="text-align:left">From</td>
<td>发出请求的用户的Email</td>
<td>From: user@email.com</td>
</tr>
<tr>
<td style="text-align:left">Host</td>
<td>指定请求的服务器的域名和端口号</td>
<td>Host: www.zcmhi.com</td>
</tr>
<tr>
<td style="text-align:left">If-Match</td>
<td>只有请求内容与实体相匹配才有效</td>
<td>If-Match: “737060cd8c284d8af7ad3082f209582d”</td>
</tr>
<tr>
<td style="text-align:left">If-Modified-Since</td>
<td>如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码</td>
<td>If-Modified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td>
</tr>
<tr>
<td style="text-align:left">If-None-Match</td>
<td>如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变</td>
<td>If-None-Match: “737060cd8c284d8af7ad3082f209582d”</td>
</tr>
<tr>
<td style="text-align:left">If-Range</td>
<td>如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。参数也为Etag</td>
<td>If-Range: “737060cd8c284d8af7ad3082f209582d”</td>
</tr>
<tr>
<td style="text-align:left">If-Unmodified-Since</td>
<td>只在实体在指定时间之后未被修改才请求成功</td>
<td>If-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td>
</tr>
<tr>
<td style="text-align:left">Max-Forwards</td>
<td>限制信息通过代理和网关传送的时间</td>
<td>Max-Forwards: 10</td>
</tr>
<tr>
<td style="text-align:left">Pragma</td>
<td>用来包含实现特定的指令</td>
<td>Pragma: no-cache</td>
</tr>
<tr>
<td style="text-align:left">Proxy-Authorization</td>
<td>连接到代理的授权证书</td>
<td>Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td>
</tr>
<tr>
<td style="text-align:left">Range</td>
<td>只请求实体的一部分，指定范围</td>
<td>Range: bytes=500-999</td>
</tr>
<tr>
<td style="text-align:left">Referer</td>
<td>先前网页的地址，当前请求网页紧随其后,即来路</td>
<td>Referer: <a href="http://www.zcmhi.com/archives/71.html" target="_blank" rel="external">http://www.zcmhi.com/archives/71.html</a></td>
</tr>
<tr>
<td style="text-align:left">TE</td>
<td>客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息</td>
<td>TE: trailers,deflate;q=0.5</td>
</tr>
<tr>
<td style="text-align:left">Upgrade</td>
<td>向服务器指定某种传输协议以便服务器进行转换（如果支持）</td>
<td>Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</td>
</tr>
<tr>
<td style="text-align:left">User-Agent</td>
<td>User-Agent的内容包含发出请求的用户信息</td>
<td>User-Agent: Mozilla/5.0 (Linux; X11)</td>
</tr>
<tr>
<td style="text-align:left">Via</td>
<td>通知中间网关或代理服务器地址，通信协议</td>
<td>Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)</td>
</tr>
<tr>
<td style="text-align:left">Warning</td>
<td>关于消息实体的警告信息</td>
<td>Warn: 199 Miscellaneous warning</td>
</tr>
</tbody>
</table>
<h1 id="Responses-部分"><a href="#Responses-部分" class="headerlink" title="Responses 部分"></a>Responses 部分</h1><table>
<thead>
<tr>
<th>Header</th>
<th>解释</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Accept-Ranges</td>
<td>表明服务器是否支持指定范围请求及哪种类型的分段请求</td>
<td>Accept-Ranges: bytes</td>
</tr>
<tr>
<td>Age</td>
<td>从原始服务器到代理缓存形成的估算时间（以秒计，非负）</td>
<td>Age: 12</td>
</tr>
<tr>
<td>Allow</td>
<td>对某网络资源的有效的请求行为，不允许则返回405</td>
<td>Allow: GET, HEAD</td>
</tr>
<tr>
<td>Cache-Control</td>
<td>告诉所有的缓存机制是否可以缓存及哪种类型</td>
<td>Cache-Control: no-cache</td>
</tr>
<tr>
<td>Content-Encoding</td>
<td>web服务器支持的返回内容压缩编码类型。</td>
<td>Content-Encoding: gzip</td>
</tr>
<tr>
<td>Content-Language</td>
<td>响应体的语言</td>
<td>Content-Language: en,zh</td>
</tr>
<tr>
<td>Content-Length</td>
<td>响应体的长度</td>
<td>Content-Length: 348</td>
</tr>
<tr>
<td>Content-Location</td>
<td>请求资源可替代的备用的另一地址</td>
<td>Content-Location: /index.htm</td>
</tr>
<tr>
<td>Content-MD5</td>
<td>返回资源的MD5校验值</td>
<td>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==</td>
</tr>
<tr>
<td>Content-Range</td>
<td>在整个返回体中本部分的字节位置</td>
<td>Content-Range: bytes 21010-47021/47022</td>
</tr>
<tr>
<td>Content-Type</td>
<td>返回内容的MIME类型</td>
<td>Content-Type: text/html; charset=utf-8</td>
</tr>
<tr>
<td>Date</td>
<td>原始服务器消息发出的时间</td>
<td>Date: Tue, 15 Nov 2010 08:12:31 GMT</td>
</tr>
<tr>
<td>ETag</td>
<td>请求变量的实体标签的当前值</td>
<td>ETag: “737060cd8c284d8af7ad3082f209582d”</td>
</tr>
<tr>
<td>Expires</td>
<td>响应过期的日期和时间</td>
<td>Expires: Thu, 01 Dec 2010 16:00:00 GMT</td>
</tr>
<tr>
<td>Last-Modified</td>
<td>请求资源的最后修改时间</td>
<td>Last-Modified: Tue, 15 Nov 2010 12:45:26 GMT</td>
</tr>
<tr>
<td>Location</td>
<td>用来重定向接收方到非请求URL的位置来完成请求或标识新的资源</td>
<td>Location: <a href="http://www.zcmhi.com/archives/94.html" target="_blank" rel="external">http://www.zcmhi.com/archives/94.html</a></td>
</tr>
<tr>
<td>Pragma</td>
<td>包括实现特定的指令，它可应用到响应链上的任何接收方</td>
<td>Pragma: no-cache</td>
</tr>
<tr>
<td>Proxy-Authenticate</td>
<td>它指出认证方案和可应用到代理的该URL上的参数</td>
<td>Proxy-Authenticate: Basic</td>
</tr>
<tr>
<td>refresh</td>
<td>应用于重定向或一个新的资源被创造，在5秒之后重定向（由网景提出，被大部分浏览器支持）</td>
<td>Refresh: 5; url=<a href="http://www.zcmhi.com/archives/94.html" target="_blank" rel="external">http://www.zcmhi.com/archives/94.html</a></td>
</tr>
<tr>
<td>Retry-After</td>
<td>如果实体暂时不可取，通知客户端在指定时间之后再次尝试</td>
<td>Retry-After: 120</td>
</tr>
<tr>
<td>Server</td>
<td>web服务器软件名称</td>
<td>Server: Apache/1.3.27 (Unix) (Red-Hat/Linux)</td>
</tr>
<tr>
<td>Set-Cookie</td>
<td>设置Http Cookie</td>
<td>Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</td>
</tr>
<tr>
<td>Trailer</td>
<td>指出头域在分块传输编码的尾部存在</td>
<td>Trailer: Max-Forwards</td>
</tr>
<tr>
<td>Transfer-Encoding</td>
<td>文件传输编码</td>
<td>Transfer-Encoding:chunked</td>
</tr>
<tr>
<td>Vary</td>
<td>告诉下游代理是使用缓存响应还是从原始服务器请求</td>
<td>Vary: *</td>
</tr>
<tr>
<td>Via</td>
<td>告知代理客户端响应是通过哪里发送的</td>
<td>Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)</td>
</tr>
<tr>
<td>Warning</td>
<td>警告实体可能存在的问题</td>
<td>Warning: 199 Miscellaneous warning</td>
</tr>
<tr>
<td>WWW-Authenticate</td>
<td>表明客户端请求实体应该使用的授权方案</td>
<td>WWW-Authenticate: Basic</td>
</tr>
</tbody>
</table>
<p>更多参见 <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html" target="_blank" rel="external">w3c官网</a></p>
<h1 id="引用："><a href="#引用：" class="headerlink" title="引用："></a>引用：</h1><p>1.<a href="http://kb.cnblogs.com/page/92320/" target="_blank" rel="external">Http header详解</a>   <a href="http://www.zcmhi.com/archives/71.html" target="_blank" rel="external">原文链接</a><br>2.<a href="http://technique-digest.iteye.com/blog/1174581" target="_blank" rel="external">客户端HTTP请求的Header信息</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;客户端HTTP请求的Header信息&quot;&gt;&lt;a href=&quot;#客户端HTTP请求的Header信息&quot; class=&quot;headerlink&quot; title=&quot;客户端HTTP请求的Header信息&quot;&gt;&lt;/a&gt;客户端HTTP请求的Header信息&lt;/h1&gt;&lt;p&gt;HTTP（HyperTextTransferProtocol）即超文本传输协议，目前网页传输的的通用协议。HTTP协议采用了请求/响应模型，浏览器或其他客户端发出请求，服务器给与响应。就整个网络资源传输而言，包括message-header和message-body两部分。首先传递message- header，即http header消息 。http header 消息通常被分为4个部分：general  header, request header, response header, entity header。但是这种分法就理解而言，感觉界限不太明确。根据维基百科对http header内容的组织形式，大体分为Request和Response两部分。&lt;br&gt;
    
    </summary>
    
    
      <category term="架构" scheme="https://github.com/LiShengmin/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UICollectionView reloadData无法更新视图问题</title>
    <link href="https://github.com/LiShengmin/2016/11/04/iOS-Bug-UICollectionView-reloadData%E6%97%A0%E6%B3%95%E6%9B%B4%E6%96%B0%E7%9A%84%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
    <id>https://github.com/LiShengmin/2016/11/04/iOS-Bug-UICollectionView-reloadData无法更新的奇怪问题/</id>
    <published>2016-11-04T09:46:11.000Z</published>
    <updated>2017-06-19T16:46:07.717Z</updated>
    
    <content type="html"><![CDATA[<p>近来偶尔用到UICollectionView，对于九宫格之类的布局还是很方便的。但使用过程中却出现一个奇怪的问题，暂时没时间仔细研究。先记录下来。<br>在UICollectionViewCell中定义一个图标和一个文本，显示的效果是典型的九宫格。默认会有几条数据，点击最后一个cell会弹出编辑框添加自定义的cell。使用过程中出现的问题时，在第二行最后一个添加的自定义cell，图标怎么都改变不了。如果将整个view切换一下，显示又变成正常了。<br>查找原因是因为，[CollectionView reloadData]方法未调用刷新，网上搜索，也看到有人问类似的问题。有些人给出的解决办法是加一个空的UIView在上面，强制整个collection view刷新。但感觉不是好的办法。后来，尝试使用指定项更新，发现问题解决了：<br>以下两种方法均有效：<br>[self.collectionView reloadItemsAtIndexPaths:@[[NSIndexPath indexPathForRow:7 inSection:0]]];<br>或者<br>[self.collectionView reloadSections:[NSIndexSet indexSetWithIndex:0]];<br>至于为什么reloadData会无效。这个暂时留下，等有空的时候再研究一下其原理。或者有牛人知道也请不吝赐教。<br>另外，这情况也提醒我们，能确定加载某个子项（cell）的时候，还是调用直接刷新指定项更好。一来效率高，二来可以避免莫名其妙的现象出现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近来偶尔用到UICollectionView，对于九宫格之类的布局还是很方便的。但使用过程中却出现一个奇怪的问题，暂时没时间仔细研究。先记录下来。&lt;br&gt;在UICollectionViewCell中定义一个图标和一个文本，显示的效果是典型的九宫格。默认会有几条数据，点击最后
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>MacOS-Sierra注册机无法运行的解决办法</title>
    <link href="https://github.com/LiShengmin/2016/11/01/MacOS-Sierra%E6%B3%A8%E5%86%8C%E6%9C%BA%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://github.com/LiShengmin/2016/11/01/MacOS-Sierra注册机无法运行的解决办法/</id>
    <published>2016-11-01T02:46:24.000Z</published>
    <updated>2017-05-08T09:54:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.sdifenzhou.com/wp-content/uploads/2016/09/Keygen.jpg" alt="image1"><br>这段时间以来，小子陆续收到朋友们的留言，因为升级到了macOS Sierra导致所有的Keygen破解程序都无法正常打开了。<br>小子之前因为还停留在OS X 10.11.6，所以更多给朋友们的意见是等待软件更新或者系统更新来兼容，这里小子有时间也更新到了macOS Sierra，根据大家反馈的情况，小子给出一个临时解决macOS Sierra使用注册机的办法。<br><a id="more"></a></p>
<p><img src="http://www.sdifenzhou.com/wp-content/uploads/2016/09/keygen1.jpg" alt="image2"><br>小子简单说明下macOS Sierra下使用注册机的方法：<br>1.右键注册机（这里以“Keygen.app”）显示包内容-Contents-MacOS；<br>2.打开应用程序-实用工具-终端；<br>3.将第一步文件夹内的“patcher”拖入第二步的终端中，再将应用程序中需要破解的程序继续拖入终端中（终端中的格式不要手动去改动），接着，继续将“eyePatch”拖入终端，再次将应用程序中需要破解的程序拖入终端，最后回车即可完成注册；<br>4.第三步的操作小子以命令的方式显示为：patcher 程序 eyePatch 程序 回车；<br>5.Have done！<br><img src="http://www.sdifenzhou.com/wp-content/uploads/2016/09/CORE-Keygen.jpg" alt="image3"><br>另外，有朋友提到CORE KeyGen也无法正常使用，小子这里也一并分享上临时解决的方法：<br>1.下载<a href="https://pan.baidu.com/s/1jIg6bSa" target="_blank" rel="external">upx.out程序</a>并解压缩;<br>2.打开应用程序-实用工具-终端，将解压缩得到的“upx.out”拖入终端，之后输入-d，再空格；<br>3.3.将dmg镜像中的“CORE Keygen.app”拷贝到任意位置（小子将其放置桌面），同样，右键“CORE Keygen”显示包内容-Contents-MacOS，将其中的“CORE Keygen”继续拖入第二步的终端中；<br>4.4.回车，终端中显示“Unpacked 1 file.”表示成功，这时桌面的“CORE Keygen.app”已经可以在MacOS Sierra下正常打开了；<br>5.以上操作小子总结命令如下：upx.out -d CORE Keygen 回车；<br>6.Have done！<br>转载声明：本文转载自：<a href="http://www.sdifenzhou.com/macossierrakeygen.html" target="_blank" rel="external">史蒂芬周的博客</a>：<br>`</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.sdifenzhou.com/wp-content/uploads/2016/09/Keygen.jpg&quot; alt=&quot;image1&quot;&gt;&lt;br&gt;这段时间以来，小子陆续收到朋友们的留言，因为升级到了macOS Sierra导致所有的Keygen破解程序都无法正常打开了。&lt;br&gt;小子之前因为还停留在OS X 10.11.6，所以更多给朋友们的意见是等待软件更新或者系统更新来兼容，这里小子有时间也更新到了macOS Sierra，根据大家反馈的情况，小子给出一个临时解决macOS Sierra使用注册机的办法。&lt;br&gt;
    
    </summary>
    
    
      <category term="MacOS" scheme="https://github.com/LiShengmin/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS8中使用UIAlertController</title>
    <link href="https://github.com/LiShengmin/2016/10/18/iOS8%E4%B8%AD%E4%BD%BF%E7%94%A8UIAlertController/"/>
    <id>https://github.com/LiShengmin/2016/10/18/iOS8中使用UIAlertController/</id>
    <published>2016-10-18T06:51:30.000Z</published>
    <updated>2017-05-08T09:47:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.cocoachina.com/ios/20141126/10320.html" target="_blank" rel="external">http://www.cocoachina.com/ios/20141126/10320.html</a><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.cocoachina.com/ios/20141126/10320.html&quot;&gt;http://www.cocoachina.com/ios/20141126/10320.html&lt;/a&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>UIAlertController介绍</title>
    <link href="https://github.com/LiShengmin/2016/09/21/iOS-UIAlertController%E4%BB%8B%E7%BB%8D/"/>
    <id>https://github.com/LiShengmin/2016/09/21/iOS-UIAlertController介绍/</id>
    <published>2016-09-21T03:46:35.000Z</published>
    <updated>2017-05-08T09:52:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>UIAlertController 在iOS8以上的时候需要调用的方法， <a id="more"></a></p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (IOS8) &#123;</div><div class="line"><span class="built_in">UIAlertController</span> * alertController = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"获取照片"</span> message:<span class="literal">nil</span> preferredStyle:<span class="built_in">UIAlertControllerStyleActionSheet</span>];</div><div class="line"><span class="keyword">if</span> ([<span class="built_in">UIImagePickerController</span> isSourceTypeAvailable:<span class="built_in">UIImagePickerControllerSourceTypeCamera</span>]) &#123;</div><div class="line"><span class="built_in">UIAlertAction</span> * actionDefault = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"相机拍摄"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</div><div class="line">_pickerVC = [[<span class="built_in">UIImagePickerController</span> alloc] init];</div><div class="line">_pickerVC.delegate = <span class="keyword">self</span>;</div><div class="line">_pickerVC.allowsEditing = <span class="literal">NO</span>;</div><div class="line">_pickerVC.sourceType = <span class="built_in">UIImagePickerControllerSourceTypeCamera</span>;</div><div class="line">_pickerVC.showsCameraControls = <span class="literal">NO</span>;</div><div class="line">_pickerVC.cameraOverlayView = <span class="keyword">self</span>.userImagePickerView;</div><div class="line">[<span class="keyword">self</span> presentViewController:_pickerVC animated:<span class="literal">YES</span> completion:^&#123;&#125;];</div><div class="line">&#125;];</div><div class="line">[alertController addAction:actionDefault];</div><div class="line">&#125;</div><div class="line"><span class="built_in">UIAlertAction</span> * actionDefault = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"从相册获取"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</div><div class="line">_pickerVC = [[<span class="built_in">UIImagePickerController</span> alloc] init];</div><div class="line">_pickerVC.delegate = <span class="keyword">self</span>;</div><div class="line">_pickerVC.allowsEditing = <span class="literal">YES</span>;</div><div class="line">_pickerVC.sourceType = <span class="built_in">UIImagePickerControllerSourceTypePhotoLibrary</span>;</div><div class="line">[<span class="keyword">self</span> presentViewController:_pickerVC animated:<span class="literal">YES</span> completion:^&#123;&#125;];</div><div class="line">&#125;];</div><div class="line">[alertController addAction:actionDefault];</div><div class="line"></div><div class="line"><span class="built_in">UIAlertAction</span> * actionCancel = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"取消"</span> style:<span class="built_in">UIAlertActionStyleCancel</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;&#125;];</div><div class="line">[alertController addAction:actionCancel];</div><div class="line">[<span class="keyword">self</span> presentViewController:alertController animated: <span class="literal">YES</span> completion:^&#123;&#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="但是有的时候会报错"><a href="#但是有的时候会报错" class="headerlink" title="但是有的时候会报错"></a>但是有的时候会报错</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">*** Terminating app due to uncaught exception 'NSGenericException', reason: 'Your application has presented a UIAlertController (&lt;UIAlertController: 0x138d27780&gt;) of style UIAlertControllerStyleActionSheet. The modalPresentationStyle of a UIAlertController with this style is UIModalPresentationPopover. You must provide location information for this popover through the alert controller's popoverPresentationController. You must provide either a sourceView and sourceRect or a barButtonItem.  If this information is not known when you present the alert controller, you may provide it in the UIPopoverPresentationControllerDelegate method -prepareForPopoverPresentation.'</div><div class="line">*** First throw call stack:</div><div class="line">(0x182446db0 0x181aabf80 0x187eed268 0x187901fb0 0x1879000c8 0x1878530c8 0x187860a80 0x1875925a4 0x1823fc728 0x1823fa4cc 0x1823fa8fc 0x182324c50 0x183c0c088 0x18760a088 0x10005b0d4 0x181ec28b8)</div><div class="line">libc++abi.dylib: terminating with uncaught exception of type NSException</div></pre></td></tr></table></figure>
<h1 id="百度给出的翻译是"><a href="#百度给出的翻译是" class="headerlink" title="百度给出的翻译是"></a>百度给出的翻译是</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    终止应用程序由于未捕获的异常的nsgenericexception，原因：你的应用了<span class="built_in">UIAlertController</span>（&lt;&lt; uialertcontroller：<span class="number">0x138d27780</span> &gt;）风格uialertcontrollerstyleactionsheet。一个具有这种风格的modalpresentationstyle <span class="built_in">UIAlertController</span> <span class="built_in">UIModalPresentationPopover</span>。你必须通过报警控制器的popoverpresentationcontroller这个弹出提供位置信息。你必须提供一个sourceview和sourcerect或barbuttonitem。如果这个信息是不知道当你目前的警戒控制器，你可以在uipopoverpresentationcontrollerdelegate方法提供prepareforpopoverpresentation。”</div><div class="line">    第一次抛出调用堆栈：</div><div class="line">（<span class="number">0x182446db0</span> <span class="number">0x181aabf80</span> <span class="number">0x187eed268</span> <span class="number">0x187901fb0</span> <span class="number">0x1879000c8</span> <span class="number">0x1878530c8</span> <span class="number">0x187860a80</span> <span class="number">0x1875925a4</span> <span class="number">0x1823fc728</span> <span class="number">0x1823fa4cc</span> <span class="number">0x1823fa8fc</span> <span class="number">0x182324c50</span> <span class="number">0x183c0c088</span> <span class="number">0x18760a088</span> <span class="number">0x10005b0d4</span> <span class="number">0x181ec28b8</span>）</div><div class="line">libc + abi.dylib：同型nsexception未捕获的异常终止</div></pre></td></tr></table></figure>
<h1 id="原因就是"><a href="#原因就是" class="headerlink" title="原因就是"></a>原因就是</h1><pre><code>你没有给其添加源视图位置，也就是说，我们没有给视图添加一个位置用来显示。我们给其一个视图位置如下：
</code></pre><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIPopoverPresentationController</span> *popover = alertController.popoverPresentationController;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (popover) &#123;</div><div class="line"></div><div class="line">popover.sourceView = <span class="keyword">self</span>.view;</div><div class="line">popover.sourceRect = <span class="keyword">self</span>.view.bounds;</div><div class="line">popover.permittedArrowDirections = <span class="built_in">UIPopoverArrowDirectionAny</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UIAlertController 在iOS8以上的时候需要调用的方法，
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UITextField的光标操作扩展</title>
    <link href="https://github.com/LiShengmin/2016/09/09/iOS-TextField%E7%9A%84%E5%85%89%E6%A0%87%E6%93%8D%E4%BD%9C/"/>
    <id>https://github.com/LiShengmin/2016/09/09/iOS-TextField的光标操作/</id>
    <published>2016-09-09T05:38:26.000Z</published>
    <updated>2017-06-19T17:10:41.034Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UITextField的光标操作扩展"><a href="#UITextField的光标操作扩展" class="headerlink" title="UITextField的光标操作扩展"></a>UITextField的光标操作扩展</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在iOS开发中，有时候需要完全自主的定义键盘，用于完整的单词输入，例如计算机应用中，需要一次性的输入sin(，在移动光标时要完整的跳过sin(，在删除时也要完整的删除，这就需要对光标的位置进行精确控制，而iOS并没有相关的函数可以直接操作光标，只给出了选择某个区域的功能，本文将介绍基于区域选择设计的UITextField扩展，用于获取光标位置以及移动光标。<br><a id="more"></a></p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h2 id="光标位置的获取"><a href="#光标位置的获取" class="headerlink" title="光标位置的获取"></a>光标位置的获取</h2><p>在textField中，有一个属性称之为selectedTextRange，这个属性为UITextRange类型，包含[start,end)两个值，通过实验我们可以发现，在没有文字被选取时，start代表当前光标的位置，而end＝0；当有区域被选择时，start和end分别是选择的头和尾的光标位置，从0开始，并且不包含end，例如选择了0～3的位置，则start＝0，end＝4。</p>
<h2 id="光标的移动"><a href="#光标的移动" class="headerlink" title="光标的移动"></a>光标的移动</h2><p>通过setSelectedTextRange:方法可以设置选取范围，我们只要设置一个选取单个字符的范围，即可移动光标而不选中。</p>
<h2 id="关键属性"><a href="#关键属性" class="headerlink" title="关键属性"></a>关键属性</h2><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 内容为[start,end)，无论是否有选取区域，start都描述了光标的位置。</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">readwrite</span>, <span class="keyword">copy</span>) <span class="built_in">UITextRange</span> *selectedTextRange;</div><div class="line"><span class="comment">// 文首和文尾的位置</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UITextPosition</span> *beginningOfDocument;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UITextPosition</span> *endOfDocument;</div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> selectedRange: UITextRange</div><div class="line"><span class="selector-tag">var</span> beginningOfDocument: UITextPosition</div><div class="line"><span class="selector-tag">var</span> endOfDocument: UITextPostition</div></pre></td></tr></table></figure>
<h2 id="关键方法"><a href="#关键方法" class="headerlink" title="关键方法"></a>关键方法</h2><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取以from为基准的to的偏移，例如abcde，光标在c后，则光标相对文尾的偏移为-2。</span></div><div class="line">- (<span class="built_in">NSInteger</span>)offsetFromPosition:(<span class="built_in">UITextPosition</span> *)from toPosition:(<span class="built_in">UITextPosition</span> *)toPosition;</div><div class="line"><span class="comment">// 获取以from为基准偏移offset的光标位置。</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UITextPosition</span> *)positionFromPosition:(<span class="built_in">UITextPosition</span> *)position offset:(<span class="built_in">NSInteger</span>)offset;</div><div class="line"><span class="comment">// 创建一个UITextRange</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UITextRange</span> *)textRangeFromPosition:(<span class="built_in">UITextPosition</span> *)fromPosition toPosition:(<span class="built_in">UITextPosition</span> *)toPosition;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">textview.ofsetFromPosition(<span class="number">_</span>:textview.endOfDocument)</div><div class="line">textview.positionFromPosition(<span class="number">_</span>:postion, offset: currentoffset)</div><div class="line">textview.textRangeFromPosition:(<span class="number">_</span>:fromPosition, toPosition:newPos)</div></pre></td></tr></table></figure>
<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>下面的代码为UITextField创建了一个分类(Category)，包含三个方法，分别用于获取光标位置、从当前位置偏移、从头偏移。</p>
<h2 id="Object-C"><a href="#Object-C" class="headerlink" title="Object-C"></a>Object-C</h2><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UITextField</span> (<span class="title">Extension</span>)</span></div><div class="line"></div><div class="line">- (<span class="built_in">NSInteger</span>)curOffset;</div><div class="line">- (<span class="keyword">void</span>)makeOffset:(<span class="built_in">NSInteger</span>)offset;</div><div class="line">- (<span class="keyword">void</span>)makeOffsetFromBeginning:(<span class="built_in">NSInteger</span>)offset;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="meta">#import <span class="meta-string">"UITextField+Extension.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UITextField</span> (<span class="title">Extension</span>)</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">description	-	基于文首计算出到光标的偏移数值。</div><div class="line">*/</div><div class="line">- (<span class="built_in">NSInteger</span>)curOffset&#123;</div><div class="line">	<span class="keyword">return</span> [<span class="keyword">self</span> offsetFromPosition:<span class="keyword">self</span>.beginningOfDocument toPosition:<span class="keyword">self</span>.selectedTextRange.start];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">description-	实现原理是先获取一个基于文尾的偏移，然后加上要施加的偏移，再重新根据文尾计算位置，最后利用选取来实现光标定位。</div><div class="line">*/</div><div class="line">- (<span class="keyword">void</span>)makeOffset:(<span class="built_in">NSInteger</span>)offset&#123;</div><div class="line"></div><div class="line">	<span class="built_in">UITextRange</span> * selectedRange = [<span class="keyword">self</span> selectedTextRange];</div><div class="line">	<span class="built_in">NSInteger</span> currentOffset = [<span class="keyword">self</span> offsetFromPosition:<span class="keyword">self</span>.endOfDocument toPosition:selectedRange.end];</div><div class="line">	currentOffset += offset;</div><div class="line">	<span class="built_in">UITextPosition</span> * newPos = [<span class="keyword">self</span> positionFromPosition:<span class="keyword">self</span>.endOfDocument offset:currentOffset];</div><div class="line">	<span class="keyword">self</span>.selectedTextRange = [<span class="keyword">self</span> textRangeFromPosition:newPos toPosition:newPos];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)makeOffsetFromBeginning:(<span class="built_in">NSInteger</span>)offset&#123;</div><div class="line"></div><div class="line"><span class="comment">// 先把光标移动到文首，然后再调用上面实现的偏移函数。</span></div><div class="line">	<span class="built_in">UITextPosition</span> * begin = <span class="keyword">self</span>.beginningOfDocument;</div><div class="line">	<span class="built_in">UITextPosition</span> * start = [<span class="keyword">self</span> positionFromPosition:begin offset:<span class="number">0</span>];</div><div class="line">	<span class="built_in">UITextRange</span>    * range = [<span class="keyword">self</span> textRangeFromPosition:start toPosition:start];</div><div class="line">	[<span class="keyword">self</span> setSelectedTextRange:range];</div><div class="line">	[<span class="keyword">self</span> makeOffset:offset];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> pos = textview.selectedRange.location</div><div class="line"></div><div class="line"><span class="comment">// 基于文首计算出到光标的偏移数值。</span></div><div class="line"><span class="keyword">let</span> position = textview.offsetFromPosition(textview.beginningOfDocument, toPosition: (textview.selectedTextRange?.start)!)</div><div class="line"></div><div class="line"><span class="comment">//赋值</span></div><div class="line">textview.text.insertContentsOf(str.characters, at:textview.text!.startIndex.advancedBy(pos))</div><div class="line">ds!.symptom[<span class="keyword">self</span>.pos!].content = textview.text<span class="comment">//这里是把数据源同步到ds 中由DS自己做上传的工作//gho这里是textField拼接的过程</span></div><div class="line"></div><div class="line"><span class="comment">//移动到文首 再调用上面函数</span></div><div class="line"><span class="keyword">let</span> begin = textview.beginningOfDocument;</div><div class="line"><span class="keyword">let</span> start = textview .positionFromPosition(begin, offset: <span class="number">0</span>);</div><div class="line"><span class="keyword">let</span> range = textview.textRangeFromPosition(start!, toPosition: start!)</div><div class="line">textview.selectedTextRange = range;</div><div class="line"></div><div class="line"><span class="comment">// 实现原理是先获取一个基于文尾的偏移，然后加上要施加的偏移，再重新根据文尾计算位置，最后利用选取来实现光标定位。</span></div><div class="line"><span class="keyword">let</span> selectedRange = textview.selectedTextRange;</div><div class="line"><span class="keyword">var</span> currentoffset = textview.offsetFromPosition((textview.endOfDocument), toPosition: (selectedRange?.end)!)</div><div class="line">currentoffset = currentoffset + position + str.characters.<span class="built_in">count</span>;</div><div class="line"><span class="keyword">let</span> newPos = textview.positionFromPosition(textview.endOfDocument, offset: currentoffset)</div><div class="line">textview.selectedTextRange = textview.textRangeFromPosition(newPos!, toPosition: newPos!)</div></pre></td></tr></table></figure>
<p><a href="http://blog.csdn.net/xyt8023y/article/details/48879985" target="_blank" rel="external">原文</a></p>
<h1 id="Extention-OC代码"><a href="#Extention-OC代码" class="headerlink" title="Extention-OC代码"></a>Extention-OC代码</h1><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"UITextField+ExtentRange.h"</span></span></div></pre></td></tr></table></figure>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span>  </span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UITextField</span> (<span class="title">ExtentRange</span>)  </span></div><div class="line"></div><div class="line">- (<span class="built_in">NSRange</span>) selectedRange;  </div><div class="line">- (<span class="keyword">void</span>) setSelectedRange:(<span class="built_in">NSRange</span>) range;  </div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"UITextField+ExtentRange.h"</span>  </span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UITextField</span> (<span class="title">ExtentRange</span>)  </span></div><div class="line"></div><div class="line">- (<span class="built_in">NSRange</span>) selectedRange  </div><div class="line">&#123;  </div><div class="line">	<span class="built_in">UITextPosition</span> * beginning      = <span class="keyword">self</span>.beginningOfDocument;  </div><div class="line">	</div><div class="line">	<span class="built_in">UITextRange</span>    * selectedRange  = <span class="keyword">self</span>.selectedTextRange;  </div><div class="line">	<span class="built_in">UITextPosition</span> * selectionStart = selectedRange.start;  </div><div class="line">	<span class="built_in">UITextPosition</span> * selectionEnd   = selectedRange.end;  </div><div class="line">	</div><div class="line">	<span class="keyword">const</span> <span class="built_in">NSInteger</span> location = [<span class="keyword">self</span> offsetFromPosition:beginning toPosition:selectionStart];  </div><div class="line">	<span class="keyword">const</span> <span class="built_in">NSInteger</span> length = [<span class="keyword">self</span> offsetFromPosition:selectionStart toPosition:selectionEnd];  </div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="built_in">NSMakeRange</span>(location, length);  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">- (<span class="keyword">void</span>) setSelectedRange:(<span class="built_in">NSRange</span>) range  <span class="comment">// 备注：UITextField必须为第一响应者才有效  </span></div><div class="line">&#123;  </div><div class="line">	<span class="built_in">UITextPosition</span> * beginning      = <span class="keyword">self</span>.beginningOfDocument;  </div><div class="line">	</div><div class="line">	<span class="built_in">UITextPosition</span> * startPosition  = [<span class="keyword">self</span> positionFromPosition:beginning offset:range.location];  </div><div class="line">	<span class="built_in">UITextPosition</span> * endPosition    = [<span class="keyword">self</span> positionFromPosition:beginning offset:range.location + range.length];  </div><div class="line">	<span class="built_in">UITextRange</span>    * selectionRange = [<span class="keyword">self</span> textRangeFromPosition:startPosition toPosition:endPosition];  </div><div class="line">	</div><div class="line">	[<span class="keyword">self</span> setSelectedTextRange:selectionRange];  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h1 id="Protocol-Swift"><a href="#Protocol-Swift" class="headerlink" title="Protocol-Swift"></a>Protocol-Swift</h1><p>这里不建议使用Extension的方式，因为为了这么个小功能，而为TextView整体全部实现一个Postion的方法，有点得不偿失。所以我们将这个建议声明成Protocol的形式，由需要的类来引用。<br>另外建议使用属性自协议的方式来声明，如果不明白什么是自协议，欢迎邮箱骚然～<br>希望对大家写Swift一些启发。</p>
<p>//TODO:<br>这里就不给粗实现了，其实很好实现的～～～</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UITextField的光标操作扩展&quot;&gt;&lt;a href=&quot;#UITextField的光标操作扩展&quot; class=&quot;headerlink&quot; title=&quot;UITextField的光标操作扩展&quot;&gt;&lt;/a&gt;UITextField的光标操作扩展&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;在iOS开发中，有时候需要完全自主的定义键盘，用于完整的单词输入，例如计算机应用中，需要一次性的输入sin(，在移动光标时要完整的跳过sin(，在删除时也要完整的删除，这就需要对光标的位置进行精确控制，而iOS并没有相关的函数可以直接操作光标，只给出了选择某个区域的功能，本文将介绍基于区域选择设计的UITextField扩展，用于获取光标位置以及移动光标。&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Swift2.0中的Sting 的基本操作</title>
    <link href="https://github.com/LiShengmin/2016/09/09/iOS-Sting/"/>
    <id>https://github.com/LiShengmin/2016/09/09/iOS-Sting/</id>
    <published>2016-09-08T17:19:03.000Z</published>
    <updated>2017-06-19T16:44:56.501Z</updated>
    
    <content type="html"><![CDATA[<p>Swift中的字符串，第二篇，基本操作。其他的几篇传送门（GitHub打不开链接的同学请自行把地址github改成gitcafe，或者直接去归档里找:-P）：</p>
<p><a href="https://conanwhf.github.com/2015/12/03/Swift_String_1/" target="_blank" rel="external">Swift2.0 中的String（一）：常用属性</a><br><a href="https://conanwhf.github.com/2015/12/03/Swift_String_2/" target="_blank" rel="external">Swift2.0 中的String（二）：基本操作</a><br><a href="https://conanwhf.github.com/2015/12/03/Swift_String_3/" target="_blank" rel="external">Swift2.0 中的String（三）：类型转换</a><br>编码转换(TBD)<br>我的练习源代码可以在<a href="https://github.com/conanwhf/swiftplayground/tree/master/String.playground">这里</a>看到<a id="more"></a><br>首先，我们要记得使用字符串最常用的两个参数：下标(Index)和范围(Range)，几乎所有API都要用到它们<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> offset = str.startIndex.advancedBy(<span class="number">2</span>)<span class="comment">// offset: 3rd char</span></div><div class="line"><span class="keyword">let</span> range  = <span class="type">Range</span>(start: str.startIndex.advancedBy(<span class="number">3</span>), end: str.endIndex.advancedBy(-<span class="number">2</span>))<span class="comment">// range: 3..&lt;6, "345"</span></div></pre></td></tr></table></figure></p>
<h1 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> n = <span class="type">Int</span>(str)!</div><div class="line"><span class="type">String</span>(<span class="string">"the number is <span class="subst">\(n)</span>"</span>)</div><div class="line"><span class="type">String</span>(format:<span class="string">"%.2f,  %i"</span>, <span class="number">9.1</span>, <span class="number">304</span>)</div></pre></td></tr></table></figure>
<h1 id="内容反转"><a href="#内容反转" class="headerlink" title="内容反转"></a>内容反转</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">String</span>(str.characters.<span class="built_in">reverse</span>())</div></pre></td></tr></table></figure>
<h1 id="删除和部分删除"><a href="#删除和部分删除" class="headerlink" title="删除和部分删除"></a>删除和部分删除</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">str.removeRange(range)</div><div class="line">str.removeAtIndex(offset)</div><div class="line"><span class="type">String</span>(str.characters.<span class="built_in">dropFirst</span>())</div><div class="line"><span class="type">String</span>(str.characters.<span class="built_in">dropFirst</span>(<span class="number">3</span>))</div><div class="line"><span class="type">String</span>(str.characters.<span class="built_in">dropLast</span>())</div><div class="line"><span class="type">String</span>(str.characters.<span class="built_in">dropLast</span>(<span class="number">3</span>))</div><div class="line"><span class="comment">//以上对character的操作不改变原来的值！</span></div><div class="line"><span class="comment">// 删除头尾空白字符</span></div><div class="line"><span class="string">"     I love you "</span>.stringByTrimmingCharactersInSet(<span class="type">NSCharacterSet</span>.whitespaceCharacterSet())</div><div class="line"><span class="comment">// 删除头尾字符集</span></div><div class="line"><span class="string">" I love you, too!"</span>.stringByTrimmingCharactersInSet(<span class="type">NSCharacterSet</span>(charactersInString: <span class="string">",. !"</span>))</div><div class="line"><span class="comment">//清空</span></div><div class="line">str.removeAll()</div></pre></td></tr></table></figure>
<h1 id="获取固定位置的子串"><a href="#获取固定位置的子串" class="headerlink" title="获取固定位置的子串"></a>获取固定位置的子串</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">str.substringToIndex(offset)</div><div class="line">str.substringFromIndex(offset)</div><div class="line">str.substringWithRange(range)</div><div class="line">str[range]</div></pre></td></tr></table></figure>
<h1 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">st         = <span class="string">"&lt;123, test2,???&gt;   &lt;测试: 数据  .&gt;"</span></div><div class="line"><span class="comment">// 用固定字符分割</span></div><div class="line">str.componentsSeparatedByString(<span class="string">" "</span>)</div><div class="line"><span class="comment">// 用固定字符集分割</span></div><div class="line">str.componentsSeparatedByCharactersInSet(<span class="type">NSCharacterSet</span>(charactersInString: <span class="string">", ."</span>))</div></pre></td></tr></table></figure>
<h1 id="过滤-查找替换"><a href="#过滤-查找替换" class="headerlink" title="过滤/查找替换"></a>过滤/查找替换</h1><p>使用替换字符串的API，让替换的目标字符串为空即为过滤<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 替换固定位置子串</span></div><div class="line">str.stringByReplacingCharactersInRange(range, withString: <span class="string">"!!!"</span>)</div><div class="line"><span class="comment">// 查找所有匹配并替换/过滤</span></div><div class="line">str.stringByReplacingOccurrencesOfString(<span class="string">"???"</span>, withString: <span class="string">"~"</span>)</div><div class="line">str.stringByReplacingOccurrencesOfString(<span class="string">" "</span>, withString: <span class="string">""</span>, options: <span class="type">NSStringCompareOptions</span>.<span class="type">LiteralSearch</span>, range: <span class="literal">nil</span>)</div><div class="line"><span class="comment">// 过滤字符集合(分割后合并)</span></div><div class="line"><span class="keyword">let</span> arr    = str.componentsSeparatedByCharactersInSet(<span class="type">NSCharacterSet</span>(charactersInString:<span class="string">"-&lt;&gt;"</span>))</div><div class="line">arr.joinWithSeparator(<span class="string">""</span>)</div></pre></td></tr></table></figure></p>
<h1 id="合并-拼接"><a href="#合并-拼接" class="headerlink" title="合并/拼接"></a>合并/拼接</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">s1 + s2 + s3</div><div class="line">str.appendContentsOf(<span class="string">"123"</span>)</div><div class="line">str.stringByAppendingString(<span class="string">"000"</span>)         <span class="comment">//不改变原值！</span></div><div class="line">str.stringByAppendingFormat(<span class="string">"- num %d "</span>, <span class="number">100</span>)      <span class="comment">//不改变原值！</span></div><div class="line"><span class="comment">// 以固定字符串为分隔符拼接</span></div><div class="line">[str, str, str].joinWithSeparator(<span class="string">"\n"</span>)</div></pre></td></tr></table></figure>
<h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">str.insert(<span class="string">" "</span>, atIndex: offset)</div><div class="line">str.insertContentsOf(<span class="string">" hello"</span>.characters, at: offset)</div><div class="line">str.replaceRange(<span class="type">Range</span>( start:offset, end: offset ), with: <span class="string">"???OK!!!"</span>)</div></pre></td></tr></table></figure>
<h1 id="判断前缀或后缀"><a href="#判断前缀或后缀" class="headerlink" title="判断前缀或后缀"></a>判断前缀或后缀</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str.hasPrefix(<span class="string">"01"</span>)</div><div class="line">str.hasSuffix(<span class="string">"567"</span>)</div></pre></td></tr></table></figure>
<h1 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s1.characters.elementsEqual(s2.characters)</div><div class="line">str.characters.elementsEqual(<span class="string">"01234567"</span>.characters)</div><div class="line">s1 == s2</div><div class="line"><span class="string">"111"</span> &lt; <span class="string">"222"</span></div></pre></td></tr></table></figure>
<h1 id="匹配字符串"><a href="#匹配字符串" class="headerlink" title="匹配字符串"></a>匹配字符串</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str.rangeOfString(<span class="string">"efg"</span>)</div><div class="line">str.rangeOfString(<span class="string">"efg"</span>, options: <span class="type">NSStringCompareOptions</span>.<span class="type">CaseInsensitiveSearch</span>, range: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<h1 id="固定位置的部分替换"><a href="#固定位置的部分替换" class="headerlink" title="固定位置的部分替换"></a>固定位置的部分替换</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str.replaceRange(range, with: <span class="string">"test_for_replace"</span>)</div><div class="line">str.stringByReplacingCharactersInRange(range, withString: <span class="string">"哈哈:smile:Tes\nt"</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swift中的字符串，第二篇，基本操作。其他的几篇传送门（GitHub打不开链接的同学请自行把地址github改成gitcafe，或者直接去归档里找:-P）：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://conanwhf.github.com/2015/12/03/Swift_String_1/&quot;&gt;Swift2.0 中的String（一）：常用属性&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://conanwhf.github.com/2015/12/03/Swift_String_2/&quot;&gt;Swift2.0 中的String（二）：基本操作&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://conanwhf.github.com/2015/12/03/Swift_String_3/&quot;&gt;Swift2.0 中的String（三）：类型转换&lt;/a&gt;&lt;br&gt;编码转换(TBD)&lt;br&gt;我的练习源代码可以在&lt;a href=&quot;https://github.com/conanwhf/swiftplayground/tree/master/String.playground&quot;&gt;这里&lt;/a&gt;看到
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-NSString(Categary)</title>
    <link href="https://github.com/LiShengmin/2016/09/07/iOS-NSString(Categary)/"/>
    <id>https://github.com/LiShengmin/2016/09/07/iOS-NSString(Categary)/</id>
    <published>2016-09-07T07:37:14.000Z</published>
    <updated>2017-06-19T17:16:46.778Z</updated>
    
    <content type="html"><![CDATA[<p>主要写了一些项目中常用的方法，使用的是OC语言，后续会陆续补充Swift中的写法。<br><a id="more"></a></p>
<h2 id="1-NSData-与-NSString"><a href="#1-NSData-与-NSString" class="headerlink" title="1. NSData 与 NSString"></a>1. NSData 与 NSString</h2><h3 id="NSData－-gt-NSString"><a href="#NSData－-gt-NSString" class="headerlink" title="NSData－&gt; NSString"></a>NSData－&gt; NSString</h3><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *aString = [[<span class="built_in">NSString</span> alloc] initWithData:adataencoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line"></div><div class="line"><span class="built_in">NSString</span>－&gt;<span class="built_in">NSData</span></div><div class="line"><span class="built_in">NSString</span> *aString = <span class="string">@"1234abcd"</span>;</div><div class="line"><span class="built_in">NSData</span> *aData = [aString dataUsingEncoding: <span class="built_in">NSUTF8StringEncoding</span>];</div></pre></td></tr></table></figure>
<h2 id="2-NSData-与-Byte"><a href="#2-NSData-与-Byte" class="headerlink" title="2.NSData 与 Byte"></a>2.NSData 与 Byte</h2><h3 id="NSData－-gt-Byte数组"><a href="#NSData－-gt-Byte数组" class="headerlink" title="NSData－&gt; Byte数组"></a>NSData－&gt; Byte数组</h3><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *testString = <span class="string">@"1234567890"</span>;</div><div class="line"><span class="built_in">NSData</span> *testData = [testString dataUsingEncoding: <span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">Byte *testByte = (Byte *)[testData bytes];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;[testData length];i++)</div><div class="line">printf(<span class="string">"testByte = %d\n"</span>,testByte[i]);</div></pre></td></tr></table></figure>
<h3 id="Byte数组－-gt-NSData"><a href="#Byte数组－-gt-NSData" class="headerlink" title="Byte数组－&gt; NSData"></a>Byte数组－&gt; NSData</h3><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Byte byte[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>&#125;;</div><div class="line"><span class="built_in">NSData</span> *adata = [[<span class="built_in">NSData</span> alloc] initWithBytes:byte length:<span class="number">24</span>];</div></pre></td></tr></table></figure>
<h3 id="Byte数组－-gt-16进制数"><a href="#Byte数组－-gt-16进制数" class="headerlink" title="Byte数组－&gt;16进制数"></a>Byte数组－&gt;16进制数</h3><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Byte *bytes = (Byte *)[aData bytes];</div><div class="line"><span class="built_in">NSString</span> *hexStr=<span class="string">@""</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;[encryData length];i++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">NSString</span> *newHexStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%x"</span>,bytes[i]&amp;<span class="number">0xff</span>];<span class="comment">///16进制数</span></div><div class="line"><span class="keyword">if</span>([newHexStr length]==<span class="number">1</span>)</div><div class="line">hexStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@0%@"</span>,hexStr,newHexStr];</div><div class="line"><span class="keyword">else</span> </div><div class="line">hexStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@%@"</span>,hexStr,newHexStr];</div><div class="line">&#125;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"bytes 的16进制数为:%@"</span>,hexStr);</div></pre></td></tr></table></figure>
<h3 id="16进制数－-gt-Byte数组"><a href="#16进制数－-gt-Byte数组" class="headerlink" title="16进制数－&gt;Byte数组"></a>16进制数－&gt;Byte数组</h3><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///// 将16进制数据转化成Byte 数组</span></div><div class="line"><span class="built_in">NSString</span> *hexString = <span class="string">@"3e435fab9c34891f"</span>; <span class="comment">//16进制字符串</span></div><div class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">Byte bytes[<span class="number">128</span>];  <span class="comment">///3ds key的Byte 数组， 128位</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;[hexString length];i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> int_ch;  <span class="comment">/// 两位16进制数转化后的10进制数</span></div><div class="line"></div><div class="line"><span class="keyword">unichar</span> hex_char1 = [hexString characterAtIndex:i]; <span class="comment">////两位16进制数中的第一位(高位*16)</span></div><div class="line"><span class="keyword">int</span> int_ch1;</div><div class="line"><span class="keyword">if</span>(hex_char1 &gt;= <span class="string">'0'</span> &amp;&amp; hex_char1 &lt;=<span class="string">'9'</span>)</div><div class="line">int_ch1 = (hex_char1<span class="number">-48</span>)*<span class="number">16</span>;   <span class="comment">//// 0 的Ascll - 48</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(hex_char1 &gt;= <span class="string">'A'</span> &amp;&amp; hex_char1 &lt;=<span class="string">'F'</span>)</div><div class="line">int_ch1 = (hex_char1<span class="number">-55</span>)*<span class="number">16</span>; <span class="comment">//// A 的Ascll - 65</span></div><div class="line"><span class="keyword">else</span> </div><div class="line">int_ch1 = (hex_char1<span class="number">-87</span>)*<span class="number">16</span>; <span class="comment">//// a 的Ascll - 97</span></div><div class="line">i++;</div><div class="line"></div><div class="line"><span class="keyword">unichar</span> hex_char2 = [hexString characterAtIndex:i]; <span class="comment">///两位16进制数中的第二位(低位)</span></div><div class="line"><span class="keyword">int</span> int_ch2;</div><div class="line"><span class="keyword">if</span>(hex_char2 &gt;= <span class="string">'0'</span> &amp;&amp; hex_char2 &lt;=<span class="string">'9'</span>)</div><div class="line">int_ch2 = (hex_char2<span class="number">-48</span>); <span class="comment">//// 0 的Ascll - 48</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(hex_char1 &gt;= <span class="string">'A'</span> &amp;&amp; hex_char1 &lt;=<span class="string">'F'</span>)</div><div class="line">int_ch2 = hex_char2<span class="number">-55</span>; <span class="comment">//// A 的Ascll - 65</span></div><div class="line"><span class="keyword">else</span> </div><div class="line">int_ch2 = hex_char2<span class="number">-87</span>; <span class="comment">//// a 的Ascll - 97</span></div><div class="line"></div><div class="line">int_ch = int_ch1+int_ch2;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"int_ch=%d"</span>,int_ch);</div><div class="line">bytes[j] = int_ch;  <span class="comment">///将转化后的数放入Byte数组里</span></div><div class="line">j++;</div><div class="line">&#125;</div><div class="line"><span class="built_in">NSData</span> *newData = [[<span class="built_in">NSData</span> alloc] initWithBytes:bytes length:<span class="number">128</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"newData=%@"</span>,newData);</div></pre></td></tr></table></figure>
<h2 id="3-NSData-与-UIImage"><a href="#3-NSData-与-UIImage" class="headerlink" title="3. NSData 与 UIImage"></a>3. NSData 与 UIImage</h2><h3 id="NSData－-gt-UIImage"><a href="#NSData－-gt-UIImage" class="headerlink" title="NSData－&gt;UIImage"></a>NSData－&gt;UIImage</h3><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIImage</span> *aimage = [<span class="built_in">UIImage</span> imageWithData: imageData];</div><div class="line"></div><div class="line"><span class="comment">//例：从本地文件沙盒中取图片并转换为NSData</span></div><div class="line"><span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] bundlePath];</div><div class="line"><span class="built_in">NSString</span> *name = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"ceshi.png"</span>];</div><div class="line"><span class="built_in">NSString</span> *finalPath = [path stringByAppendingPathComponent:name];</div><div class="line"><span class="built_in">NSData</span> *imageData = [<span class="built_in">NSData</span> dataWithContentsOfFile: finalPath];</div><div class="line"><span class="built_in">UIImage</span> *aimage = [<span class="built_in">UIImage</span> imageWithData: imageData];</div></pre></td></tr></table></figure>
<h3 id="UIImage－-gt-NSData"><a href="#UIImage－-gt-NSData" class="headerlink" title="UIImage－&gt; NSData"></a>UIImage－&gt; NSData</h3><figure class="highlight mm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSData</span> *imageData = <span class="built_in">UIImagePNGRepresentation</span>(aimae);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要写了一些项目中常用的方法，使用的是OC语言，后续会陆续补充Swift中的写法。&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://github.com/LiShengmin/tags/iOS/"/>
    
  </entry>
  
</feed>
